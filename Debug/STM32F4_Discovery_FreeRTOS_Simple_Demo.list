
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005254  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  080053ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e5c  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001ed8  20001ed8  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f71d  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002673  00000000  00000000  0002f7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d60  00000000  00000000  00031e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c18  00000000  00000000  00032ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006091  00000000  00000000  000337b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000049c5  00000000  00000000  00039849  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003e20e  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003db0  00000000  00000000  0003e28c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053cc 	.word	0x080053cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	080053cc 	.word	0x080053cc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f103 0208 	add.w	r2, r3, #8
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	f103 0208 	add.w	r2, r3, #8
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f103 0208 	add.w	r2, r3, #8
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b085      	sub	sp, #20
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	68fa      	ldr	r2, [r7, #12]
 8000a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	683a      	ldr	r2, [r7, #0]
 8000a82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	1c5a      	adds	r2, r3, #1
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	601a      	str	r2, [r3, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr

08000aa6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b085      	sub	sp, #20
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abc:	d103      	bne.n	8000ac6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	691b      	ldr	r3, [r3, #16]
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	e00c      	b.n	8000ae0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	3308      	adds	r3, #8
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	e002      	b.n	8000ad4 <vListInsert+0x2e>
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d9f6      	bls.n	8000ace <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	683a      	ldr	r2, [r7, #0]
 8000aee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	683a      	ldr	r2, [r7, #0]
 8000afa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b085      	sub	sp, #20
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	691b      	ldr	r3, [r3, #16]
 8000b24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	6892      	ldr	r2, [r2, #8]
 8000b2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6852      	ldr	r2, [r2, #4]
 8000b38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d103      	bne.n	8000b4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689a      	ldr	r2, [r3, #8]
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	1e5a      	subs	r2, r3, #1
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	3b04      	subs	r3, #4
 8000b7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3b04      	subs	r3, #4
 8000b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	f023 0201 	bic.w	r2, r3, #1
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	3b04      	subs	r3, #4
 8000b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <pxPortInitialiseStack+0x64>)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	3b14      	subs	r3, #20
 8000ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	3b04      	subs	r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f06f 0202 	mvn.w	r2, #2
 8000bba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3b20      	subs	r3, #32
 8000bc0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	08000bd5 	.word	0x08000bd5

08000bd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <prvTaskExitError+0x38>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be2:	d009      	beq.n	8000bf8 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000be8:	f383 8811 	msr	BASEPRI, r3
 8000bec:	f3bf 8f6f 	isb	sy
 8000bf0:	f3bf 8f4f 	dsb	sy
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	e7fe      	b.n	8000bf6 <prvTaskExitError+0x22>
 8000bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bfc:	f383 8811 	msr	BASEPRI, r3
 8000c00:	f3bf 8f6f 	isb	sy
 8000c04:	f3bf 8f4f 	dsb	sy
 8000c08:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8000c0a:	e7fe      	b.n	8000c0a <prvTaskExitError+0x36>
 8000c0c:	20000000 	.word	0x20000000

08000c10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000c10:	4b07      	ldr	r3, [pc, #28]	; (8000c30 <pxCurrentTCBConst2>)
 8000c12:	6819      	ldr	r1, [r3, #0]
 8000c14:	6808      	ldr	r0, [r1, #0]
 8000c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c1a:	f380 8809 	msr	PSP, r0
 8000c1e:	f3bf 8f6f 	isb	sy
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	f380 8811 	msr	BASEPRI, r0
 8000c2a:	4770      	bx	lr
 8000c2c:	f3af 8000 	nop.w

08000c30 <pxCurrentTCBConst2>:
 8000c30:	20001ca8 	.word	0x20001ca8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000c34:	bf00      	nop
 8000c36:	bf00      	nop

08000c38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <prvPortStartFirstTask+0x1c>)
 8000c3a:	6800      	ldr	r0, [r0, #0]
 8000c3c:	6800      	ldr	r0, [r0, #0]
 8000c3e:	f380 8808 	msr	MSP, r0
 8000c42:	b662      	cpsie	i
 8000c44:	b661      	cpsie	f
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	df00      	svc	0
 8000c50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000c52:	bf00      	nop
 8000c54:	e000ed08 	.word	0xe000ed08

08000c58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8000c5e:	4b3b      	ldr	r3, [pc, #236]	; (8000d4c <xPortStartScheduler+0xf4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <xPortStartScheduler+0xf8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d109      	bne.n	8000c7c <xPortStartScheduler+0x24>
 8000c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c6c:	f383 8811 	msr	BASEPRI, r3
 8000c70:	f3bf 8f6f 	isb	sy
 8000c74:	f3bf 8f4f 	dsb	sy
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	e7fe      	b.n	8000c7a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <xPortStartScheduler+0xf4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a34      	ldr	r2, [pc, #208]	; (8000d54 <xPortStartScheduler+0xfc>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d109      	bne.n	8000c9a <xPortStartScheduler+0x42>
 8000c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c8a:	f383 8811 	msr	BASEPRI, r3
 8000c8e:	f3bf 8f6f 	isb	sy
 8000c92:	f3bf 8f4f 	dsb	sy
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	e7fe      	b.n	8000c98 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8000c9a:	4b2f      	ldr	r3, [pc, #188]	; (8000d58 <xPortStartScheduler+0x100>)
 8000c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	22ff      	movs	r2, #255	; 0xff
 8000caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b27      	ldr	r3, [pc, #156]	; (8000d5c <xPortStartScheduler+0x104>)
 8000cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000cc2:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <xPortStartScheduler+0x108>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000cc8:	e009      	b.n	8000cde <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <xPortStartScheduler+0x108>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	4a23      	ldr	r2, [pc, #140]	; (8000d60 <xPortStartScheduler+0x108>)
 8000cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	2b80      	cmp	r3, #128	; 0x80
 8000ce8:	d0ef      	beq.n	8000cca <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <xPortStartScheduler+0x108>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <xPortStartScheduler+0x108>)
 8000cf2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <xPortStartScheduler+0x108>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cfc:	4a18      	ldr	r2, [pc, #96]	; (8000d60 <xPortStartScheduler+0x108>)
 8000cfe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000d08:	4a16      	ldr	r2, [pc, #88]	; (8000d64 <xPortStartScheduler+0x10c>)
 8000d0a:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <xPortStartScheduler+0x10c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <xPortStartScheduler+0x10c>)
 8000d16:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <xPortStartScheduler+0x10c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8000d1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000d20:	f000 f8d2 	bl	8000ec8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <xPortStartScheduler+0x110>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8000d2a:	f000 f8e9 	bl	8000f00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <xPortStartScheduler+0x114>)
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <xPortStartScheduler+0x114>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000d38:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000d3a:	f7ff ff7d 	bl	8000c38 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8000d3e:	f7ff ff49 	bl	8000bd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	e000ed00 	.word	0xe000ed00
 8000d50:	410fc271 	.word	0x410fc271
 8000d54:	410fc270 	.word	0x410fc270
 8000d58:	e000e400 	.word	0xe000e400
 8000d5c:	20000098 	.word	0x20000098
 8000d60:	2000009c 	.word	0x2000009c
 8000d64:	e000ed20 	.word	0xe000ed20
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	e000ef34 	.word	0xe000ef34

08000d70 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d7a:	f383 8811 	msr	BASEPRI, r3
 8000d7e:	f3bf 8f6f 	isb	sy
 8000d82:	f3bf 8f4f 	dsb	sy
 8000d86:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <vPortEnterCritical+0x54>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <vPortEnterCritical+0x54>)
 8000d90:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <vPortEnterCritical+0x54>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d10e      	bne.n	8000db8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <vPortEnterCritical+0x58>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d009      	beq.n	8000db8 <vPortEnterCritical+0x48>
 8000da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000da8:	f383 8811 	msr	BASEPRI, r3
 8000dac:	f3bf 8f6f 	isb	sy
 8000db0:	f3bf 8f4f 	dsb	sy
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	e7fe      	b.n	8000db6 <vPortEnterCritical+0x46>
	}
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	e000ed04 	.word	0xe000ed04

08000dcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <vPortExitCritical+0x4c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d109      	bne.n	8000dee <vPortExitCritical+0x22>
 8000dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dde:	f383 8811 	msr	BASEPRI, r3
 8000de2:	f3bf 8f6f 	isb	sy
 8000de6:	f3bf 8f4f 	dsb	sy
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	e7fe      	b.n	8000dec <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <vPortExitCritical+0x4c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3b01      	subs	r3, #1
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <vPortExitCritical+0x4c>)
 8000df6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000df8:	4b07      	ldr	r3, [pc, #28]	; (8000e18 <vPortExitCritical+0x4c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d104      	bne.n	8000e0a <vPortExitCritical+0x3e>
 8000e00:	2300      	movs	r3, #0
 8000e02:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	00000000 	.word	0x00000000

08000e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000e20:	f3ef 8009 	mrs	r0, PSP
 8000e24:	f3bf 8f6f 	isb	sy
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <pxCurrentTCBConst>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	f01e 0f10 	tst.w	lr, #16
 8000e30:	bf08      	it	eq
 8000e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3a:	6010      	str	r0, [r2, #0]
 8000e3c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000e44:	f380 8811 	msr	BASEPRI, r0
 8000e48:	f3bf 8f4f 	dsb	sy
 8000e4c:	f3bf 8f6f 	isb	sy
 8000e50:	f001 f934 	bl	80020bc <vTaskSwitchContext>
 8000e54:	f04f 0000 	mov.w	r0, #0
 8000e58:	f380 8811 	msr	BASEPRI, r0
 8000e5c:	bc08      	pop	{r3}
 8000e5e:	6819      	ldr	r1, [r3, #0]
 8000e60:	6808      	ldr	r0, [r1, #0]
 8000e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e66:	f01e 0f10 	tst.w	lr, #16
 8000e6a:	bf08      	it	eq
 8000e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000e70:	f380 8809 	msr	PSP, r0
 8000e74:	f3bf 8f6f 	isb	sy
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	f3af 8000 	nop.w

08000e80 <pxCurrentTCBConst>:
 8000e80:	20001ca8 	.word	0x20001ca8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop

08000e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8000e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e92:	f383 8811 	msr	BASEPRI, r3
 8000e96:	f3bf 8f6f 	isb	sy
 8000e9a:	f3bf 8f4f 	dsb	sy
 8000e9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000ea0:	f001 f850 	bl	8001f44 <xTaskIncrementTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SysTick_Handler+0x3c>)
 8000eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	e000ed04 	.word	0xe000ed04

08000ec8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000ecc:	4a08      	ldr	r2, [pc, #32]	; (8000ef0 <vPortSetupTimerInterrupt+0x28>)
 8000ece:	4b09      	ldr	r3, [pc, #36]	; (8000ef4 <vPortSetupTimerInterrupt+0x2c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4909      	ldr	r1, [pc, #36]	; (8000ef8 <vPortSetupTimerInterrupt+0x30>)
 8000ed4:	fba1 1303 	umull	r1, r3, r1, r3
 8000ed8:	099b      	lsrs	r3, r3, #6
 8000eda:	3b01      	subs	r3, #1
 8000edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000ede:	4b07      	ldr	r3, [pc, #28]	; (8000efc <vPortSetupTimerInterrupt+0x34>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e014 	.word	0xe000e014
 8000ef4:	20000014 	.word	0x20000014
 8000ef8:	10624dd3 	.word	0x10624dd3
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8000f00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8000f10 <vPortEnableVFP+0x10>
 8000f04:	6801      	ldr	r1, [r0, #0]
 8000f06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f0a:	6001      	str	r1, [r0, #0]
 8000f0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8000f0e:	bf00      	nop
 8000f10:	e000ed88 	.word	0xe000ed88

08000f14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8000f1a:	f3ef 8305 	mrs	r3, IPSR
 8000f1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2b0f      	cmp	r3, #15
 8000f24:	d913      	bls.n	8000f4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8000f26:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <vPortValidateInterruptPriority+0x6c>)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <vPortValidateInterruptPriority+0x70>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7afa      	ldrb	r2, [r7, #11]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d209      	bcs.n	8000f4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8000f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f3e:	f383 8811 	msr	BASEPRI, r3
 8000f42:	f3bf 8f6f 	isb	sy
 8000f46:	f3bf 8f4f 	dsb	sy
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	e7fe      	b.n	8000f4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <vPortValidateInterruptPriority+0x74>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000f56:	4b0d      	ldr	r3, [pc, #52]	; (8000f8c <vPortValidateInterruptPriority+0x78>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d909      	bls.n	8000f72 <vPortValidateInterruptPriority+0x5e>
 8000f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f62:	f383 8811 	msr	BASEPRI, r3
 8000f66:	f3bf 8f6f 	isb	sy
 8000f6a:	f3bf 8f4f 	dsb	sy
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	e7fe      	b.n	8000f70 <vPortValidateInterruptPriority+0x5c>
	}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e3f0 	.word	0xe000e3f0
 8000f84:	20000098 	.word	0x20000098
 8000f88:	e000ed0c 	.word	0xe000ed0c
 8000f8c:	2000009c 	.word	0x2000009c

08000f90 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d004      	beq.n	8000fb0 <pvPortMalloc+0x20>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f023 0307 	bic.w	r3, r3, #7
 8000fac:	3308      	adds	r3, #8
 8000fae:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
 8000fb0:	f000 ff0e 	bl	8001dd0 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <pvPortMalloc+0x88>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d105      	bne.n	8000fc8 <pvPortMalloc+0x38>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <pvPortMalloc+0x8c>)
 8000fbe:	f023 0307 	bic.w	r3, r3, #7
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <pvPortMalloc+0x88>)
 8000fc6:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <pvPortMalloc+0x90>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	f641 32f7 	movw	r2, #7159	; 0x1bf7
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d813      	bhi.n	8001000 <pvPortMalloc+0x70>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <pvPortMalloc+0x90>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	441a      	add	r2, r3
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <pvPortMalloc+0x90>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d90b      	bls.n	8001000 <pvPortMalloc+0x70>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <pvPortMalloc+0x88>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <pvPortMalloc+0x90>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <pvPortMalloc+0x90>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a08      	ldr	r2, [pc, #32]	; (8001020 <pvPortMalloc+0x90>)
 8000ffe:	6013      	str	r3, [r2, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001000:	f000 fef4 	bl	8001dec <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <pvPortMalloc+0x7e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800100a:	f003 fa21 	bl	8004450 <vApplicationMallocFailedHook>
		}
	}
	#endif

	return pvReturn;
 800100e:	68fb      	ldr	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	20001ca4 	.word	0x20001ca4
 800101c:	200000a8 	.word	0x200000a8
 8001020:	20001ca0 	.word	0x20001ca0

08001024 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d009      	beq.n	8001046 <vPortFree+0x22>
 8001032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	f3bf 8f6f 	isb	sy
 800103e:	f3bf 8f4f 	dsb	sy
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e7fe      	b.n	8001044 <vPortFree+0x20>
}
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <xPortGetFreeHeapSize+0x18>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f5c3 53df 	rsb	r3, r3, #7136	; 0x1be0
 8001060:	3318      	adds	r3, #24
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	20001ca0 	.word	0x20001ca0

08001070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d109      	bne.n	8001098 <xQueueGenericReset+0x28>
 8001084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001088:	f383 8811 	msr	BASEPRI, r3
 800108c:	f3bf 8f6f 	isb	sy
 8001090:	f3bf 8f4f 	dsb	sy
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	e7fe      	b.n	8001096 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8001098:	f7ff fe6a 	bl	8000d70 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a4:	68f9      	ldr	r1, [r7, #12]
 80010a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010a8:	fb01 f303 	mul.w	r3, r1, r3
 80010ac:	441a      	add	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2200      	movs	r2, #0
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c8:	3b01      	subs	r3, #1
 80010ca:	68f9      	ldr	r1, [r7, #12]
 80010cc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80010ce:	fb01 f303 	mul.w	r3, r1, r3
 80010d2:	441a      	add	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d114      	bne.n	8001118 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01a      	beq.n	800112c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3310      	adds	r3, #16
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 f8ac 	bl	8002258 <xTaskRemoveFromEventList>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d012      	beq.n	800112c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <xQueueGenericReset+0xcc>)
 8001108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	f3bf 8f4f 	dsb	sy
 8001112:	f3bf 8f6f 	isb	sy
 8001116:	e009      	b.n	800112c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3310      	adds	r3, #16
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fc71 	bl	8000a04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3324      	adds	r3, #36	; 0x24
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fc6c 	bl	8000a04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800112c:	f7ff fe4e 	bl	8000dcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001130:	2301      	movs	r3, #1
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000ed04 	.word	0xe000ed04

08001140 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af02      	add	r7, sp, #8
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <xQueueGenericCreate+0x28>
 8001154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001158:	f383 8811 	msr	BASEPRI, r3
 800115c:	f3bf 8f6f 	isb	sy
 8001160:	f3bf 8f4f 	dsb	sy
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	e7fe      	b.n	8001166 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d102      	bne.n	8001174 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e004      	b.n	800117e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3348      	adds	r3, #72	; 0x48
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff04 	bl	8000f90 <pvPortMalloc>
 8001188:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	3348      	adds	r3, #72	; 0x48
 8001194:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	4613      	mov	r3, r2
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	68f8      	ldr	r0, [r7, #12]
 80011a4:	f000 f805 	bl	80011b2 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 80011a8:	69bb      	ldr	r3, [r7, #24]
	}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d103      	bne.n	80011ce <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	e002      	b.n	80011d4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80011e0:	2101      	movs	r1, #1
 80011e2:	69b8      	ldr	r0, [r7, #24]
 80011e4:	f7ff ff44 	bl	8001070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80011e8:	bf00      	nop
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00e      	beq.n	800121c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8001210:	2300      	movs	r3, #0
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f81c 	bl	8001254 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	461a      	mov	r2, r3
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	6978      	ldr	r0, [r7, #20]
 800123e:	f7ff ff7f 	bl	8001140 <xQueueGenericCreate>
 8001242:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff ffd3 	bl	80011f0 <prvInitialiseMutex>

		return pxNewQueue;
 800124a:	68fb      	ldr	r3, [r7, #12]
	}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126c:	2b00      	cmp	r3, #0
 800126e:	d109      	bne.n	8001284 <xQueueGenericSend+0x30>
 8001270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001274:	f383 8811 	msr	BASEPRI, r3
 8001278:	f3bf 8f6f 	isb	sy
 800127c:	f3bf 8f4f 	dsb	sy
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
 8001282:	e7fe      	b.n	8001282 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d103      	bne.n	8001292 <xQueueGenericSend+0x3e>
 800128a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <xQueueGenericSend+0x42>
 8001292:	2301      	movs	r3, #1
 8001294:	e000      	b.n	8001298 <xQueueGenericSend+0x44>
 8001296:	2300      	movs	r3, #0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d109      	bne.n	80012b0 <xQueueGenericSend+0x5c>
 800129c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012a0:	f383 8811 	msr	BASEPRI, r3
 80012a4:	f3bf 8f6f 	isb	sy
 80012a8:	f3bf 8f4f 	dsb	sy
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
 80012ae:	e7fe      	b.n	80012ae <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d103      	bne.n	80012be <xQueueGenericSend+0x6a>
 80012b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <xQueueGenericSend+0x6e>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <xQueueGenericSend+0x70>
 80012c2:	2300      	movs	r3, #0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d109      	bne.n	80012dc <xQueueGenericSend+0x88>
 80012c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012cc:	f383 8811 	msr	BASEPRI, r3
 80012d0:	f3bf 8f6f 	isb	sy
 80012d4:	f3bf 8f4f 	dsb	sy
 80012d8:	623b      	str	r3, [r7, #32]
 80012da:	e7fe      	b.n	80012da <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80012dc:	f001 f978 	bl	80025d0 <xTaskGetSchedulerState>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d102      	bne.n	80012ec <xQueueGenericSend+0x98>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <xQueueGenericSend+0x9c>
 80012ec:	2301      	movs	r3, #1
 80012ee:	e000      	b.n	80012f2 <xQueueGenericSend+0x9e>
 80012f0:	2300      	movs	r3, #0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d109      	bne.n	800130a <xQueueGenericSend+0xb6>
 80012f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fa:	f383 8811 	msr	BASEPRI, r3
 80012fe:	f3bf 8f6f 	isb	sy
 8001302:	f3bf 8f4f 	dsb	sy
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	e7fe      	b.n	8001308 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800130a:	f7ff fd31 	bl	8000d70 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800130e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001310:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001316:	429a      	cmp	r2, r3
 8001318:	d302      	bcc.n	8001320 <xQueueGenericSend+0xcc>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d129      	bne.n	8001374 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001326:	f000 fa35 	bl	8001794 <prvCopyDataToQueue>
 800132a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800132c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800132e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001330:	2b00      	cmp	r3, #0
 8001332:	d010      	beq.n	8001356 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001336:	3324      	adds	r3, #36	; 0x24
 8001338:	4618      	mov	r0, r3
 800133a:	f000 ff8d 	bl	8002258 <xTaskRemoveFromEventList>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <xQueueGenericSend+0x1f0>)
 8001346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	f3bf 8f4f 	dsb	sy
 8001350:	f3bf 8f6f 	isb	sy
 8001354:	e00a      	b.n	800136c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001358:	2b00      	cmp	r3, #0
 800135a:	d007      	beq.n	800136c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <xQueueGenericSend+0x1f0>)
 800135e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	f3bf 8f4f 	dsb	sy
 8001368:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800136c:	f7ff fd2e 	bl	8000dcc <vPortExitCritical>
				return pdPASS;
 8001370:	2301      	movs	r3, #1
 8001372:	e063      	b.n	800143c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d103      	bne.n	8001382 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800137a:	f7ff fd27 	bl	8000dcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800137e:	2300      	movs	r3, #0
 8001380:	e05c      	b.n	800143c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4618      	mov	r0, r3
 800138e:	f000 ffc5 	bl	800231c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001392:	2301      	movs	r3, #1
 8001394:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001396:	f7ff fd19 	bl	8000dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800139a:	f000 fd19 	bl	8001dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800139e:	f7ff fce7 	bl	8000d70 <vPortEnterCritical>
 80013a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ae:	d103      	bne.n	80013b8 <xQueueGenericSend+0x164>
 80013b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d103      	bne.n	80013ce <xQueueGenericSend+0x17a>
 80013c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80013ce:	f7ff fcfd 	bl	8000dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013d2:	1d3a      	adds	r2, r7, #4
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4611      	mov	r1, r2
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 ffc2 	bl	8002364 <xTaskCheckForTimeOut>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d124      	bne.n	8001430 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013e8:	f000 facc 	bl	8001984 <prvIsQueueFull>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d018      	beq.n	8001424 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013f4:	3310      	adds	r3, #16
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fede 	bl	80021bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001402:	f000 fa57 	bl	80018b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001406:	f000 fcf1 	bl	8001dec <xTaskResumeAll>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	f47f af7c 	bne.w	800130a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <xQueueGenericSend+0x1f0>)
 8001414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	f3bf 8f6f 	isb	sy
 8001422:	e772      	b.n	800130a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001426:	f000 fa45 	bl	80018b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800142a:	f000 fcdf 	bl	8001dec <xTaskResumeAll>
 800142e:	e76c      	b.n	800130a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001432:	f000 fa3f 	bl	80018b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001436:	f000 fcd9 	bl	8001dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800143a:	2300      	movs	r3, #0
		}
	}
}
 800143c:	4618      	mov	r0, r3
 800143e:	3738      	adds	r7, #56	; 0x38
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	e000ed04 	.word	0xe000ed04

08001448 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800145a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <xQueueGenericSendFromISR+0x2c>
 8001460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001464:	f383 8811 	msr	BASEPRI, r3
 8001468:	f3bf 8f6f 	isb	sy
 800146c:	f3bf 8f4f 	dsb	sy
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	e7fe      	b.n	8001472 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d103      	bne.n	8001482 <xQueueGenericSendFromISR+0x3a>
 800147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <xQueueGenericSendFromISR+0x3e>
 8001482:	2301      	movs	r3, #1
 8001484:	e000      	b.n	8001488 <xQueueGenericSendFromISR+0x40>
 8001486:	2300      	movs	r3, #0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d109      	bne.n	80014a0 <xQueueGenericSendFromISR+0x58>
 800148c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001490:	f383 8811 	msr	BASEPRI, r3
 8001494:	f3bf 8f6f 	isb	sy
 8001498:	f3bf 8f4f 	dsb	sy
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	e7fe      	b.n	800149e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d103      	bne.n	80014ae <xQueueGenericSendFromISR+0x66>
 80014a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <xQueueGenericSendFromISR+0x6a>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <xQueueGenericSendFromISR+0x6c>
 80014b2:	2300      	movs	r3, #0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d109      	bne.n	80014cc <xQueueGenericSendFromISR+0x84>
 80014b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014bc:	f383 8811 	msr	BASEPRI, r3
 80014c0:	f3bf 8f6f 	isb	sy
 80014c4:	f3bf 8f4f 	dsb	sy
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e7fe      	b.n	80014ca <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80014cc:	f7ff fd22 	bl	8000f14 <vPortValidateInterruptPriority>
	__asm volatile
 80014d0:	f3ef 8211 	mrs	r2, BASEPRI
 80014d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d8:	f383 8811 	msr	BASEPRI, r3
 80014dc:	f3bf 8f6f 	isb	sy
 80014e0:	f3bf 8f4f 	dsb	sy
 80014e4:	61ba      	str	r2, [r7, #24]
 80014e6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80014e8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d302      	bcc.n	80014fe <xQueueGenericSendFromISR+0xb6>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d12c      	bne.n	8001558 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80014fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	68b9      	ldr	r1, [r7, #8]
 800150c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800150e:	f000 f941 	bl	8001794 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001512:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151a:	d112      	bne.n	8001542 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800151c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001520:	2b00      	cmp	r3, #0
 8001522:	d016      	beq.n	8001552 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001526:	3324      	adds	r3, #36	; 0x24
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fe95 	bl	8002258 <xTaskRemoveFromEventList>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00e      	beq.n	8001552 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00b      	beq.n	8001552 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	e007      	b.n	8001552 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001542:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001546:	3301      	adds	r3, #1
 8001548:	b2db      	uxtb	r3, r3
 800154a:	b25a      	sxtb	r2, r3
 800154c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800154e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001552:	2301      	movs	r3, #1
 8001554:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001556:	e001      	b.n	800155c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001558:	2300      	movs	r3, #0
 800155a:	637b      	str	r3, [r7, #52]	; 0x34
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001568:	4618      	mov	r0, r3
 800156a:	3738      	adds	r7, #56	; 0x38
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800157e:	2300      	movs	r3, #0
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <xQueueGenericReceive+0x30>
	__asm volatile
 800158c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001590:	f383 8811 	msr	BASEPRI, r3
 8001594:	f3bf 8f6f 	isb	sy
 8001598:	f3bf 8f4f 	dsb	sy
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	e7fe      	b.n	800159e <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d103      	bne.n	80015ae <xQueueGenericReceive+0x3e>
 80015a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <xQueueGenericReceive+0x42>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <xQueueGenericReceive+0x44>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d109      	bne.n	80015cc <xQueueGenericReceive+0x5c>
 80015b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015bc:	f383 8811 	msr	BASEPRI, r3
 80015c0:	f3bf 8f6f 	isb	sy
 80015c4:	f3bf 8f4f 	dsb	sy
 80015c8:	623b      	str	r3, [r7, #32]
 80015ca:	e7fe      	b.n	80015ca <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80015cc:	f001 f800 	bl	80025d0 <xTaskGetSchedulerState>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d102      	bne.n	80015dc <xQueueGenericReceive+0x6c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <xQueueGenericReceive+0x70>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <xQueueGenericReceive+0x72>
 80015e0:	2300      	movs	r3, #0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <xQueueGenericReceive+0x8a>
 80015e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ea:	f383 8811 	msr	BASEPRI, r3
 80015ee:	f3bf 8f6f 	isb	sy
 80015f2:	f3bf 8f4f 	dsb	sy
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	e7fe      	b.n	80015f8 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80015fa:	f7ff fbb9 	bl	8000d70 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	2b00      	cmp	r3, #0
 8001608:	d046      	beq.n	8001698 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001614:	f000 f928 	bl	8001868 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d121      	bne.n	8001662 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800161e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001624:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d104      	bne.n	8001638 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800162e:	f001 f8e7 	bl	8002800 <pvTaskIncrementMutexHeldCount>
 8001632:	4602      	mov	r2, r0
 8001634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001636:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d027      	beq.n	8001690 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001642:	3310      	adds	r3, #16
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fe07 	bl	8002258 <xTaskRemoveFromEventList>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01f      	beq.n	8001690 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8001650:	4b4f      	ldr	r3, [pc, #316]	; (8001790 <xQueueGenericReceive+0x220>)
 8001652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	f3bf 8f4f 	dsb	sy
 800165c:	f3bf 8f6f 	isb	sy
 8001660:	e016      	b.n	8001690 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001666:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00f      	beq.n	8001690 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001672:	3324      	adds	r3, #36	; 0x24
 8001674:	4618      	mov	r0, r3
 8001676:	f000 fdef 	bl	8002258 <xTaskRemoveFromEventList>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d007      	beq.n	8001690 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <xQueueGenericReceive+0x220>)
 8001682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	f3bf 8f4f 	dsb	sy
 800168c:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001690:	f7ff fb9c 	bl	8000dcc <vPortExitCritical>
				return pdPASS;
 8001694:	2301      	movs	r3, #1
 8001696:	e077      	b.n	8001788 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800169e:	f7ff fb95 	bl	8000dcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80016a2:	2300      	movs	r3, #0
 80016a4:	e070      	b.n	8001788 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4618      	mov	r0, r3
 80016b2:	f000 fe33 	bl	800231c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80016b6:	2301      	movs	r3, #1
 80016b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80016ba:	f7ff fb87 	bl	8000dcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80016be:	f000 fb87 	bl	8001dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016c2:	f7ff fb55 	bl	8000d70 <vPortEnterCritical>
 80016c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d2:	d103      	bne.n	80016dc <xQueueGenericReceive+0x16c>
 80016d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d103      	bne.n	80016f2 <xQueueGenericReceive+0x182>
 80016ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80016f2:	f7ff fb6b 	bl	8000dcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016f6:	1d3a      	adds	r2, r7, #4
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4611      	mov	r1, r2
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fe30 	bl	8002364 <xTaskCheckForTimeOut>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d131      	bne.n	800176e <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800170a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800170c:	f000 f924 	bl	8001958 <prvIsQueueEmpty>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d025      	beq.n	8001762 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d108      	bne.n	8001730 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 800171e:	f7ff fb27 	bl	8000d70 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 ff70 	bl	800260c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800172c:	f7ff fb4e 	bl	8000dcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001732:	3324      	adds	r3, #36	; 0x24
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fd3f 	bl	80021bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800173e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001740:	f000 f8b8 	bl	80018b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001744:	f000 fb52 	bl	8001dec <xTaskResumeAll>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	f47f af55 	bne.w	80015fa <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 8001750:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <xQueueGenericReceive+0x220>)
 8001752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f3bf 8f4f 	dsb	sy
 800175c:	f3bf 8f6f 	isb	sy
 8001760:	e74b      	b.n	80015fa <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001762:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001764:	f000 f8a6 	bl	80018b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001768:	f000 fb40 	bl	8001dec <xTaskResumeAll>
 800176c:	e745      	b.n	80015fa <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800176e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001770:	f000 f8a0 	bl	80018b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001774:	f000 fb3a 	bl	8001dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001778:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800177a:	f000 f8ed 	bl	8001958 <prvIsQueueEmpty>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	f43f af3a 	beq.w	80015fa <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8001786:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8001788:	4618      	mov	r0, r3
 800178a:	3738      	adds	r7, #56	; 0x38
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	e000ed04 	.word	0xe000ed04

08001794 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10d      	bne.n	80017ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d14d      	bne.n	8001856 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 ff9a 	bl	80026f8 <xTaskPriorityDisinherit>
 80017c4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e043      	b.n	8001856 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d119      	bne.n	8001808 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	6898      	ldr	r0, [r3, #8]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	461a      	mov	r2, r3
 80017de:	68b9      	ldr	r1, [r7, #8]
 80017e0:	f003 f82a 	bl	8004838 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	441a      	add	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d32b      	bcc.n	8001856 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	e026      	b.n	8001856 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	68d8      	ldr	r0, [r3, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	461a      	mov	r2, r3
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	f003 f810 	bl	8004838 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	425b      	negs	r3, r3
 8001822:	441a      	add	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	68da      	ldr	r2, [r3, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	425b      	negs	r3, r3
 800183e:	441a      	add	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d105      	bne.n	8001856 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	3b01      	subs	r3, #1
 8001854:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800185e:	697b      	ldr	r3, [r7, #20]
}
 8001860:	4618      	mov	r0, r3
 8001862:	3718      	adds	r7, #24
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	2b00      	cmp	r3, #0
 8001878:	d018      	beq.n	80018ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	68da      	ldr	r2, [r3, #12]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	441a      	add	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	429a      	cmp	r2, r3
 8001892:	d303      	bcc.n	800189c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68d9      	ldr	r1, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	461a      	mov	r2, r3
 80018a6:	6838      	ldr	r0, [r7, #0]
 80018a8:	f002 ffc6 	bl	8004838 <memcpy>
	}
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80018bc:	f7ff fa58 	bl	8000d70 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80018c8:	e011      	b.n	80018ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d012      	beq.n	80018f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3324      	adds	r3, #36	; 0x24
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 fcbe 	bl	8002258 <xTaskRemoveFromEventList>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80018e2:	f000 fd9d 	bl	8002420 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80018ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	dce9      	bgt.n	80018ca <prvUnlockQueue+0x16>
 80018f6:	e000      	b.n	80018fa <prvUnlockQueue+0x46>
					break;
 80018f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	22ff      	movs	r2, #255	; 0xff
 80018fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001902:	f7ff fa63 	bl	8000dcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8001906:	f7ff fa33 	bl	8000d70 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001910:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001912:	e011      	b.n	8001938 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d012      	beq.n	8001942 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3310      	adds	r3, #16
 8001920:	4618      	mov	r0, r3
 8001922:	f000 fc99 	bl	8002258 <xTaskRemoveFromEventList>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800192c:	f000 fd78 	bl	8002420 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001930:	7bbb      	ldrb	r3, [r7, #14]
 8001932:	3b01      	subs	r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800193c:	2b00      	cmp	r3, #0
 800193e:	dce9      	bgt.n	8001914 <prvUnlockQueue+0x60>
 8001940:	e000      	b.n	8001944 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001942:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	22ff      	movs	r2, #255	; 0xff
 8001948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800194c:	f7ff fa3e 	bl	8000dcc <vPortExitCritical>
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001960:	f7ff fa06 	bl	8000d70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800196c:	2301      	movs	r3, #1
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e001      	b.n	8001976 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8001976:	f7ff fa29 	bl	8000dcc <vPortExitCritical>

	return xReturn;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800198c:	f7ff f9f0 	bl	8000d70 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001998:	429a      	cmp	r2, r3
 800199a:	d102      	bne.n	80019a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800199c:	2301      	movs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e001      	b.n	80019a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80019a6:	f7ff fa11 	bl	8000dcc <vPortExitCritical>

	return xReturn;
 80019aa:	68fb      	ldr	r3, [r7, #12]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	e014      	b.n	80019ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <vQueueAddToRegistry+0x4c>)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10b      	bne.n	80019e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80019d0:	490b      	ldr	r1, [pc, #44]	; (8001a00 <vQueueAddToRegistry+0x4c>)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80019da:	4a09      	ldr	r2, [pc, #36]	; (8001a00 <vQueueAddToRegistry+0x4c>)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4413      	add	r3, r2
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80019e6:	e005      	b.n	80019f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	3301      	adds	r3, #1
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b07      	cmp	r3, #7
 80019f2:	d9e7      	bls.n	80019c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20001df4 	.word	0x20001df4

08001a04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8001a14:	f7ff f9ac 	bl	8000d70 <vPortEnterCritical>
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a1e:	b25b      	sxtb	r3, r3
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d103      	bne.n	8001a2e <vQueueWaitForMessageRestricted+0x2a>
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a34:	b25b      	sxtb	r3, r3
 8001a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3a:	d103      	bne.n	8001a44 <vQueueWaitForMessageRestricted+0x40>
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a44:	f7ff f9c2 	bl	8000dcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d106      	bne.n	8001a5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	3324      	adds	r3, #36	; 0x24
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	68b9      	ldr	r1, [r7, #8]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fbd3 	bl	8002204 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff28 	bl	80018b4 <prvUnlockQueue>
	}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08c      	sub	sp, #48	; 0x30
 8001a70:	af04      	add	r7, sp, #16
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fa85 	bl	8000f90 <pvPortMalloc>
 8001a86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d00e      	beq.n	8001aac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001a8e:	2050      	movs	r0, #80	; 0x50
 8001a90:	f7ff fa7e 	bl	8000f90 <pvPortMalloc>
 8001a94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8001aa2:	e005      	b.n	8001ab0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001aa4:	6978      	ldr	r0, [r7, #20]
 8001aa6:	f7ff fabd 	bl	8001024 <vPortFree>
 8001aaa:	e001      	b.n	8001ab0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d013      	beq.n	8001ade <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9303      	str	r3, [sp, #12]
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	9302      	str	r3, [sp, #8]
 8001ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac2:	9301      	str	r3, [sp, #4]
 8001ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 f80e 	bl	8001aee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001ad2:	69f8      	ldr	r0, [r7, #28]
 8001ad4:	f000 f892 	bl	8001bfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
 8001adc:	e002      	b.n	8001ae4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001ae4:	69bb      	ldr	r3, [r7, #24]
	}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b088      	sub	sp, #32
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	461a      	mov	r2, r3
 8001b06:	21a5      	movs	r1, #165	; 0xa5
 8001b08:	f002 fea1 	bl	800484e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b16:	3b01      	subs	r3, #1
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	f023 0307 	bic.w	r3, r3, #7
 8001b24:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d009      	beq.n	8001b44 <prvInitialiseNewTask+0x56>
 8001b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b34:	f383 8811 	msr	BASEPRI, r3
 8001b38:	f3bf 8f6f 	isb	sy
 8001b3c:	f3bf 8f4f 	dsb	sy
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e7fe      	b.n	8001b42 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	e012      	b.n	8001b70 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	4413      	add	r3, r2
 8001b50:	7819      	ldrb	r1, [r3, #0]
 8001b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	4413      	add	r3, r2
 8001b58:	3334      	adds	r3, #52	; 0x34
 8001b5a:	460a      	mov	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d006      	beq.n	8001b78 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	2b09      	cmp	r3, #9
 8001b74:	d9e9      	bls.n	8001b4a <prvInitialiseNewTask+0x5c>
 8001b76:	e000      	b.n	8001b7a <prvInitialiseNewTask+0x8c>
		{
			break;
 8001b78:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	d901      	bls.n	8001b8c <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b88:	2304      	movs	r3, #4
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe ff4e 	bl	8000a44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	3318      	adds	r3, #24
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7fe ff49 	bl	8000a44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bba:	f1c3 0205 	rsb	r2, r3, #5
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bca:	2200      	movs	r2, #0
 8001bcc:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	69b8      	ldr	r0, [r7, #24]
 8001bdc:	f7fe ffc6 	bl	8000b6c <pxPortInitialiseStack>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001c04:	f7ff f8b4 	bl	8000d70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001c08:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <prvAddNewTaskToReadyList+0xb8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a29      	ldr	r2, [pc, #164]	; (8001cb4 <prvAddNewTaskToReadyList+0xb8>)
 8001c10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <prvAddNewTaskToReadyList+0xbc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001c1a:	4a27      	ldr	r2, [pc, #156]	; (8001cb8 <prvAddNewTaskToReadyList+0xbc>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001c20:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <prvAddNewTaskToReadyList+0xb8>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d110      	bne.n	8001c4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001c28:	f000 fc20 	bl	800246c <prvInitialiseTaskLists>
 8001c2c:	e00d      	b.n	8001c4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <prvAddNewTaskToReadyList+0xc0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <prvAddNewTaskToReadyList+0xbc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d802      	bhi.n	8001c4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001c44:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <prvAddNewTaskToReadyList+0xbc>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <prvAddNewTaskToReadyList+0xc4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3301      	adds	r3, #1
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <prvAddNewTaskToReadyList+0xc4>)
 8001c52:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	2201      	movs	r2, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <prvAddNewTaskToReadyList+0xc8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <prvAddNewTaskToReadyList+0xc8>)
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4a15      	ldr	r2, [pc, #84]	; (8001cc8 <prvAddNewTaskToReadyList+0xcc>)
 8001c74:	441a      	add	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f7fe feee 	bl	8000a5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001c82:	f7ff f8a3 	bl	8000dcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <prvAddNewTaskToReadyList+0xc0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00e      	beq.n	8001cac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <prvAddNewTaskToReadyList+0xbc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <prvAddNewTaskToReadyList+0xd0>)
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20001d80 	.word	0x20001d80
 8001cb8:	20001ca8 	.word	0x20001ca8
 8001cbc:	20001d8c 	.word	0x20001d8c
 8001cc0:	20001d9c 	.word	0x20001d9c
 8001cc4:	20001d88 	.word	0x20001d88
 8001cc8:	20001cac 	.word	0x20001cac
 8001ccc:	e000ed04 	.word	0xe000ed04

08001cd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <vTaskDelay+0x60>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d009      	beq.n	8001cfe <vTaskDelay+0x2e>
 8001cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	e7fe      	b.n	8001cfc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001cfe:	f000 f867 	bl	8001dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d02:	2100      	movs	r1, #0
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 fd8f 	bl	8002828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001d0a:	f000 f86f 	bl	8001dec <xTaskResumeAll>
 8001d0e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001d16:	4b07      	ldr	r3, [pc, #28]	; (8001d34 <vTaskDelay+0x64>)
 8001d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	f3bf 8f4f 	dsb	sy
 8001d22:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20001da8 	.word	0x20001da8
 8001d34:	e000ed04 	.word	0xe000ed04

08001d38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <vTaskStartScheduler+0x80>)
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	2300      	movs	r3, #0
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	2282      	movs	r2, #130	; 0x82
 8001d4a:	491c      	ldr	r1, [pc, #112]	; (8001dbc <vTaskStartScheduler+0x84>)
 8001d4c:	481c      	ldr	r0, [pc, #112]	; (8001dc0 <vTaskStartScheduler+0x88>)
 8001d4e:	f7ff fe8d 	bl	8001a6c <xTaskCreate>
 8001d52:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001d5a:	f000 fdcb 	bl	80028f4 <xTimerCreateTimerTask>
 8001d5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d115      	bne.n	8001d92 <vTaskStartScheduler+0x5a>
 8001d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d6a:	f383 8811 	msr	BASEPRI, r3
 8001d6e:	f3bf 8f6f 	isb	sy
 8001d72:	f3bf 8f4f 	dsb	sy
 8001d76:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <vTaskStartScheduler+0x8c>)
 8001d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001d80:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <vTaskStartScheduler+0x90>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001d86:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <vTaskStartScheduler+0x94>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001d8c:	f7fe ff64 	bl	8000c58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001d90:	e00d      	b.n	8001dae <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d98:	d109      	bne.n	8001dae <vTaskStartScheduler+0x76>
 8001d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	e7fe      	b.n	8001dac <vTaskStartScheduler+0x74>
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20001da4 	.word	0x20001da4
 8001dbc:	080051c0 	.word	0x080051c0
 8001dc0:	08002439 	.word	0x08002439
 8001dc4:	20001da0 	.word	0x20001da0
 8001dc8:	20001d8c 	.word	0x20001d8c
 8001dcc:	20001d84 	.word	0x20001d84

08001dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <vTaskSuspendAll+0x18>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <vTaskSuspendAll+0x18>)
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	20001da8 	.word	0x20001da8

08001dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001dfa:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <xTaskResumeAll+0x114>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d109      	bne.n	8001e16 <xTaskResumeAll+0x2a>
 8001e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	e7fe      	b.n	8001e14 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001e16:	f7fe ffab 	bl	8000d70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001e1a:	4b39      	ldr	r3, [pc, #228]	; (8001f00 <xTaskResumeAll+0x114>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	4a37      	ldr	r2, [pc, #220]	; (8001f00 <xTaskResumeAll+0x114>)
 8001e22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <xTaskResumeAll+0x114>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d161      	bne.n	8001ef0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e2c:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <xTaskResumeAll+0x118>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d05d      	beq.n	8001ef0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e34:	e02e      	b.n	8001e94 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <xTaskResumeAll+0x11c>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3318      	adds	r3, #24
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fe68 	bl	8000b18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fe63 	bl	8000b18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e56:	2201      	movs	r2, #1
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <xTaskResumeAll+0x120>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	4a2a      	ldr	r2, [pc, #168]	; (8001f0c <xTaskResumeAll+0x120>)
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <xTaskResumeAll+0x124>)
 8001e72:	441a      	add	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3304      	adds	r3, #4
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f7fe fdef 	bl	8000a5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <xTaskResumeAll+0x128>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d302      	bcc.n	8001e94 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <xTaskResumeAll+0x12c>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <xTaskResumeAll+0x11c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1cc      	bne.n	8001e36 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001ea2:	f000 fb6f 	bl	8002584 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <xTaskResumeAll+0x130>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d010      	beq.n	8001ed4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001eb2:	f000 f847 	bl	8001f44 <xTaskIncrementTick>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <xTaskResumeAll+0x12c>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f1      	bne.n	8001eb2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001ece:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <xTaskResumeAll+0x130>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001ed4:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <xTaskResumeAll+0x12c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001edc:	2301      	movs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <xTaskResumeAll+0x134>)
 8001ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001ef0:	f7fe ff6c 	bl	8000dcc <vPortExitCritical>

	return xAlreadyYielded;
 8001ef4:	68bb      	ldr	r3, [r7, #8]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20001da8 	.word	0x20001da8
 8001f04:	20001d80 	.word	0x20001d80
 8001f08:	20001d40 	.word	0x20001d40
 8001f0c:	20001d88 	.word	0x20001d88
 8001f10:	20001cac 	.word	0x20001cac
 8001f14:	20001ca8 	.word	0x20001ca8
 8001f18:	20001d94 	.word	0x20001d94
 8001f1c:	20001d90 	.word	0x20001d90
 8001f20:	e000ed04 	.word	0xe000ed04

08001f24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001f2a:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <xTaskGetTickCount+0x1c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001f30:	687b      	ldr	r3, [r7, #4]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20001d84 	.word	0x20001d84

08001f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f4e:	4b50      	ldr	r3, [pc, #320]	; (8002090 <xTaskIncrementTick+0x14c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f040 808c 	bne.w	8002070 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001f58:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <xTaskIncrementTick+0x150>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001f60:	4a4c      	ldr	r2, [pc, #304]	; (8002094 <xTaskIncrementTick+0x150>)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d11f      	bne.n	8001fac <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001f6c:	4b4a      	ldr	r3, [pc, #296]	; (8002098 <xTaskIncrementTick+0x154>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d009      	beq.n	8001f8a <xTaskIncrementTick+0x46>
 8001f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f7a:	f383 8811 	msr	BASEPRI, r3
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	603b      	str	r3, [r7, #0]
 8001f88:	e7fe      	b.n	8001f88 <xTaskIncrementTick+0x44>
 8001f8a:	4b43      	ldr	r3, [pc, #268]	; (8002098 <xTaskIncrementTick+0x154>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <xTaskIncrementTick+0x158>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a40      	ldr	r2, [pc, #256]	; (8002098 <xTaskIncrementTick+0x154>)
 8001f96:	6013      	str	r3, [r2, #0]
 8001f98:	4a40      	ldr	r2, [pc, #256]	; (800209c <xTaskIncrementTick+0x158>)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <xTaskIncrementTick+0x15c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <xTaskIncrementTick+0x15c>)
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	f000 faec 	bl	8002584 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001fac:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <xTaskIncrementTick+0x160>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d34d      	bcc.n	8002052 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fb6:	4b38      	ldr	r3, [pc, #224]	; (8002098 <xTaskIncrementTick+0x154>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <xTaskIncrementTick+0x80>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <xTaskIncrementTick+0x82>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fca:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <xTaskIncrementTick+0x160>)
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	601a      	str	r2, [r3, #0]
					break;
 8001fd2:	e03e      	b.n	8002052 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001fd4:	4b30      	ldr	r3, [pc, #192]	; (8002098 <xTaskIncrementTick+0x154>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d203      	bcs.n	8001ff4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001fec:	4a2d      	ldr	r2, [pc, #180]	; (80020a4 <xTaskIncrementTick+0x160>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6013      	str	r3, [r2, #0]
						break;
 8001ff2:	e02e      	b.n	8002052 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3304      	adds	r3, #4
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fd8d 	bl	8000b18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3318      	adds	r3, #24
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fd84 	bl	8000b18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	2201      	movs	r2, #1
 8002016:	409a      	lsls	r2, r3
 8002018:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <xTaskIncrementTick+0x164>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4313      	orrs	r3, r2
 800201e:	4a22      	ldr	r2, [pc, #136]	; (80020a8 <xTaskIncrementTick+0x164>)
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <xTaskIncrementTick+0x168>)
 8002030:	441a      	add	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3304      	adds	r3, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4610      	mov	r0, r2
 800203a:	f7fe fd10 	bl	8000a5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002042:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <xTaskIncrementTick+0x16c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	429a      	cmp	r2, r3
 800204a:	d3b4      	bcc.n	8001fb6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800204c:	2301      	movs	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002050:	e7b1      	b.n	8001fb6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <xTaskIncrementTick+0x16c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002058:	4914      	ldr	r1, [pc, #80]	; (80020ac <xTaskIncrementTick+0x168>)
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d907      	bls.n	800207a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800206a:	2301      	movs	r3, #1
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	e004      	b.n	800207a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002070:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <xTaskIncrementTick+0x170>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	3301      	adds	r3, #1
 8002076:	4a0f      	ldr	r2, [pc, #60]	; (80020b4 <xTaskIncrementTick+0x170>)
 8002078:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <xTaskIncrementTick+0x174>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002082:	2301      	movs	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002086:	697b      	ldr	r3, [r7, #20]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20001da8 	.word	0x20001da8
 8002094:	20001d84 	.word	0x20001d84
 8002098:	20001d38 	.word	0x20001d38
 800209c:	20001d3c 	.word	0x20001d3c
 80020a0:	20001d98 	.word	0x20001d98
 80020a4:	20001da0 	.word	0x20001da0
 80020a8:	20001d88 	.word	0x20001d88
 80020ac:	20001cac 	.word	0x20001cac
 80020b0:	20001ca8 	.word	0x20001ca8
 80020b4:	20001d90 	.word	0x20001d90
 80020b8:	20001d94 	.word	0x20001d94

080020bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <vTaskSwitchContext+0xec>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <vTaskSwitchContext+0xf0>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80020d0:	e065      	b.n	800219e <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80020d2:	4b36      	ldr	r3, [pc, #216]	; (80021ac <vTaskSwitchContext+0xf0>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80020d8:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <vTaskSwitchContext+0xf4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d111      	bne.n	8002114 <vTaskSwitchContext+0x58>
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3304      	adds	r3, #4
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d10b      	bne.n	8002114 <vTaskSwitchContext+0x58>
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3308      	adds	r3, #8
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d105      	bne.n	8002114 <vTaskSwitchContext+0x58>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	330c      	adds	r3, #12
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	429a      	cmp	r2, r3
 8002112:	d008      	beq.n	8002126 <vTaskSwitchContext+0x6a>
 8002114:	4b26      	ldr	r3, [pc, #152]	; (80021b0 <vTaskSwitchContext+0xf4>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <vTaskSwitchContext+0xf4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3334      	adds	r3, #52	; 0x34
 800211e:	4619      	mov	r1, r3
 8002120:	4610      	mov	r0, r2
 8002122:	f002 f998 	bl	8004456 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <vTaskSwitchContext+0xf8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002134:	7afb      	ldrb	r3, [r7, #11]
 8002136:	f1c3 031f 	rsb	r3, r3, #31
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	491e      	ldr	r1, [pc, #120]	; (80021b8 <vTaskSwitchContext+0xfc>)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <vTaskSwitchContext+0xa8>
	__asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	e7fe      	b.n	8002162 <vTaskSwitchContext+0xa6>
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	4613      	mov	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <vTaskSwitchContext+0xfc>)
 8002170:	4413      	add	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3308      	adds	r3, #8
 8002186:	429a      	cmp	r2, r3
 8002188:	d104      	bne.n	8002194 <vTaskSwitchContext+0xd8>
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <vTaskSwitchContext+0xf4>)
 800219c:	6013      	str	r3, [r2, #0]
}
 800219e:	bf00      	nop
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20001da8 	.word	0x20001da8
 80021ac:	20001d94 	.word	0x20001d94
 80021b0:	20001ca8 	.word	0x20001ca8
 80021b4:	20001d88 	.word	0x20001d88
 80021b8:	20001cac 	.word	0x20001cac

080021bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d109      	bne.n	80021e0 <vTaskPlaceOnEventList+0x24>
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e7fe      	b.n	80021de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021e0:	4b07      	ldr	r3, [pc, #28]	; (8002200 <vTaskPlaceOnEventList+0x44>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	3318      	adds	r3, #24
 80021e6:	4619      	mov	r1, r3
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fe fc5c 	bl	8000aa6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80021ee:	2101      	movs	r1, #1
 80021f0:	6838      	ldr	r0, [r7, #0]
 80021f2:	f000 fb19 	bl	8002828 <prvAddCurrentTaskToDelayedList>
}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	20001ca8 	.word	0x20001ca8

08002204 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <vTaskPlaceOnEventListRestricted+0x26>
 8002216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221a:	f383 8811 	msr	BASEPRI, r3
 800221e:	f3bf 8f6f 	isb	sy
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e7fe      	b.n	8002228 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800222a:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <vTaskPlaceOnEventListRestricted+0x50>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3318      	adds	r3, #24
 8002230:	4619      	mov	r1, r3
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7fe fc13 	bl	8000a5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
 8002242:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68b8      	ldr	r0, [r7, #8]
 8002248:	f000 faee 	bl	8002828 <prvAddCurrentTaskToDelayedList>
	}
 800224c:	bf00      	nop
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20001ca8 	.word	0x20001ca8

08002258 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d109      	bne.n	8002282 <xTaskRemoveFromEventList+0x2a>
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	e7fe      	b.n	8002280 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	3318      	adds	r3, #24
 8002286:	4618      	mov	r0, r3
 8002288:	f7fe fc46 	bl	8000b18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <xTaskRemoveFromEventList+0xac>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d11c      	bne.n	80022ce <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3304      	adds	r3, #4
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe fc3d 	bl	8000b18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	2201      	movs	r2, #1
 80022a4:	409a      	lsls	r2, r3
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <xTaskRemoveFromEventList+0xb0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	4a16      	ldr	r2, [pc, #88]	; (8002308 <xTaskRemoveFromEventList+0xb0>)
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4a13      	ldr	r2, [pc, #76]	; (800230c <xTaskRemoveFromEventList+0xb4>)
 80022be:	441a      	add	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	3304      	adds	r3, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	4610      	mov	r0, r2
 80022c8:	f7fe fbc9 	bl	8000a5e <vListInsertEnd>
 80022cc:	e005      	b.n	80022da <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	3318      	adds	r3, #24
 80022d2:	4619      	mov	r1, r3
 80022d4:	480e      	ldr	r0, [pc, #56]	; (8002310 <xTaskRemoveFromEventList+0xb8>)
 80022d6:	f7fe fbc2 	bl	8000a5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <xTaskRemoveFromEventList+0xbc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d905      	bls.n	80022f4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <xTaskRemoveFromEventList+0xc0>)
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e001      	b.n	80022f8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80022f8:	697b      	ldr	r3, [r7, #20]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20001da8 	.word	0x20001da8
 8002308:	20001d88 	.word	0x20001d88
 800230c:	20001cac 	.word	0x20001cac
 8002310:	20001d40 	.word	0x20001d40
 8002314:	20001ca8 	.word	0x20001ca8
 8002318:	20001d94 	.word	0x20001d94

0800231c <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <vTaskSetTimeOutState+0x22>
 800232a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800232e:	f383 8811 	msr	BASEPRI, r3
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	f3bf 8f4f 	dsb	sy
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	e7fe      	b.n	800233c <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <vTaskSetTimeOutState+0x40>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002346:	4b06      	ldr	r3, [pc, #24]	; (8002360 <vTaskSetTimeOutState+0x44>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	605a      	str	r2, [r3, #4]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20001d98 	.word	0x20001d98
 8002360:	20001d84 	.word	0x20001d84

08002364 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <xTaskCheckForTimeOut+0x24>
 8002374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002378:	f383 8811 	msr	BASEPRI, r3
 800237c:	f3bf 8f6f 	isb	sy
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	e7fe      	b.n	8002386 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d109      	bne.n	80023a2 <xTaskCheckForTimeOut+0x3e>
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	e7fe      	b.n	80023a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80023a2:	f7fe fce5 	bl	8000d70 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80023a6:	4b1c      	ldr	r3, [pc, #112]	; (8002418 <xTaskCheckForTimeOut+0xb4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d102      	bne.n	80023bc <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e026      	b.n	800240a <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b16      	ldr	r3, [pc, #88]	; (800241c <xTaskCheckForTimeOut+0xb8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d007      	beq.n	80023d8 <xTaskCheckForTimeOut+0x74>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d802      	bhi.n	80023d8 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80023d2:	2301      	movs	r3, #1
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	e018      	b.n	800240a <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	1ad2      	subs	r2, r2, r3
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d20e      	bcs.n	8002406 <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6859      	ldr	r1, [r3, #4]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1acb      	subs	r3, r1, r3
 80023f4:	441a      	add	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff ff8e 	bl	800231c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e001      	b.n	800240a <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8002406:	2301      	movs	r3, #1
 8002408:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800240a:	f7fe fcdf 	bl	8000dcc <vPortExitCritical>

	return xReturn;
 800240e:	697b      	ldr	r3, [r7, #20]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20001d84 	.word	0x20001d84
 800241c:	20001d98 	.word	0x20001d98

08002420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <vTaskMissedYield+0x14>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	20001d94 	.word	0x20001d94

08002438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002440:	f000 f854 	bl	80024ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <prvIdleTask+0x2c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d907      	bls.n	800245c <prvIdleTask+0x24>
			{
				taskYIELD();
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <prvIdleTask+0x30>)
 800244e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f3bf 8f4f 	dsb	sy
 8002458:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800245c:	f002 f801 	bl	8004462 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002460:	e7ee      	b.n	8002440 <prvIdleTask+0x8>
 8002462:	bf00      	nop
 8002464:	20001cac 	.word	0x20001cac
 8002468:	e000ed04 	.word	0xe000ed04

0800246c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
 8002476:	e00c      	b.n	8002492 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <prvInitialiseTaskLists+0x60>)
 8002484:	4413      	add	r3, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fabc 	bl	8000a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3301      	adds	r3, #1
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d9ef      	bls.n	8002478 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <prvInitialiseTaskLists+0x64>)
 800249a:	f7fe fab3 	bl	8000a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800249e:	480d      	ldr	r0, [pc, #52]	; (80024d4 <prvInitialiseTaskLists+0x68>)
 80024a0:	f7fe fab0 	bl	8000a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024a4:	480c      	ldr	r0, [pc, #48]	; (80024d8 <prvInitialiseTaskLists+0x6c>)
 80024a6:	f7fe faad 	bl	8000a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <prvInitialiseTaskLists+0x70>)
 80024ac:	f7fe faaa 	bl	8000a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <prvInitialiseTaskLists+0x74>)
 80024b2:	f7fe faa7 	bl	8000a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024b6:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <prvInitialiseTaskLists+0x78>)
 80024b8:	4a05      	ldr	r2, [pc, #20]	; (80024d0 <prvInitialiseTaskLists+0x64>)
 80024ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <prvInitialiseTaskLists+0x7c>)
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <prvInitialiseTaskLists+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20001cac 	.word	0x20001cac
 80024d0:	20001d10 	.word	0x20001d10
 80024d4:	20001d24 	.word	0x20001d24
 80024d8:	20001d40 	.word	0x20001d40
 80024dc:	20001d54 	.word	0x20001d54
 80024e0:	20001d6c 	.word	0x20001d6c
 80024e4:	20001d38 	.word	0x20001d38
 80024e8:	20001d3c 	.word	0x20001d3c

080024ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024f2:	e028      	b.n	8002546 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 80024f4:	f7ff fc6c 	bl	8001dd0 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80024f8:	4b17      	ldr	r3, [pc, #92]	; (8002558 <prvCheckTasksWaitingTermination+0x6c>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf0c      	ite	eq
 8002500:	2301      	moveq	r3, #1
 8002502:	2300      	movne	r3, #0
 8002504:	b2db      	uxtb	r3, r3
 8002506:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002508:	f7ff fc70 	bl	8001dec <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d119      	bne.n	8002546 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8002512:	f7fe fc2d 	bl	8000d70 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <prvCheckTasksWaitingTermination+0x6c>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	3304      	adds	r3, #4
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe faf8 	bl	8000b18 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <prvCheckTasksWaitingTermination+0x70>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <prvCheckTasksWaitingTermination+0x70>)
 8002530:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <prvCheckTasksWaitingTermination+0x74>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	3b01      	subs	r3, #1
 8002538:	4a09      	ldr	r2, [pc, #36]	; (8002560 <prvCheckTasksWaitingTermination+0x74>)
 800253a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800253c:	f7fe fc46 	bl	8000dcc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8002540:	6838      	ldr	r0, [r7, #0]
 8002542:	f000 f80f 	bl	8002564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <prvCheckTasksWaitingTermination+0x74>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1d2      	bne.n	80024f4 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	20001d54 	.word	0x20001d54
 800255c:	20001d80 	.word	0x20001d80
 8002560:	20001d68 	.word	0x20001d68

08002564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fd57 	bl	8001024 <vPortFree>
			vPortFree( pxTCB );
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe fd54 	bl	8001024 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <prvResetNextTaskUnblockTime+0x44>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <prvResetNextTaskUnblockTime+0x14>
 8002594:	2301      	movs	r3, #1
 8002596:	e000      	b.n	800259a <prvResetNextTaskUnblockTime+0x16>
 8002598:	2300      	movs	r3, #0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800259e:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <prvResetNextTaskUnblockTime+0x48>)
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295
 80025a4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025a6:	e008      	b.n	80025ba <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <prvResetNextTaskUnblockTime+0x44>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4a05      	ldr	r2, [pc, #20]	; (80025cc <prvResetNextTaskUnblockTime+0x48>)
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	20001d38 	.word	0x20001d38
 80025cc:	20001da0 	.word	0x20001da0

080025d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <xTaskGetSchedulerState+0x34>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80025de:	2301      	movs	r3, #1
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	e008      	b.n	80025f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <xTaskGetSchedulerState+0x38>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d102      	bne.n	80025f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80025ec:	2302      	movs	r3, #2
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	e001      	b.n	80025f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80025f2:	2300      	movs	r3, #0
 80025f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80025f6:	687b      	ldr	r3, [r7, #4]
	}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	20001d8c 	.word	0x20001d8c
 8002608:	20001da8 	.word	0x20001da8

0800260c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d062      	beq.n	80026e4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <vTaskPriorityInherit+0xe0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	429a      	cmp	r2, r3
 800262a:	d25b      	bcs.n	80026e4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db06      	blt.n	8002642 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <vTaskPriorityInherit+0xe0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	f1c3 0205 	rsb	r2, r3, #5
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6959      	ldr	r1, [r3, #20]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4a27      	ldr	r2, [pc, #156]	; (80026f0 <vTaskPriorityInherit+0xe4>)
 8002654:	4413      	add	r3, r2
 8002656:	4299      	cmp	r1, r3
 8002658:	d101      	bne.n	800265e <vTaskPriorityInherit+0x52>
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <vTaskPriorityInherit+0x54>
 800265e:	2300      	movs	r3, #0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d03a      	beq.n	80026da <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3304      	adds	r3, #4
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fa55 	bl	8000b18 <uxListRemove>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d115      	bne.n	80026a0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002678:	491d      	ldr	r1, [pc, #116]	; (80026f0 <vTaskPriorityInherit+0xe4>)
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10a      	bne.n	80026a0 <vTaskPriorityInherit+0x94>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	2201      	movs	r2, #1
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43da      	mvns	r2, r3
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <vTaskPriorityInherit+0xe8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4013      	ands	r3, r2
 800269c:	4a15      	ldr	r2, [pc, #84]	; (80026f4 <vTaskPriorityInherit+0xe8>)
 800269e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026a0:	4b12      	ldr	r3, [pc, #72]	; (80026ec <vTaskPriorityInherit+0xe0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <vTaskPriorityInherit+0xe8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	4a0e      	ldr	r2, [pc, #56]	; (80026f4 <vTaskPriorityInherit+0xe8>)
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4a09      	ldr	r2, [pc, #36]	; (80026f0 <vTaskPriorityInherit+0xe4>)
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3304      	adds	r3, #4
 80026d0:	4619      	mov	r1, r3
 80026d2:	4610      	mov	r0, r2
 80026d4:	f7fe f9c3 	bl	8000a5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026d8:	e004      	b.n	80026e4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <vTaskPriorityInherit+0xe0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	20001ca8 	.word	0x20001ca8
 80026f0:	20001cac 	.word	0x20001cac
 80026f4:	20001d88 	.word	0x20001d88

080026f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d06c      	beq.n	80027e8 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <xTaskPriorityDisinherit+0xfc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	429a      	cmp	r2, r3
 8002716:	d009      	beq.n	800272c <xTaskPriorityDisinherit+0x34>
 8002718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271c:	f383 8811 	msr	BASEPRI, r3
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	f3bf 8f4f 	dsb	sy
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	e7fe      	b.n	800272a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <xTaskPriorityDisinherit+0x50>
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	e7fe      	b.n	8002746 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	429a      	cmp	r2, r3
 800275c:	d044      	beq.n	80027e8 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	2b00      	cmp	r3, #0
 8002764:	d140      	bne.n	80027e8 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	3304      	adds	r3, #4
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe f9d4 	bl	8000b18 <uxListRemove>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277a:	491f      	ldr	r1, [pc, #124]	; (80027f8 <xTaskPriorityDisinherit+0x100>)
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xTaskPriorityDisinherit+0xaa>
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	2201      	movs	r2, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43da      	mvns	r2, r3
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <xTaskPriorityDisinherit+0x104>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4013      	ands	r3, r2
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <xTaskPriorityDisinherit+0x104>)
 80027a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	f1c3 0205 	rsb	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	2201      	movs	r2, #1
 80027bc:	409a      	lsls	r2, r3
 80027be:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <xTaskPriorityDisinherit+0x104>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <xTaskPriorityDisinherit+0x104>)
 80027c6:	6013      	str	r3, [r2, #0]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4a08      	ldr	r2, [pc, #32]	; (80027f8 <xTaskPriorityDisinherit+0x100>)
 80027d6:	441a      	add	r2, r3
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	3304      	adds	r3, #4
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	f7fe f93d 	bl	8000a5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80027e4:	2301      	movs	r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80027e8:	697b      	ldr	r3, [r7, #20]
	}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20001ca8 	.word	0x20001ca8
 80027f8:	20001cac 	.word	0x20001cac
 80027fc:	20001d88 	.word	0x20001d88

08002800 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <pvTaskIncrementMutexHeldCount+0x24>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <pvTaskIncrementMutexHeldCount+0x24>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002812:	3201      	adds	r2, #1
 8002814:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 8002816:	4b03      	ldr	r3, [pc, #12]	; (8002824 <pvTaskIncrementMutexHeldCount+0x24>)
 8002818:	681b      	ldr	r3, [r3, #0]
	}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	20001ca8 	.word	0x20001ca8

08002828 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002838:	4b28      	ldr	r3, [pc, #160]	; (80028dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3304      	adds	r3, #4
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe f96a 	bl	8000b18 <uxListRemove>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800284a:	4b24      	ldr	r3, [pc, #144]	; (80028dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	2201      	movs	r2, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4013      	ands	r3, r2
 800285e:	4a20      	ldr	r2, [pc, #128]	; (80028e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002860:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002868:	d10a      	bne.n	8002880 <prvAddCurrentTaskToDelayedList+0x58>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d007      	beq.n	8002880 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3304      	adds	r3, #4
 8002876:	4619      	mov	r1, r3
 8002878:	481a      	ldr	r0, [pc, #104]	; (80028e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800287a:	f7fe f8f0 	bl	8000a5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800287e:	e026      	b.n	80028ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4413      	add	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002888:	4b14      	ldr	r3, [pc, #80]	; (80028dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d209      	bcs.n	80028ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3304      	adds	r3, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7fe f8fe 	bl	8000aa6 <vListInsert>
}
 80028aa:	e010      	b.n	80028ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3304      	adds	r3, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe f8f4 	bl	8000aa6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68ba      	ldr	r2, [r7, #8]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d202      	bcs.n	80028ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80028c8:	4a09      	ldr	r2, [pc, #36]	; (80028f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6013      	str	r3, [r2, #0]
}
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20001d84 	.word	0x20001d84
 80028dc:	20001ca8 	.word	0x20001ca8
 80028e0:	20001d88 	.word	0x20001d88
 80028e4:	20001d6c 	.word	0x20001d6c
 80028e8:	20001d3c 	.word	0x20001d3c
 80028ec:	20001d38 	.word	0x20001d38
 80028f0:	20001da0 	.word	0x20001da0

080028f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80028fe:	f000 fadd 	bl	8002ebc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <xTimerCreateTimerTask+0x54>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <xTimerCreateTimerTask+0x58>)
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	2303      	movs	r3, #3
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	2300      	movs	r3, #0
 8002914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002918:	490d      	ldr	r1, [pc, #52]	; (8002950 <xTimerCreateTimerTask+0x5c>)
 800291a:	480e      	ldr	r0, [pc, #56]	; (8002954 <xTimerCreateTimerTask+0x60>)
 800291c:	f7ff f8a6 	bl	8001a6c <xTaskCreate>
 8002920:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d109      	bne.n	800293c <xTimerCreateTimerTask+0x48>
 8002928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	603b      	str	r3, [r7, #0]
 800293a:	e7fe      	b.n	800293a <xTimerCreateTimerTask+0x46>
	return xReturn;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20001ddc 	.word	0x20001ddc
 800294c:	20001de0 	.word	0x20001de0
 8002950:	080051c8 	.word	0x080051c8
 8002954:	08002b0d 	.word	0x08002b0d

08002958 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002958:	b580      	push	{r7, lr}
 800295a:	b088      	sub	sp, #32
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
 8002964:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002966:	2028      	movs	r0, #40	; 0x28
 8002968:	f7fe fb12 	bl	8000f90 <pvPortMalloc>
 800296c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <xTimerCreate+0x30>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	9300      	str	r3, [sp, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 f805 	bl	8002992 <prvInitialiseNewTimer>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8002988:	697b      	ldr	r3, [r7, #20]
	}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d109      	bne.n	80029ba <prvInitialiseNewTimer+0x28>
 80029a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029aa:	f383 8811 	msr	BASEPRI, r3
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	f3bf 8f4f 	dsb	sy
 80029b6:	617b      	str	r3, [r7, #20]
 80029b8:	e7fe      	b.n	80029b8 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80029c0:	f000 fa7c 	bl	8002ebc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80029dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029de:	6a3a      	ldr	r2, [r7, #32]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	3304      	adds	r3, #4
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe f82c 	bl	8000a44 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80029ec:	bf00      	nop
 80029ee:	3718      	adds	r7, #24
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
 8002a00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <xTimerGenericCommand+0x2c>
 8002a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a10:	f383 8811 	msr	BASEPRI, r3
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	623b      	str	r3, [r7, #32]
 8002a1e:	e7fe      	b.n	8002a1e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <xTimerGenericCommand+0x94>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02a      	beq.n	8002a7e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b05      	cmp	r3, #5
 8002a38:	dc18      	bgt.n	8002a6c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a3a:	f7ff fdc9 	bl	80025d0 <xTaskGetSchedulerState>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d109      	bne.n	8002a58 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <xTimerGenericCommand+0x94>)
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	f107 0114 	add.w	r1, r7, #20
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a50:	f7fe fc00 	bl	8001254 <xQueueGenericSend>
 8002a54:	6278      	str	r0, [r7, #36]	; 0x24
 8002a56:	e012      	b.n	8002a7e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <xTimerGenericCommand+0x94>)
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	f107 0114 	add.w	r1, r7, #20
 8002a60:	2300      	movs	r3, #0
 8002a62:	2200      	movs	r2, #0
 8002a64:	f7fe fbf6 	bl	8001254 <xQueueGenericSend>
 8002a68:	6278      	str	r0, [r7, #36]	; 0x24
 8002a6a:	e008      	b.n	8002a7e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <xTimerGenericCommand+0x94>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	f107 0114 	add.w	r1, r7, #20
 8002a74:	2300      	movs	r3, #0
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	f7fe fce6 	bl	8001448 <xQueueGenericSendFromISR>
 8002a7c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3728      	adds	r7, #40	; 0x28
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20001ddc 	.word	0x20001ddc

08002a8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002a96:	4b1c      	ldr	r3, [pc, #112]	; (8002b08 <prvProcessExpiredTimer+0x7c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	3304      	adds	r3, #4
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe f837 	bl	8000b18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d121      	bne.n	8002af6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	18d1      	adds	r1, r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	6978      	ldr	r0, [r7, #20]
 8002ac0:	f000 f8c8 	bl	8002c54 <prvInsertTimerInActiveList>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d015      	beq.n	8002af6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002aca:	2300      	movs	r3, #0
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	6978      	ldr	r0, [r7, #20]
 8002ad6:	f7ff ff8d 	bl	80029f4 <xTimerGenericCommand>
 8002ada:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <prvProcessExpiredTimer+0x6a>
 8002ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 8002aea:	f3bf 8f6f 	isb	sy
 8002aee:	f3bf 8f4f 	dsb	sy
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	e7fe      	b.n	8002af4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	6978      	ldr	r0, [r7, #20]
 8002afc:	4798      	blx	r3
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20001dd4 	.word	0x20001dd4

08002b0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b14:	f107 0308 	add.w	r3, r7, #8
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f000 f857 	bl	8002bcc <prvGetNextExpireTime>
 8002b1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	4619      	mov	r1, r3
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f803 	bl	8002b30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002b2a:	f000 f8d5 	bl	8002cd8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002b2e:	e7f1      	b.n	8002b14 <prvTimerTask+0x8>

08002b30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002b3a:	f7ff f949 	bl	8001dd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002b3e:	f107 0308 	add.w	r3, r7, #8
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f866 	bl	8002c14 <prvSampleTimeNow>
 8002b48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d130      	bne.n	8002bb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <prvProcessTimerOrBlockTask+0x3c>
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d806      	bhi.n	8002b6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002b5e:	f7ff f945 	bl	8001dec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8002b62:	68f9      	ldr	r1, [r7, #12]
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff91 	bl	8002a8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002b6a:	e024      	b.n	8002bb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <prvProcessTimerOrBlockTask+0x90>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf0c      	ite	eq
 8002b7c:	2301      	moveq	r3, #1
 8002b7e:	2300      	movne	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8002b84:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <prvProcessTimerOrBlockTask+0x94>)
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	f7fe ff37 	bl	8001a04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8002b96:	f7ff f929 	bl	8001dec <xTaskResumeAll>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10a      	bne.n	8002bb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <prvProcessTimerOrBlockTask+0x98>)
 8002ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	f3bf 8f4f 	dsb	sy
 8002bac:	f3bf 8f6f 	isb	sy
}
 8002bb0:	e001      	b.n	8002bb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8002bb2:	f7ff f91b 	bl	8001dec <xTaskResumeAll>
}
 8002bb6:	bf00      	nop
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20001dd8 	.word	0x20001dd8
 8002bc4:	20001ddc 	.word	0x20001ddc
 8002bc8:	e000ed04 	.word	0xe000ed04

08002bcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <prvGetNextExpireTime+0x44>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	bf0c      	ite	eq
 8002bde:	2301      	moveq	r3, #1
 8002be0:	2300      	movne	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002bf2:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <prvGetNextExpireTime+0x44>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	e001      	b.n	8002c02 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8002c02:	68fb      	ldr	r3, [r7, #12]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20001dd4 	.word	0x20001dd4

08002c14 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002c1c:	f7ff f982 	bl	8001f24 <xTaskGetTickCount>
 8002c20:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8002c22:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <prvSampleTimeNow+0x3c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d205      	bcs.n	8002c38 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002c2c:	f000 f8e6 	bl	8002dfc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e002      	b.n	8002c3e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002c3e:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <prvSampleTimeNow+0x3c>)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	20001de4 	.word	0x20001de4

08002c54 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d812      	bhi.n	8002ca0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	1ad2      	subs	r2, r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d302      	bcc.n	8002c8e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	e01b      	b.n	8002cc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002c8e:	4b10      	ldr	r3, [pc, #64]	; (8002cd0 <prvInsertTimerInActiveList+0x7c>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3304      	adds	r3, #4
 8002c96:	4619      	mov	r1, r3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	f7fd ff04 	bl	8000aa6 <vListInsert>
 8002c9e:	e012      	b.n	8002cc6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d206      	bcs.n	8002cb6 <prvInsertTimerInActiveList+0x62>
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e007      	b.n	8002cc6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <prvInsertTimerInActiveList+0x80>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f7fd fef0 	bl	8000aa6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8002cc6:	697b      	ldr	r3, [r7, #20]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20001dd8 	.word	0x20001dd8
 8002cd4:	20001dd4 	.word	0x20001dd4

08002cd8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	; 0x30
 8002cdc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002cde:	e07a      	b.n	8002dd6 <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db77      	blt.n	8002dd6 <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd ff0e 	bl	8000b18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ff88 	bl	8002c14 <prvSampleTimeNow>
 8002d04:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b09      	cmp	r3, #9
 8002d0a:	d863      	bhi.n	8002dd4 <prvProcessReceivedCommands+0xfc>
 8002d0c:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <prvProcessReceivedCommands+0x3c>)
 8002d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d12:	bf00      	nop
 8002d14:	08002d3d 	.word	0x08002d3d
 8002d18:	08002d3d 	.word	0x08002d3d
 8002d1c:	08002d3d 	.word	0x08002d3d
 8002d20:	08002dd7 	.word	0x08002dd7
 8002d24:	08002d97 	.word	0x08002d97
 8002d28:	08002dcd 	.word	0x08002dcd
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d3d 	.word	0x08002d3d
 8002d34:	08002dd7 	.word	0x08002dd7
 8002d38:	08002d97 	.word	0x08002d97
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	18d1      	adds	r1, r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6a3a      	ldr	r2, [r7, #32]
 8002d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d4a:	f7ff ff83 	bl	8002c54 <prvInsertTimerInActiveList>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d040      	beq.n	8002dd6 <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d5a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d138      	bne.n	8002dd6 <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	441a      	add	r2, r3
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2300      	movs	r3, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d76:	f7ff fe3d 	bl	80029f4 <xTimerGenericCommand>
 8002d7a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d129      	bne.n	8002dd6 <prvProcessReceivedCommands+0xfe>
 8002d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d86:	f383 8811 	msr	BASEPRI, r3
 8002d8a:	f3bf 8f6f 	isb	sy
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e7fe      	b.n	8002d94 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d109      	bne.n	8002db8 <prvProcessReceivedCommands+0xe0>
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	e7fe      	b.n	8002db6 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	18d1      	adds	r1, r2, r3
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	6a3a      	ldr	r2, [r7, #32]
 8002dc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dc6:	f7ff ff45 	bl	8002c54 <prvInsertTimerInActiveList>
					break;
 8002dca:	e004      	b.n	8002dd6 <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002dce:	f7fe f929 	bl	8001024 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002dd2:	e000      	b.n	8002dd6 <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002dd4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002dd6:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <prvProcessReceivedCommands+0x120>)
 8002dd8:	6818      	ldr	r0, [r3, #0]
 8002dda:	f107 0108 	add.w	r1, r7, #8
 8002dde:	2300      	movs	r3, #0
 8002de0:	2200      	movs	r2, #0
 8002de2:	f7fe fbc5 	bl	8001570 <xQueueGenericReceive>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f af79 	bne.w	8002ce0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002dee:	bf00      	nop
 8002df0:	3728      	adds	r7, #40	; 0x28
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20001ddc 	.word	0x20001ddc

08002dfc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e02:	e044      	b.n	8002e8e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <prvSwitchTimerLists+0xb8>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002e0e:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <prvSwitchTimerLists+0xb8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fe7b 	bl	8000b18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	6938      	ldr	r0, [r7, #16]
 8002e28:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d12d      	bne.n	8002e8e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	4413      	add	r3, r2
 8002e3a:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d90e      	bls.n	8002e62 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e50:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <prvSwitchTimerLists+0xb8>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f7fd fe23 	bl	8000aa6 <vListInsert>
 8002e60:	e015      	b.n	8002e8e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002e62:	2300      	movs	r3, #0
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2300      	movs	r3, #0
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	6938      	ldr	r0, [r7, #16]
 8002e6e:	f7ff fdc1 	bl	80029f4 <xTimerGenericCommand>
 8002e72:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <prvSwitchTimerLists+0x92>
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	e7fe      	b.n	8002e8c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <prvSwitchTimerLists+0xb8>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1b5      	bne.n	8002e04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <prvSwitchTimerLists+0xb8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <prvSwitchTimerLists+0xbc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a04      	ldr	r2, [pc, #16]	; (8002eb4 <prvSwitchTimerLists+0xb8>)
 8002ea4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002ea6:	4a04      	ldr	r2, [pc, #16]	; (8002eb8 <prvSwitchTimerLists+0xbc>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6013      	str	r3, [r2, #0]
}
 8002eac:	bf00      	nop
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20001dd4 	.word	0x20001dd4
 8002eb8:	20001dd8 	.word	0x20001dd8

08002ebc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002ec0:	f7fd ff56 	bl	8000d70 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <prvCheckForValidListAndQueue+0x54>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d11d      	bne.n	8002f08 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002ecc:	4811      	ldr	r0, [pc, #68]	; (8002f14 <prvCheckForValidListAndQueue+0x58>)
 8002ece:	f7fd fd99 	bl	8000a04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002ed2:	4811      	ldr	r0, [pc, #68]	; (8002f18 <prvCheckForValidListAndQueue+0x5c>)
 8002ed4:	f7fd fd96 	bl	8000a04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <prvCheckForValidListAndQueue+0x60>)
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <prvCheckForValidListAndQueue+0x58>)
 8002edc:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002ede:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <prvCheckForValidListAndQueue+0x64>)
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <prvCheckForValidListAndQueue+0x5c>)
 8002ee2:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	210c      	movs	r1, #12
 8002ee8:	2005      	movs	r0, #5
 8002eea:	f7fe f929 	bl	8001140 <xQueueGenericCreate>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <prvCheckForValidListAndQueue+0x54>)
 8002ef2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <prvCheckForValidListAndQueue+0x54>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002efc:	4b04      	ldr	r3, [pc, #16]	; (8002f10 <prvCheckForValidListAndQueue+0x54>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4908      	ldr	r1, [pc, #32]	; (8002f24 <prvCheckForValidListAndQueue+0x68>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fe fd56 	bl	80019b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002f08:	f7fd ff60 	bl	8000dcc <vPortExitCritical>
}
 8002f0c:	bf00      	nop
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20001ddc 	.word	0x20001ddc
 8002f14:	20001dac 	.word	0x20001dac
 8002f18:	20001dc0 	.word	0x20001dc0
 8002f1c:	20001dd4 	.word	0x20001dd4
 8002f20:	20001dd8 	.word	0x20001dd8
 8002f24:	080051d0 	.word	0x080051d0

08002f28 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <xTimerIsTimerActive+0x26>
 8002f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	e7fe      	b.n	8002f4c <xTimerIsTimerActive+0x24>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8002f4e:	f7fd ff0f 	bl	8000d70 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) );
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8002f62:	f7fd ff33 	bl	8000dcc <vPortExitCritical>

	return xTimerIsInActiveList;
 8002f66:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f92:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	791b      	ldrb	r3, [r3, #4]
 8002f98:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4b18      	ldr	r3, [pc, #96]	; (8003018 <ADC_Init+0xa8>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002fc2:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002fc8:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	795b      	ldrb	r3, [r3, #5]
 8002fce:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002fea:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	7d1b      	ldrb	r3, [r3, #20]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8002ffa:	7afb      	ldrb	r3, [r7, #11]
 8002ffc:	051b      	lsls	r3, r3, #20
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800300a:	bf00      	nop
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	c0fff7fd 	.word	0xc0fff7fd

0800301c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d006      	beq.n	800303c <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f043 0201 	orr.w	r2, r3, #1
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 800303a:	e005      	b.n	8003048 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 0201 	bic.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	70fb      	strb	r3, [r7, #3]
 8003066:	460b      	mov	r3, r1
 8003068:	70bb      	strb	r3, [r7, #2]
 800306a:	4613      	mov	r3, r2
 800306c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	2b09      	cmp	r3, #9
 800307a:	d923      	bls.n	80030c4 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8003082:	78fb      	ldrb	r3, [r7, #3]
 8003084:	f1a3 020a 	sub.w	r2, r3, #10
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	2207      	movs	r2, #7
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	43db      	mvns	r3, r3
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4013      	ands	r3, r2
 800309e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80030a0:	7879      	ldrb	r1, [r7, #1]
 80030a2:	78fb      	ldrb	r3, [r7, #3]
 80030a4:	f1a3 020a 	sub.w	r2, r3, #10
 80030a8:	4613      	mov	r3, r2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4413      	add	r3, r2
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	e01e      	b.n	8003102 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	2207      	movs	r2, #7
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	43db      	mvns	r3, r3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80030e4:	7879      	ldrb	r1, [r7, #1]
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8003102:	78bb      	ldrb	r3, [r7, #2]
 8003104:	2b06      	cmp	r3, #6
 8003106:	d821      	bhi.n	800314c <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800310e:	78bb      	ldrb	r3, [r7, #2]
 8003110:	1e5a      	subs	r2, r3, #1
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	221f      	movs	r2, #31
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	43db      	mvns	r3, r3
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4013      	ands	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800312a:	78f9      	ldrb	r1, [r7, #3]
 800312c:	78bb      	ldrb	r3, [r7, #2]
 800312e:	1e5a      	subs	r2, r3, #1
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800314a:	e047      	b.n	80031dc <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800314c:	78bb      	ldrb	r3, [r7, #2]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d821      	bhi.n	8003196 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8003158:	78bb      	ldrb	r3, [r7, #2]
 800315a:	1fda      	subs	r2, r3, #7
 800315c:	4613      	mov	r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4413      	add	r3, r2
 8003162:	221f      	movs	r2, #31
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	43db      	mvns	r3, r3
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4013      	ands	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8003174:	78f9      	ldrb	r1, [r7, #3]
 8003176:	78bb      	ldrb	r3, [r7, #2]
 8003178:	1fda      	subs	r2, r3, #7
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	fa01 f303 	lsl.w	r3, r1, r3
 8003184:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003194:	e022      	b.n	80031dc <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800319c:	78bb      	ldrb	r3, [r7, #2]
 800319e:	f1a3 020d 	sub.w	r2, r3, #13
 80031a2:	4613      	mov	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	221f      	movs	r2, #31
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	43db      	mvns	r3, r3
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80031ba:	78f9      	ldrb	r1, [r7, #3]
 80031bc:	78bb      	ldrb	r3, [r7, #2]
 80031be:	f1a3 020d 	sub.w	r2, r3, #13
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003214:	b29b      	uxth	r3, r3
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	460b      	mov	r3, r1
 800322c:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800323e:	2301      	movs	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e001      	b.n	8003248 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <DAC_SetChannel1Data+0x34>)
 800326a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3308      	adds	r3, #8
 8003274:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	461a      	mov	r2, r3
 800327a:	887b      	ldrh	r3, [r7, #2]
 800327c:	6013      	str	r3, [r2, #0]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40007400 	.word	0x40007400

08003290 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4b25      	ldr	r3, [pc, #148]	; (800333c <DMA_Init+0xac>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80032ba:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80032c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80032d2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80032de:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0307 	bic.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	4313      	orrs	r3, r2
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	4313      	orrs	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	691a      	ldr	r2, [r3, #16]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	60da      	str	r2, [r3, #12]
}
 800332e:	bf00      	nop
 8003330:	3714      	adds	r7, #20
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	f01c803f 	.word	0xf01c803f

08003340 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d006      	beq.n	8003360 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f043 0201 	orr.w	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800335e:	e005      	b.n	800336c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 0201 	bic.w	r2, r3, #1
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	601a      	str	r2, [r3, #0]
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
 8003394:	e001      	b.n	800339a <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3714      	adds	r7, #20
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a15      	ldr	r2, [pc, #84]	; (8003414 <DMA_GetFlagStatus+0x6c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d802      	bhi.n	80033c8 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80033c2:	4b15      	ldr	r3, [pc, #84]	; (8003418 <DMA_GetFlagStatus+0x70>)
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	e001      	b.n	80033cc <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <DMA_GetFlagStatus+0x74>)
 80033ca:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	e002      	b.n	80033e4 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80033ea:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4013      	ands	r3, r2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80033fa:	2301      	movs	r3, #1
 80033fc:	75fb      	strb	r3, [r7, #23]
 80033fe:	e001      	b.n	8003404 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8003404:	7dfb      	ldrb	r3, [r7, #23]
}
 8003406:	4618      	mov	r0, r3
 8003408:	371c      	adds	r7, #28
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	4002640f 	.word	0x4002640f
 8003418:	40026000 	.word	0x40026000
 800341c:	40026400 	.word	0x40026400

08003420 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a10      	ldr	r2, [pc, #64]	; (8003470 <DMA_ClearFlag+0x50>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d802      	bhi.n	8003438 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8003432:	4b10      	ldr	r3, [pc, #64]	; (8003474 <DMA_ClearFlag+0x54>)
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e001      	b.n	800343c <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003438:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <DMA_ClearFlag+0x58>)
 800343a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800344c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003450:	68fa      	ldr	r2, [r7, #12]
 8003452:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8003454:	e006      	b.n	8003464 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800345c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003460:	68fa      	ldr	r2, [r7, #12]
 8003462:	6093      	str	r3, [r2, #8]
}
 8003464:	bf00      	nop
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	4002640f 	.word	0x4002640f
 8003474:	40026000 	.word	0x40026000
 8003478:	40026400 	.word	0x40026400

0800347c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003486:	2300      	movs	r3, #0
 8003488:	617b      	str	r3, [r7, #20]
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	e076      	b.n	8003586 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003498:	2201      	movs	r2, #1
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4013      	ands	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d165      	bne.n	8003580 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	2103      	movs	r1, #3
 80034be:	fa01 f303 	lsl.w	r3, r1, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	401a      	ands	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	791b      	ldrb	r3, [r3, #4]
 80034d2:	4619      	mov	r1, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	791b      	ldrb	r3, [r3, #4]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d003      	beq.n	80034f2 <GPIO_Init+0x76>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	791b      	ldrb	r3, [r3, #4]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d12e      	bne.n	8003550 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	2103      	movs	r1, #3
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	401a      	ands	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	795b      	ldrb	r3, [r3, #5]
 8003510:	4619      	mov	r1, r3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa01 f303 	lsl.w	r3, r1, r3
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4619      	mov	r1, r3
 800352a:	2301      	movs	r3, #1
 800352c:	408b      	lsls	r3, r1
 800352e:	43db      	mvns	r3, r3
 8003530:	401a      	ands	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	7992      	ldrb	r2, [r2, #6]
 800353e:	4611      	mov	r1, r2
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	b292      	uxth	r2, r2
 8003544:	fa01 f202 	lsl.w	r2, r1, r2
 8003548:	b292      	uxth	r2, r2
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	b29b      	uxth	r3, r3
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	2103      	movs	r1, #3
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	401a      	ands	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	79db      	ldrb	r3, [r3, #7]
 8003570:	4619      	mov	r1, r3
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3301      	adds	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b0f      	cmp	r3, #15
 800358a:	d985      	bls.n	8003498 <GPIO_Init+0x1c>
    }
  }
}
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	887a      	ldrh	r2, [r7, #2]
 80035a8:	831a      	strh	r2, [r3, #24]
}
 80035aa:	bf00      	nop
 80035ac:	370c      	adds	r7, #12
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr

080035b6 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	887a      	ldrh	r2, [r7, #2]
 80035c6:	835a      	strh	r2, [r3, #26]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80035e6:	490a      	ldr	r1, [pc, #40]	; (8003610 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80035f2:	e006      	b.n	8003602 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80035f4:	4906      	ldr	r1, [pc, #24]	; (8003610 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <RCC_AHB1PeriphClockCmd+0x3c>)
 80035f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	43db      	mvns	r3, r3
 80035fe:	4013      	ands	r3, r2
 8003600:	630b      	str	r3, [r1, #48]	; 0x30
}
 8003602:	bf00      	nop
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800

08003614 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8003626:	490a      	ldr	r1, [pc, #40]	; (8003650 <RCC_APB2PeriphClockCmd+0x3c>)
 8003628:	4b09      	ldr	r3, [pc, #36]	; (8003650 <RCC_APB2PeriphClockCmd+0x3c>)
 800362a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4313      	orrs	r3, r2
 8003630:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003632:	e006      	b.n	8003642 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003634:	4906      	ldr	r1, [pc, #24]	; (8003650 <RCC_APB2PeriphClockCmd+0x3c>)
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <RCC_APB2PeriphClockCmd+0x3c>)
 8003638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	43db      	mvns	r3, r3
 800363e:	4013      	ands	r3, r2
 8003640:	644b      	str	r3, [r1, #68]	; 0x44
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800

08003654 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	460b      	mov	r3, r1
 800365e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	819a      	strh	r2, [r3, #12]
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	891b      	ldrh	r3, [r3, #8]
 8003686:	b29a      	uxth	r2, r3
 8003688:	887b      	ldrh	r3, [r7, #2]
 800368a:	4013      	ands	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
 8003696:	e001      	b.n	800369c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8003698:	2300      	movs	r3, #0
 800369a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800369c:	7bfb      	ldrb	r3, [r7, #15]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80036b0:	4b38      	ldr	r3, [pc, #224]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b38      	ldr	r3, [pc, #224]	; (8003798 <Audio_MAL_IRQHandler+0xec>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	4610      	mov	r0, r2
 80036bc:	f7ff fe74 	bl	80033a8 <DMA_GetFlagStatus>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d064      	beq.n	8003790 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80036c6:	4b35      	ldr	r3, [pc, #212]	; (800379c <Audio_MAL_IRQHandler+0xf0>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d04c      	beq.n	8003768 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80036ce:	bf00      	nop
 80036d0:	4b30      	ldr	r3, [pc, #192]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fe4f 	bl	8003378 <DMA_GetCmdStatus>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f7      	bne.n	80036d0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	4b2c      	ldr	r3, [pc, #176]	; (8003798 <Audio_MAL_IRQHandler+0xec>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7ff fe98 	bl	8003420 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80036f0:	4b2b      	ldr	r3, [pc, #172]	; (80037a0 <Audio_MAL_IRQHandler+0xf4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <Audio_MAL_IRQHandler+0xf8>)
 80036f8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <Audio_MAL_IRQHandler+0xf0>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003702:	4293      	cmp	r3, r2
 8003704:	bf28      	it	cs
 8003706:	4613      	movcs	r3, r2
 8003708:	4a26      	ldr	r2, [pc, #152]	; (80037a4 <Audio_MAL_IRQHandler+0xf8>)
 800370a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800370c:	4b21      	ldr	r3, [pc, #132]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4924      	ldr	r1, [pc, #144]	; (80037a4 <Audio_MAL_IRQHandler+0xf8>)
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fdbc 	bl	8003290 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8003718:	4b1e      	ldr	r3, [pc, #120]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2101      	movs	r1, #1
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fe0e 	bl	8003340 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <Audio_MAL_IRQHandler+0xf4>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <Audio_MAL_IRQHandler+0xf0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003730:	d203      	bcs.n	800373a <Audio_MAL_IRQHandler+0x8e>
 8003732:	4b1a      	ldr	r3, [pc, #104]	; (800379c <Audio_MAL_IRQHandler+0xf0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	e000      	b.n	800373c <Audio_MAL_IRQHandler+0x90>
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <Audio_MAL_IRQHandler+0xfc>)
 800373c:	4413      	add	r3, r2
 800373e:	4a18      	ldr	r2, [pc, #96]	; (80037a0 <Audio_MAL_IRQHandler+0xf4>)
 8003740:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8003742:	4b16      	ldr	r3, [pc, #88]	; (800379c <Audio_MAL_IRQHandler+0xf0>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <Audio_MAL_IRQHandler+0xf0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800374e:	428b      	cmp	r3, r1
 8003750:	bf28      	it	cs
 8003752:	460b      	movcs	r3, r1
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <Audio_MAL_IRQHandler+0xf0>)
 8003758:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800375a:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2101      	movs	r1, #1
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fded 	bl	8003340 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8003766:	e013      	b.n	8003790 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8003768:	4b0a      	ldr	r3, [pc, #40]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff fde6 	bl	8003340 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <Audio_MAL_IRQHandler+0xe8>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	4b07      	ldr	r3, [pc, #28]	; (8003798 <Audio_MAL_IRQHandler+0xec>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f7ff fe4e 	bl	8003420 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <Audio_MAL_IRQHandler+0xf4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f83c 	bl	8003808 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8003790:	bf00      	nop
 8003792:	bd80      	pop	{r7, pc}
 8003794:	2000000c 	.word	0x2000000c
 8003798:	20000010 	.word	0x20000010
 800379c:	20000004 	.word	0x20000004
 80037a0:	20001e34 	.word	0x20001e34
 80037a4:	20001e74 	.word	0x20001e74
 80037a8:	0001fffe 	.word	0x0001fffe

080037ac <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80037b0:	f7ff ff7c 	bl	80036ac <Audio_MAL_IRQHandler>
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80037bc:	f7ff ff76 	bl	80036ac <Audio_MAL_IRQHandler>
}
 80037c0:	bf00      	nop
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80037c8:	2102      	movs	r1, #2
 80037ca:	480d      	ldr	r0, [pc, #52]	; (8003800 <SPI3_IRQHandler+0x3c>)
 80037cc:	f7ff ff51 	bl	8003672 <SPI_I2S_GetFlagStatus>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d011      	beq.n	80037fa <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <SPI3_IRQHandler+0x40>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d106      	bne.n	80037ec <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 80037de:	f000 f81e 	bl	800381e <EVAL_AUDIO_GetSampleCallBack>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4619      	mov	r1, r3
 80037e6:	2004      	movs	r0, #4
 80037e8:	f7ff fd36 	bl	8003258 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80037ec:	f000 f817 	bl	800381e <EVAL_AUDIO_GetSampleCallBack>
 80037f0:	4603      	mov	r3, r0
 80037f2:	4619      	mov	r1, r3
 80037f4:	4802      	ldr	r0, [pc, #8]	; (8003800 <SPI3_IRQHandler+0x3c>)
 80037f6:	f7ff ff2d 	bl	8003654 <SPI_I2S_SendData>
  }
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40003c00 	.word	0x40003c00
 8003804:	20000008 	.word	0x20000008

08003808 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8003812:	bf00      	nop
}
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <TrafficFlowAdjustmentTask>:

#include <TrafficControl.h>

/* Reads in ADC value, converts to discrete 0-7 integer, adjusts traffic flow accordingly */
void TrafficFlowAdjustmentTask(void *pvParameters)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
	uint16_t adc_value = 0, speed_adc_value = 0, current_speed_value = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	81bb      	strh	r3, [r7, #12]
 800383c:	2300      	movs	r3, #0
 800383e:	813b      	strh	r3, [r7, #8]
 8003840:	2300      	movs	r3, #0
 8003842:	81fb      	strh	r3, [r7, #14]
	uint16_t speed_change;

	while (1)
	{
		printf("Start Traffic Flow Adjustment Task\n");
 8003844:	4824      	ldr	r0, [pc, #144]	; (80038d8 <TrafficFlowAdjustmentTask+0xa8>)
 8003846:	f001 f867 	bl	8004918 <puts>

		// Begin ADC
		ADC_SoftwareStartConv(ADC1);
 800384a:	4824      	ldr	r0, [pc, #144]	; (80038dc <TrafficFlowAdjustmentTask+0xac>)
 800384c:	f7ff fccc 	bl	80031e8 <ADC_SoftwareStartConv>

		// Wait for conversion
		while (!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 8003850:	bf00      	nop
 8003852:	2102      	movs	r1, #2
 8003854:	4821      	ldr	r0, [pc, #132]	; (80038dc <TrafficFlowAdjustmentTask+0xac>)
 8003856:	f7ff fce4 	bl	8003222 <ADC_GetFlagStatus>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f8      	beq.n	8003852 <TrafficFlowAdjustmentTask+0x22>
			;
		adc_value = ADC_GetConversionValue(ADC1);
 8003860:	481e      	ldr	r0, [pc, #120]	; (80038dc <TrafficFlowAdjustmentTask+0xac>)
 8003862:	f7ff fcd1 	bl	8003208 <ADC_GetConversionValue>
 8003866:	4603      	mov	r3, r0
 8003868:	81bb      	strh	r3, [r7, #12]

		// Convert ADC to 0-7
		speed_adc_value = adc_value / 512;
 800386a:	89bb      	ldrh	r3, [r7, #12]
 800386c:	0a5b      	lsrs	r3, r3, #9
 800386e:	b29b      	uxth	r3, r3
 8003870:	813b      	strh	r3, [r7, #8]
		if (speed_adc_value == 8)
 8003872:	893b      	ldrh	r3, [r7, #8]
 8003874:	2b08      	cmp	r3, #8
 8003876:	d101      	bne.n	800387c <TrafficFlowAdjustmentTask+0x4c>
			speed_adc_value = 7;
 8003878:	2307      	movs	r3, #7
 800387a:	813b      	strh	r3, [r7, #8]

		// Calculate speed difference
		speed_change = abs(speed_adc_value - current_speed_value);
 800387c:	893b      	ldrh	r3, [r7, #8]
 800387e:	461a      	mov	r2, r3
 8003880:	89fb      	ldrh	r3, [r7, #14]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	bfb8      	it	lt
 8003888:	425b      	neglt	r3, r3
 800388a:	817b      	strh	r3, [r7, #10]

		// Update values if ADC value changes
		if (speed_change)
 800388c:	897b      	ldrh	r3, [r7, #10]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d01e      	beq.n	80038d0 <TrafficFlowAdjustmentTask+0xa0>
		{
			current_speed_value = speed_adc_value;
 8003892:	893b      	ldrh	r3, [r7, #8]
 8003894:	81fb      	strh	r3, [r7, #14]

			// Grab Flow Semaphore
			if (xSemaphoreTake(xMutexFlow, (TickType_t)10) == pdTRUE)
 8003896:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <TrafficFlowAdjustmentTask+0xb0>)
 8003898:	6818      	ldr	r0, [r3, #0]
 800389a:	2300      	movs	r3, #0
 800389c:	220a      	movs	r2, #10
 800389e:	2100      	movs	r1, #0
 80038a0:	f7fd fe66 	bl	8001570 <xQueueGenericReceive>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d10f      	bne.n	80038ca <TrafficFlowAdjustmentTask+0x9a>
			{
				xQueueOverwrite(xQueueFlowRate, &speed_adc_value);
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <TrafficFlowAdjustmentTask+0xb4>)
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f107 0108 	add.w	r1, r7, #8
 80038b2:	2302      	movs	r3, #2
 80038b4:	2200      	movs	r2, #0
 80038b6:	f7fd fccd 	bl	8001254 <xQueueGenericSend>
				xSemaphoreGive(xMutexFlow);
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <TrafficFlowAdjustmentTask+0xb0>)
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	2300      	movs	r3, #0
 80038c0:	2200      	movs	r2, #0
 80038c2:	2100      	movs	r1, #0
 80038c4:	f7fd fcc6 	bl	8001254 <xQueueGenericSend>
 80038c8:	e002      	b.n	80038d0 <TrafficFlowAdjustmentTask+0xa0>
			}
			else
				printf("xMutexFlow already held\n");
 80038ca:	4807      	ldr	r0, [pc, #28]	; (80038e8 <TrafficFlowAdjustmentTask+0xb8>)
 80038cc:	f001 f824 	bl	8004918 <puts>
		}

		vTaskDelay(200);
 80038d0:	20c8      	movs	r0, #200	; 0xc8
 80038d2:	f7fe f9fd 	bl	8001cd0 <vTaskDelay>
		printf("Start Traffic Flow Adjustment Task\n");
 80038d6:	e7b5      	b.n	8003844 <TrafficFlowAdjustmentTask+0x14>
 80038d8:	080051d8 	.word	0x080051d8
 80038dc:	40012000 	.word	0x40012000
 80038e0:	20001ec4 	.word	0x20001ec4
 80038e4:	20001ec0 	.word	0x20001ec0
 80038e8:	080051fc 	.word	0x080051fc

080038ec <TrafficCreatorTask>:
	}
}

/* Using the flowrate from the flow task, spawn a new car in random intervals depending on current flow rate */
void TrafficCreatorTask(void *pvParameters)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
	uint16_t car_value = 0, flowrate = 4;
 80038f4:	2300      	movs	r3, #0
 80038f6:	817b      	strh	r3, [r7, #10]
 80038f8:	2304      	movs	r3, #4
 80038fa:	813b      	strh	r3, [r7, #8]

	while (1)
	{
		printf("Start Traffic Creator Task\n");
 80038fc:	483e      	ldr	r0, [pc, #248]	; (80039f8 <TrafficCreatorTask+0x10c>)
 80038fe:	f001 f80b 	bl	8004918 <puts>

		// Get Flow Semaphore
		if (xSemaphoreTake(xMutexFlow, (TickType_t)10) == pdTRUE)
 8003902:	4b3e      	ldr	r3, [pc, #248]	; (80039fc <TrafficCreatorTask+0x110>)
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	2300      	movs	r3, #0
 8003908:	220a      	movs	r2, #10
 800390a:	2100      	movs	r1, #0
 800390c:	f7fd fe30 	bl	8001570 <xQueueGenericReceive>
 8003910:	4603      	mov	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10f      	bne.n	8003936 <TrafficCreatorTask+0x4a>
		{
			xQueueReceive(xQueueFlowRate, &flowrate, 0);
 8003916:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <TrafficCreatorTask+0x114>)
 8003918:	6818      	ldr	r0, [r3, #0]
 800391a:	f107 0108 	add.w	r1, r7, #8
 800391e:	2300      	movs	r3, #0
 8003920:	2200      	movs	r2, #0
 8003922:	f7fd fe25 	bl	8001570 <xQueueGenericReceive>
			xSemaphoreGive(xMutexFlow);
 8003926:	4b35      	ldr	r3, [pc, #212]	; (80039fc <TrafficCreatorTask+0x110>)
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	2200      	movs	r2, #0
 800392e:	2100      	movs	r1, #0
 8003930:	f7fd fc90 	bl	8001254 <xQueueGenericSend>
 8003934:	e002      	b.n	800393c <TrafficCreatorTask+0x50>
		}
		else
			printf("xMutexFlow already held\n");
 8003936:	4833      	ldr	r0, [pc, #204]	; (8003a04 <TrafficCreatorTask+0x118>)
 8003938:	f000 ffee 	bl	8004918 <puts>

		// 
		float randomNum = 100.0 / (8.0 - flowrate);
 800393c:	893b      	ldrh	r3, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f7fc fd98 	bl	8000474 <__aeabi_i2d>
 8003944:	4603      	mov	r3, r0
 8003946:	460c      	mov	r4, r1
 8003948:	461a      	mov	r2, r3
 800394a:	4623      	mov	r3, r4
 800394c:	f04f 0000 	mov.w	r0, #0
 8003950:	492d      	ldr	r1, [pc, #180]	; (8003a08 <TrafficCreatorTask+0x11c>)
 8003952:	f7fc fc41 	bl	80001d8 <__aeabi_dsub>
 8003956:	4603      	mov	r3, r0
 8003958:	460c      	mov	r4, r1
 800395a:	461a      	mov	r2, r3
 800395c:	4623      	mov	r3, r4
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	492a      	ldr	r1, [pc, #168]	; (8003a0c <TrafficCreatorTask+0x120>)
 8003964:	f7fc ff16 	bl	8000794 <__aeabi_ddiv>
 8003968:	4603      	mov	r3, r0
 800396a:	460c      	mov	r4, r1
 800396c:	4618      	mov	r0, r3
 800396e:	4621      	mov	r1, r4
 8003970:	f7fc fff8 	bl	8000964 <__aeabi_d2f>
 8003974:	4603      	mov	r3, r0
 8003976:	60fb      	str	r3, [r7, #12]
		car_value = (rand() % 100) < randomNum;
 8003978:	f000 ffd6 	bl	8004928 <rand>
 800397c:	4603      	mov	r3, r0
 800397e:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <TrafficCreatorTask+0x124>)
 8003980:	fb82 1203 	smull	r1, r2, r2, r3
 8003984:	1151      	asrs	r1, r2, #5
 8003986:	17da      	asrs	r2, r3, #31
 8003988:	1a8a      	subs	r2, r1, r2
 800398a:	2164      	movs	r1, #100	; 0x64
 800398c:	fb01 f202 	mul.w	r2, r1, r2
 8003990:	1a9a      	subs	r2, r3, r2
 8003992:	ee07 2a90 	vmov	s15, r2
 8003996:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800399a:	edd7 7a03 	vldr	s15, [r7, #12]
 800399e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a6:	bf4c      	ite	mi
 80039a8:	2301      	movmi	r3, #1
 80039aa:	2300      	movpl	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	817b      	strh	r3, [r7, #10]

		// Get Cars Semaphore
		if (xSemaphoreTake(xMutexCars, (TickType_t)10) == pdTRUE)
 80039b2:	4b18      	ldr	r3, [pc, #96]	; (8003a14 <TrafficCreatorTask+0x128>)
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	2300      	movs	r3, #0
 80039b8:	220a      	movs	r2, #10
 80039ba:	2100      	movs	r1, #0
 80039bc:	f7fd fdd8 	bl	8001570 <xQueueGenericReceive>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d10f      	bne.n	80039e6 <TrafficCreatorTask+0xfa>
		{
			xQueueOverwrite(xQueueCarValue, &car_value);
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <TrafficCreatorTask+0x12c>)
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	f107 010a 	add.w	r1, r7, #10
 80039ce:	2302      	movs	r3, #2
 80039d0:	2200      	movs	r2, #0
 80039d2:	f7fd fc3f 	bl	8001254 <xQueueGenericSend>
			xSemaphoreGive(xMutexCars);
 80039d6:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <TrafficCreatorTask+0x128>)
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	2300      	movs	r3, #0
 80039dc:	2200      	movs	r2, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	f7fd fc38 	bl	8001254 <xQueueGenericSend>
 80039e4:	e002      	b.n	80039ec <TrafficCreatorTask+0x100>
		}
		else
			printf("xMutexCars already held\n");
 80039e6:	480d      	ldr	r0, [pc, #52]	; (8003a1c <TrafficCreatorTask+0x130>)
 80039e8:	f000 ff96 	bl	8004918 <puts>

		vTaskDelay(800);
 80039ec:	f44f 7048 	mov.w	r0, #800	; 0x320
 80039f0:	f7fe f96e 	bl	8001cd0 <vTaskDelay>
	{
 80039f4:	e782      	b.n	80038fc <TrafficCreatorTask+0x10>
 80039f6:	bf00      	nop
 80039f8:	08005214 	.word	0x08005214
 80039fc:	20001ec4 	.word	0x20001ec4
 8003a00:	20001ec0 	.word	0x20001ec0
 8003a04:	080051fc 	.word	0x080051fc
 8003a08:	40200000 	.word	0x40200000
 8003a0c:	40590000 	.word	0x40590000
 8003a10:	51eb851f 	.word	0x51eb851f
 8003a14:	20001eb0 	.word	0x20001eb0
 8003a18:	20001eb8 	.word	0x20001eb8
 8003a1c:	08005230 	.word	0x08005230

08003a20 <TrafficDisplayTask>:
	}
}

/* Display necessary lights on road and traffic light */
void TrafficDisplayTask(void *pvParameters)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b092      	sub	sp, #72	; 0x48
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
	uint16_t car_value = 0, light_colour = 1;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t pre_light_traffic[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8003a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
	uint16_t mid_light_traffic[3] = {0, 0, 0};
 8003a3e:	2300      	movs	r3, #0
 8003a40:	83bb      	strh	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	83fb      	strh	r3, [r7, #30]
 8003a46:	2300      	movs	r3, #0
 8003a48:	843b      	strh	r3, [r7, #32]
	uint16_t new_pre_light_traffic[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8003a4a:	f107 030c 	add.w	r3, r7, #12
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
 8003a52:	605a      	str	r2, [r3, #4]
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	60da      	str	r2, [r3, #12]

	while (1)
	{
		// Get Cars Semaphore
		if (xSemaphoreTake(xMutexCars, (TickType_t)10) == pdTRUE)
 8003a58:	4b95      	ldr	r3, [pc, #596]	; (8003cb0 <TrafficDisplayTask+0x290>)
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	220a      	movs	r2, #10
 8003a60:	2100      	movs	r1, #0
 8003a62:	f7fd fd85 	bl	8001570 <xQueueGenericReceive>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d10f      	bne.n	8003a8c <TrafficDisplayTask+0x6c>
		{
			xQueueReceive(xQueueCarValue, &car_value, 0);
 8003a6c:	4b91      	ldr	r3, [pc, #580]	; (8003cb4 <TrafficDisplayTask+0x294>)
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003a74:	2300      	movs	r3, #0
 8003a76:	2200      	movs	r2, #0
 8003a78:	f7fd fd7a 	bl	8001570 <xQueueGenericReceive>
			xSemaphoreGive(xMutexCars);
 8003a7c:	4b8c      	ldr	r3, [pc, #560]	; (8003cb0 <TrafficDisplayTask+0x290>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	2200      	movs	r2, #0
 8003a84:	2100      	movs	r1, #0
 8003a86:	f7fd fbe5 	bl	8001254 <xQueueGenericSend>
 8003a8a:	e002      	b.n	8003a92 <TrafficDisplayTask+0x72>
		}
		else
			printf("xMutexCars already held\n");
 8003a8c:	488a      	ldr	r0, [pc, #552]	; (8003cb8 <TrafficDisplayTask+0x298>)
 8003a8e:	f000 ff43 	bl	8004918 <puts>

		// Get Light Semaphore
		if (xSemaphoreTake(xMutexLight, (TickType_t)0) == pdTRUE)
 8003a92:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <TrafficDisplayTask+0x29c>)
 8003a94:	6818      	ldr	r0, [r3, #0]
 8003a96:	2300      	movs	r3, #0
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	f7fd fd68 	bl	8001570 <xQueueGenericReceive>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d10f      	bne.n	8003ac6 <TrafficDisplayTask+0xa6>
		{
			xQueuePeek(xQueueLightColour, &light_colour, 0);
 8003aa6:	4b86      	ldr	r3, [pc, #536]	; (8003cc0 <TrafficDisplayTask+0x2a0>)
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	f107 0136 	add.w	r1, r7, #54	; 0x36
 8003aae:	2301      	movs	r3, #1
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f7fd fd5d 	bl	8001570 <xQueueGenericReceive>
			xSemaphoreGive(xMutexLight);
 8003ab6:	4b81      	ldr	r3, [pc, #516]	; (8003cbc <TrafficDisplayTask+0x29c>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	2300      	movs	r3, #0
 8003abc:	2200      	movs	r2, #0
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f7fd fbc8 	bl	8001254 <xQueueGenericSend>
 8003ac4:	e002      	b.n	8003acc <TrafficDisplayTask+0xac>
		}
		else
			printf("xMutexLight already held\n");
 8003ac6:	487f      	ldr	r0, [pc, #508]	; (8003cc4 <TrafficDisplayTask+0x2a4>)
 8003ac8:	f000 ff26 	bl	8004918 <puts>

		// If light's green, spawn new car and move others
		if (light_colour)
 8003acc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d04e      	beq.n	8003b70 <TrafficDisplayTask+0x150>
		{
			// Spawn new car and move other cars
			ShiftRegisterValuePreLight(car_value);
 8003ad2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 f8f7 	bl	8003cc8 <ShiftRegisterValuePreLight>
			ShiftRegisterValueMidLight(pre_light_traffic[7]);
 8003ada:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 f913 	bl	8003d08 <ShiftRegisterValueMidLight>
			ShiftRegisterValuePostLight(mid_light_traffic[2]);
 8003ae2:	8c3b      	ldrh	r3, [r7, #32]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f000 f92f 	bl	8003d48 <ShiftRegisterValuePostLight>

			// Add new car to array
			new_pre_light_traffic[0] = car_value;
 8003aea:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003aec:	81bb      	strh	r3, [r7, #12]

			// Shift and merge pre-light traffic into new array
			for (uint16_t i = 1; i < 8; i++)
 8003aee:	2301      	movs	r3, #1
 8003af0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003af4:	e016      	b.n	8003b24 <TrafficDisplayTask+0x104>
				new_pre_light_traffic[i] = pre_light_traffic[i - 1];
 8003af6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003afa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003afe:	3b01      	subs	r3, #1
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003b06:	440b      	add	r3, r1
 8003b08:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003b0c:	0053      	lsls	r3, r2, #1
 8003b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b12:	4413      	add	r3, r2
 8003b14:	460a      	mov	r2, r1
 8003b16:	f823 2c3c 	strh.w	r2, [r3, #-60]
			for (uint16_t i = 1; i < 8; i++)
 8003b1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003b24:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003b28:	2b07      	cmp	r3, #7
 8003b2a:	d9e4      	bls.n	8003af6 <TrafficDisplayTask+0xd6>

			// Shift and merge mid-light traffic into new array
			for (uint16_t i = 2; i != 0; i--)
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b32:	e016      	b.n	8003b62 <TrafficDisplayTask+0x142>
				mid_light_traffic[i] = mid_light_traffic[i - 1];
 8003b34:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8003b38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003b44:	440b      	add	r3, r1
 8003b46:	f833 1c2c 	ldrh.w	r1, [r3, #-44]
 8003b4a:	0053      	lsls	r3, r2, #1
 8003b4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b50:	4413      	add	r3, r2
 8003b52:	460a      	mov	r2, r1
 8003b54:	f823 2c2c 	strh.w	r2, [r3, #-44]
			for (uint16_t i = 2; i != 0; i--)
 8003b58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003b62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1e4      	bne.n	8003b34 <TrafficDisplayTask+0x114>

			// Add car entering intersection
			mid_light_traffic[0] = pre_light_traffic[7];
 8003b6a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b6c:	83bb      	strh	r3, [r7, #28]
 8003b6e:	e081      	b.n	8003c74 <TrafficDisplayTask+0x254>
		}

		// Light is red or yellow
		else
		{
			uint16_t encounteredzero = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

			// Find empty spots on road
			for (uint16_t i = 7; i != 0; i--)
 8003b76:	2307      	movs	r3, #7
 8003b78:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b7c:	e03b      	b.n	8003bf6 <TrafficDisplayTask+0x1d6>
			{
				if (pre_light_traffic[i] == 0)
 8003b7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003b88:	4413      	add	r3, r2
 8003b8a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <TrafficDisplayTask+0x17c>
				{
					encounteredzero = 1;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
					new_pre_light_traffic[0] = car_value;
 8003b98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b9a:	81bb      	strh	r3, [r7, #12]
				}

				// Shift cars if open spot
				if (encounteredzero == 1)
 8003b9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d112      	bne.n	8003bca <TrafficDisplayTask+0x1aa>
					new_pre_light_traffic[i] = pre_light_traffic[i - 1];
 8003ba4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bac:	3b01      	subs	r3, #1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003bb4:	440b      	add	r3, r1
 8003bb6:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003bba:	0053      	lsls	r3, r2, #1
 8003bbc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003bc0:	4413      	add	r3, r2
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	f823 2c3c 	strh.w	r2, [r3, #-60]
 8003bc8:	e010      	b.n	8003bec <TrafficDisplayTask+0x1cc>
				else
					new_pre_light_traffic[i] = pre_light_traffic[i];
 8003bca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003bce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003bd8:	440b      	add	r3, r1
 8003bda:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003bde:	0053      	lsls	r3, r2, #1
 8003be0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003be4:	4413      	add	r3, r2
 8003be6:	460a      	mov	r2, r1
 8003be8:	f823 2c3c 	strh.w	r2, [r3, #-60]
			for (uint16_t i = 7; i != 0; i--)
 8003bec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003bf6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1bf      	bne.n	8003b7e <TrafficDisplayTask+0x15e>
			}

			// Shift cars mid light, and shift mid array
			ShiftRegisterValueMidLight(0);
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f000 f882 	bl	8003d08 <ShiftRegisterValueMidLight>

			for (uint16_t i = 1; i != 3; i++)
 8003c04:	2301      	movs	r3, #1
 8003c06:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003c08:	e012      	b.n	8003c30 <TrafficDisplayTask+0x210>
				mid_light_traffic[i] = mid_light_traffic[i - 1];
 8003c0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003c0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003c16:	440b      	add	r3, r1
 8003c18:	f833 1c2c 	ldrh.w	r1, [r3, #-44]
 8003c1c:	0053      	lsls	r3, r2, #1
 8003c1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c22:	4413      	add	r3, r2
 8003c24:	460a      	mov	r2, r1
 8003c26:	f823 2c2c 	strh.w	r2, [r3, #-44]
			for (uint16_t i = 1; i != 3; i++)
 8003c2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003c30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d1e9      	bne.n	8003c0a <TrafficDisplayTask+0x1ea>

			// Shift cars post light, and update mid array [0]
			ShiftRegisterValuePostLight(mid_light_traffic[2]);
 8003c36:	8c3b      	ldrh	r3, [r7, #32]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f885 	bl	8003d48 <ShiftRegisterValuePostLight>
			mid_light_traffic[0] = 0;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	83bb      	strh	r3, [r7, #28]

			// Update cars pre-light on red
			for (int16_t i = 8; i > 0; i--) {
 8003c42:	2308      	movs	r3, #8
 8003c44:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003c46:	e011      	b.n	8003c6c <TrafficDisplayTask+0x24c>
				ShiftRegisterValuePreLight(new_pre_light_traffic[i-1]);
 8003c48:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c54:	4413      	add	r3, r2
 8003c56:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f834 	bl	8003cc8 <ShiftRegisterValuePreLight>
			for (int16_t i = 8; i > 0; i--) {
 8003c60:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003c6c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	dce9      	bgt.n	8003c48 <TrafficDisplayTask+0x228>
			}

		}

		// Update current active array
		for (uint16_t i = 0; i != 8; i++)
 8003c74:	2300      	movs	r3, #0
 8003c76:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003c78:	e011      	b.n	8003c9e <TrafficDisplayTask+0x27e>
			pre_light_traffic[i] = new_pre_light_traffic[i];
 8003c7a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8003c7c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003c7e:	005b      	lsls	r3, r3, #1
 8003c80:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003c84:	440b      	add	r3, r1
 8003c86:	f833 1c3c 	ldrh.w	r1, [r3, #-60]
 8003c8a:	0053      	lsls	r3, r2, #1
 8003c8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003c90:	4413      	add	r3, r2
 8003c92:	460a      	mov	r2, r1
 8003c94:	f823 2c24 	strh.w	r2, [r3, #-36]
		for (uint16_t i = 0; i != 8; i++)
 8003c98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003c9e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d1ea      	bne.n	8003c7a <TrafficDisplayTask+0x25a>

		vTaskDelay(800);
 8003ca4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003ca8:	f7fe f812 	bl	8001cd0 <vTaskDelay>
		if (xSemaphoreTake(xMutexCars, (TickType_t)10) == pdTRUE)
 8003cac:	e6d4      	b.n	8003a58 <TrafficDisplayTask+0x38>
 8003cae:	bf00      	nop
 8003cb0:	20001eb0 	.word	0x20001eb0
 8003cb4:	20001eb8 	.word	0x20001eb8
 8003cb8:	08005230 	.word	0x08005230
 8003cbc:	20001ebc 	.word	0x20001ebc
 8003cc0:	20001eb4 	.word	0x20001eb4
 8003cc4:	08005248 	.word	0x08005248

08003cc8 <ShiftRegisterValuePreLight>:
	}
}

/* Update Register before intersection */
void ShiftRegisterValuePreLight(uint16_t value)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
	if (value)
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d004      	beq.n	8003ce2 <ShiftRegisterValuePreLight+0x1a>
		GPIO_SetBits(SHIFT_REG_1_PORT, SHIFT_REG_1_PIN);
 8003cd8:	2104      	movs	r1, #4
 8003cda:	480a      	ldr	r0, [pc, #40]	; (8003d04 <ShiftRegisterValuePreLight+0x3c>)
 8003cdc:	f7ff fc5c 	bl	8003598 <GPIO_SetBits>
 8003ce0:	e003      	b.n	8003cea <ShiftRegisterValuePreLight+0x22>
	else
		GPIO_ResetBits(SHIFT_REG_1_PORT, SHIFT_REG_1_PIN);
 8003ce2:	2104      	movs	r1, #4
 8003ce4:	4807      	ldr	r0, [pc, #28]	; (8003d04 <ShiftRegisterValuePreLight+0x3c>)
 8003ce6:	f7ff fc66 	bl	80035b6 <GPIO_ResetBits>

	// Reset
	GPIO_SetBits(SHIFT_REG_1_PORT, SHIFT_REG_CLK_1_PIN);
 8003cea:	2102      	movs	r1, #2
 8003cec:	4805      	ldr	r0, [pc, #20]	; (8003d04 <ShiftRegisterValuePreLight+0x3c>)
 8003cee:	f7ff fc53 	bl	8003598 <GPIO_SetBits>
	GPIO_ResetBits(SHIFT_REG_1_PORT, SHIFT_REG_CLK_1_PIN);
 8003cf2:	2102      	movs	r1, #2
 8003cf4:	4803      	ldr	r0, [pc, #12]	; (8003d04 <ShiftRegisterValuePreLight+0x3c>)
 8003cf6:	f7ff fc5e 	bl	80035b6 <GPIO_ResetBits>
}
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000

08003d08 <ShiftRegisterValueMidLight>:

/* Update Register in intersection */
void ShiftRegisterValueMidLight(uint16_t value)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	80fb      	strh	r3, [r7, #6]
	if (value)
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d004      	beq.n	8003d22 <ShiftRegisterValueMidLight+0x1a>
		GPIO_SetBits(SHIFT_REG_2_PORT, SHIFT_REG_2_PIN);
 8003d18:	2108      	movs	r1, #8
 8003d1a:	480a      	ldr	r0, [pc, #40]	; (8003d44 <ShiftRegisterValueMidLight+0x3c>)
 8003d1c:	f7ff fc3c 	bl	8003598 <GPIO_SetBits>
 8003d20:	e003      	b.n	8003d2a <ShiftRegisterValueMidLight+0x22>
	else
		GPIO_ResetBits(SHIFT_REG_2_PORT, SHIFT_REG_2_PIN);
 8003d22:	2108      	movs	r1, #8
 8003d24:	4807      	ldr	r0, [pc, #28]	; (8003d44 <ShiftRegisterValueMidLight+0x3c>)
 8003d26:	f7ff fc46 	bl	80035b6 <GPIO_ResetBits>

	// Reset
	GPIO_SetBits(SHIFT_REG_1_PORT, SHIFT_REG_CLK_1_PIN);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <ShiftRegisterValueMidLight+0x3c>)
 8003d2e:	f7ff fc33 	bl	8003598 <GPIO_SetBits>
	GPIO_ResetBits(SHIFT_REG_1_PORT, SHIFT_REG_CLK_1_PIN);
 8003d32:	2102      	movs	r1, #2
 8003d34:	4803      	ldr	r0, [pc, #12]	; (8003d44 <ShiftRegisterValueMidLight+0x3c>)
 8003d36:	f7ff fc3e 	bl	80035b6 <GPIO_ResetBits>
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000

08003d48 <ShiftRegisterValuePostLight>:

/* Update Register after intersection */
void ShiftRegisterValuePostLight(uint16_t value)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	80fb      	strh	r3, [r7, #6]
	if (value)
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <ShiftRegisterValuePostLight+0x1a>
		GPIO_SetBits(SHIFT_REG_3_PORT, SHIFT_REG_3_PIN);
 8003d58:	2110      	movs	r1, #16
 8003d5a:	480a      	ldr	r0, [pc, #40]	; (8003d84 <ShiftRegisterValuePostLight+0x3c>)
 8003d5c:	f7ff fc1c 	bl	8003598 <GPIO_SetBits>
 8003d60:	e003      	b.n	8003d6a <ShiftRegisterValuePostLight+0x22>
	else
		GPIO_ResetBits(SHIFT_REG_3_PORT, SHIFT_REG_3_PIN);
 8003d62:	2110      	movs	r1, #16
 8003d64:	4807      	ldr	r0, [pc, #28]	; (8003d84 <ShiftRegisterValuePostLight+0x3c>)
 8003d66:	f7ff fc26 	bl	80035b6 <GPIO_ResetBits>

	// Reset
	GPIO_SetBits(SHIFT_REG_1_PORT, SHIFT_REG_CLK_1_PIN);
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4805      	ldr	r0, [pc, #20]	; (8003d84 <ShiftRegisterValuePostLight+0x3c>)
 8003d6e:	f7ff fc13 	bl	8003598 <GPIO_SetBits>
	GPIO_ResetBits(SHIFT_REG_1_PORT, SHIFT_REG_CLK_1_PIN);
 8003d72:	2102      	movs	r1, #2
 8003d74:	4803      	ldr	r0, [pc, #12]	; (8003d84 <ShiftRegisterValuePostLight+0x3c>)
 8003d76:	f7ff fc1e 	bl	80035b6 <GPIO_ResetBits>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000

08003d88 <Green_LED_Controller_Callback>:
#include "TrafficLight.h"

/* Update traffic lights */
void Green_LED_Controller_Callback(xTimerHandle xTimer)
{
 8003d88:	b590      	push	{r4, r7, lr}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_GREEN_PIN);
 8003d90:	2104      	movs	r1, #4
 8003d92:	481b      	ldr	r0, [pc, #108]	; (8003e00 <Green_LED_Controller_Callback+0x78>)
 8003d94:	f7ff fc0f 	bl	80035b6 <GPIO_ResetBits>
	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_YELLOW_PIN);
 8003d98:	2110      	movs	r1, #16
 8003d9a:	4819      	ldr	r0, [pc, #100]	; (8003e00 <Green_LED_Controller_Callback+0x78>)
 8003d9c:	f7ff fbfc 	bl	8003598 <GPIO_SetBits>
	uint16_t new_light = 0x00;
 8003da0:	2300      	movs	r3, #0
 8003da2:	81fb      	strh	r3, [r7, #14]

	// Get Light Semaphore
	if (xSemaphoreTake(xMutexLight, (TickType_t)0) == pdTRUE)
 8003da4:	4b17      	ldr	r3, [pc, #92]	; (8003e04 <Green_LED_Controller_Callback+0x7c>)
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	2300      	movs	r3, #0
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	f7fd fbdf 	bl	8001570 <xQueueGenericReceive>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10f      	bne.n	8003dd8 <Green_LED_Controller_Callback+0x50>
	{
		xQueueOverwrite(xQueueLightColour, &new_light);
 8003db8:	4b13      	ldr	r3, [pc, #76]	; (8003e08 <Green_LED_Controller_Callback+0x80>)
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	f107 010e 	add.w	r1, r7, #14
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f7fd fa46 	bl	8001254 <xQueueGenericSend>
		xSemaphoreGive(xMutexLight);
 8003dc8:	4b0e      	ldr	r3, [pc, #56]	; (8003e04 <Green_LED_Controller_Callback+0x7c>)
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	2200      	movs	r2, #0
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	f7fd fa3f 	bl	8001254 <xQueueGenericSend>
 8003dd6:	e002      	b.n	8003dde <Green_LED_Controller_Callback+0x56>
	}
	else
		printf("xMutexLight already held \n");
 8003dd8:	480c      	ldr	r0, [pc, #48]	; (8003e0c <Green_LED_Controller_Callback+0x84>)
 8003dda:	f000 fd9d 	bl	8004918 <puts>

	// Move to yellow light
	xTimerStart(xYellowLightSoftwareTimer, 0);
 8003dde:	4b0c      	ldr	r3, [pc, #48]	; (8003e10 <Green_LED_Controller_Callback+0x88>)
 8003de0:	681c      	ldr	r4, [r3, #0]
 8003de2:	f7fe f89f 	bl	8001f24 <xTaskGetTickCount>
 8003de6:	4602      	mov	r2, r0
 8003de8:	2300      	movs	r3, #0
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	2300      	movs	r3, #0
 8003dee:	2101      	movs	r1, #1
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fe fdff 	bl	80029f4 <xTimerGenericCommand>
}
 8003df6:	bf00      	nop
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd90      	pop	{r4, r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40020c00 	.word	0x40020c00
 8003e04:	20001ebc 	.word	0x20001ebc
 8003e08:	20001eb4 	.word	0x20001eb4
 8003e0c:	08005264 	.word	0x08005264
 8003e10:	20001ecc 	.word	0x20001ecc

08003e14 <Yellow_LED_Controller_Callback>:

void Yellow_LED_Controller_Callback(xTimerHandle xTimer)
{
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_YELLOW_PIN);
 8003e1c:	2110      	movs	r1, #16
 8003e1e:	480b      	ldr	r0, [pc, #44]	; (8003e4c <Yellow_LED_Controller_Callback+0x38>)
 8003e20:	f7ff fbc9 	bl	80035b6 <GPIO_ResetBits>
	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_RED_PIN);
 8003e24:	2140      	movs	r1, #64	; 0x40
 8003e26:	4809      	ldr	r0, [pc, #36]	; (8003e4c <Yellow_LED_Controller_Callback+0x38>)
 8003e28:	f7ff fbb6 	bl	8003598 <GPIO_SetBits>

	// Move to red light
	xTimerStart(xRedLightSoftwareTimer, 0);
 8003e2c:	4b08      	ldr	r3, [pc, #32]	; (8003e50 <Yellow_LED_Controller_Callback+0x3c>)
 8003e2e:	681c      	ldr	r4, [r3, #0]
 8003e30:	f7fe f878 	bl	8001f24 <xTaskGetTickCount>
 8003e34:	4602      	mov	r2, r0
 8003e36:	2300      	movs	r3, #0
 8003e38:	9300      	str	r3, [sp, #0]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7fe fdd8 	bl	80029f4 <xTimerGenericCommand>
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd90      	pop	{r4, r7, pc}
 8003e4c:	40020c00 	.word	0x40020c00
 8003e50:	20001ec8 	.word	0x20001ec8

08003e54 <Red_LED_Controller_Callback>:

void Red_LED_Controller_Callback(xTimerHandle xTimer)
{
 8003e54:	b590      	push	{r4, r7, lr}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	6078      	str	r0, [r7, #4]
	GPIO_ResetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_RED_PIN);
 8003e5c:	2140      	movs	r1, #64	; 0x40
 8003e5e:	4819      	ldr	r0, [pc, #100]	; (8003ec4 <Red_LED_Controller_Callback+0x70>)
 8003e60:	f7ff fba9 	bl	80035b6 <GPIO_ResetBits>
	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_GREEN_PIN);
 8003e64:	2104      	movs	r1, #4
 8003e66:	4817      	ldr	r0, [pc, #92]	; (8003ec4 <Red_LED_Controller_Callback+0x70>)
 8003e68:	f7ff fb96 	bl	8003598 <GPIO_SetBits>

	// Get Light Semaphore
	if (xSemaphoreTake(xMutexLight, (TickType_t)0) == pdTRUE)
 8003e6c:	4b16      	ldr	r3, [pc, #88]	; (8003ec8 <Red_LED_Controller_Callback+0x74>)
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	2300      	movs	r3, #0
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	f7fd fb7b 	bl	8001570 <xQueueGenericReceive>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10e      	bne.n	8003e9e <Red_LED_Controller_Callback+0x4a>
	{
		xQueueOverwrite(xQueueLightColour, (uint16_t)1);
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <Red_LED_Controller_Callback+0x78>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	2302      	movs	r3, #2
 8003e86:	2200      	movs	r2, #0
 8003e88:	2101      	movs	r1, #1
 8003e8a:	f7fd f9e3 	bl	8001254 <xQueueGenericSend>
		xSemaphoreGive(xMutexLight);
 8003e8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <Red_LED_Controller_Callback+0x74>)
 8003e90:	6818      	ldr	r0, [r3, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	2200      	movs	r2, #0
 8003e96:	2100      	movs	r1, #0
 8003e98:	f7fd f9dc 	bl	8001254 <xQueueGenericSend>
 8003e9c:	e002      	b.n	8003ea4 <Red_LED_Controller_Callback+0x50>
	}
	else
		printf("xMutexLight already held \n");
 8003e9e:	480c      	ldr	r0, [pc, #48]	; (8003ed0 <Red_LED_Controller_Callback+0x7c>)
 8003ea0:	f000 fd3a 	bl	8004918 <puts>

	// Move to green light
	xTimerStart(xGreenLightSoftwareTimer, 0);
 8003ea4:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <Red_LED_Controller_Callback+0x80>)
 8003ea6:	681c      	ldr	r4, [r3, #0]
 8003ea8:	f7fe f83c 	bl	8001f24 <xTaskGetTickCount>
 8003eac:	4602      	mov	r2, r0
 8003eae:	2300      	movs	r3, #0
 8003eb0:	9300      	str	r3, [sp, #0]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2101      	movs	r1, #1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7fe fd9c 	bl	80029f4 <xTimerGenericCommand>
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd90      	pop	{r4, r7, pc}
 8003ec4:	40020c00 	.word	0x40020c00
 8003ec8:	20001ebc 	.word	0x20001ebc
 8003ecc:	20001eb4 	.word	0x20001eb4
 8003ed0:	08005264 	.word	0x08005264
 8003ed4:	20001ed0 	.word	0x20001ed0

08003ed8 <TrafficLightTask>:

/* Handle light timers using flow rate */
void TrafficLightTask(void *pvParameters)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	6078      	str	r0, [r7, #4]
	uint16_t new_speed = 7, current_speed = 0;
 8003ee0:	2307      	movs	r3, #7
 8003ee2:	81bb      	strh	r3, [r7, #12]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	81fb      	strh	r3, [r7, #14]

	while (1)
	{
		// Get Flow Semaphore
		if (xSemaphoreTake(xMutexFlow, (TickType_t)10) == pdTRUE)
 8003ee8:	4b73      	ldr	r3, [pc, #460]	; (80040b8 <TrafficLightTask+0x1e0>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	2300      	movs	r3, #0
 8003eee:	220a      	movs	r2, #10
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f7fd fb3d 	bl	8001570 <xQueueGenericReceive>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d10f      	bne.n	8003f1c <TrafficLightTask+0x44>
		{
			xQueueReceive(xQueueFlowRate, &new_speed, 0);
 8003efc:	4b6f      	ldr	r3, [pc, #444]	; (80040bc <TrafficLightTask+0x1e4>)
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	f107 010c 	add.w	r1, r7, #12
 8003f04:	2300      	movs	r3, #0
 8003f06:	2200      	movs	r2, #0
 8003f08:	f7fd fb32 	bl	8001570 <xQueueGenericReceive>
			xSemaphoreGive(xMutexFlow);
 8003f0c:	4b6a      	ldr	r3, [pc, #424]	; (80040b8 <TrafficLightTask+0x1e0>)
 8003f0e:	6818      	ldr	r0, [r3, #0]
 8003f10:	2300      	movs	r3, #0
 8003f12:	2200      	movs	r2, #0
 8003f14:	2100      	movs	r1, #0
 8003f16:	f7fd f99d 	bl	8001254 <xQueueGenericSend>
 8003f1a:	e002      	b.n	8003f22 <TrafficLightTask+0x4a>
		}
		else
			printf("xMutexFlow already held\n");
 8003f1c:	4868      	ldr	r0, [pc, #416]	; (80040c0 <TrafficLightTask+0x1e8>)
 8003f1e:	f000 fcfb 	bl	8004918 <puts>

		if (current_speed != new_speed)
 8003f22:	89bb      	ldrh	r3, [r7, #12]
 8003f24:	89fa      	ldrh	r2, [r7, #14]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	f000 80bf 	beq.w	80040aa <TrafficLightTask+0x1d2>
		{
			// Change light timers
			if (xTimerIsTimerActive(xRedLightSoftwareTimer))
 8003f2c:	4b65      	ldr	r3, [pc, #404]	; (80040c4 <TrafficLightTask+0x1ec>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fe fff9 	bl	8002f28 <xTimerIsTimerActive>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d037      	beq.n	8003fac <TrafficLightTask+0xd4>
			{
				xTimerStop(xRedLightSoftwareTimer, 0);
 8003f3c:	4b61      	ldr	r3, [pc, #388]	; (80040c4 <TrafficLightTask+0x1ec>)
 8003f3e:	6818      	ldr	r0, [r3, #0]
 8003f40:	2300      	movs	r3, #0
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	2300      	movs	r3, #0
 8003f46:	2200      	movs	r2, #0
 8003f48:	2103      	movs	r1, #3
 8003f4a:	f7fe fd53 	bl	80029f4 <xTimerGenericCommand>
				xTimerChangePeriod(xGreenLightSoftwareTimer, (5000 + 3000 * (8 - new_speed)) / portTICK_PERIOD_MS, 0);
 8003f4e:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <TrafficLightTask+0x1f0>)
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	89bb      	ldrh	r3, [r7, #12]
 8003f54:	f1c3 0308 	rsb	r3, r3, #8
 8003f58:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003f5c:	fb02 f303 	mul.w	r3, r2, r3
 8003f60:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003f64:	3308      	adds	r3, #8
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2104      	movs	r1, #4
 8003f70:	f7fe fd40 	bl	80029f4 <xTimerGenericCommand>
				xTimerStop(xGreenLightSoftwareTimer, 0);
 8003f74:	4b54      	ldr	r3, [pc, #336]	; (80040c8 <TrafficLightTask+0x1f0>)
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	2200      	movs	r2, #0
 8003f80:	2103      	movs	r1, #3
 8003f82:	f7fe fd37 	bl	80029f4 <xTimerGenericCommand>
				xTimerChangePeriod(xRedLightSoftwareTimer, (3000 + 1500 * (8 - new_speed)) / portTICK_PERIOD_MS, 0);
 8003f86:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <TrafficLightTask+0x1ec>)
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	89bb      	ldrh	r3, [r7, #12]
 8003f8c:	f1c3 0308 	rsb	r3, r3, #8
 8003f90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f94:	fb02 f303 	mul.w	r3, r2, r3
 8003f98:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	2104      	movs	r1, #4
 8003fa6:	f7fe fd25 	bl	80029f4 <xTimerGenericCommand>
 8003faa:	e07e      	b.n	80040aa <TrafficLightTask+0x1d2>
			}
			else if (xTimerIsTimerActive(xYellowLightSoftwareTimer))
 8003fac:	4b47      	ldr	r3, [pc, #284]	; (80040cc <TrafficLightTask+0x1f4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe ffb9 	bl	8002f28 <xTimerIsTimerActive>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d037      	beq.n	800402c <TrafficLightTask+0x154>
			{
				xTimerChangePeriod(xGreenLightSoftwareTimer, (5000 + 3000 * (8 - new_speed)) / portTICK_PERIOD_MS, 0);
 8003fbc:	4b42      	ldr	r3, [pc, #264]	; (80040c8 <TrafficLightTask+0x1f0>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	89bb      	ldrh	r3, [r7, #12]
 8003fc2:	f1c3 0308 	rsb	r3, r3, #8
 8003fc6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003fca:	fb02 f303 	mul.w	r3, r2, r3
 8003fce:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2104      	movs	r1, #4
 8003fde:	f7fe fd09 	bl	80029f4 <xTimerGenericCommand>
				xTimerStop(xGreenLightSoftwareTimer, 0);
 8003fe2:	4b39      	ldr	r3, [pc, #228]	; (80040c8 <TrafficLightTask+0x1f0>)
 8003fe4:	6818      	ldr	r0, [r3, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	2300      	movs	r3, #0
 8003fec:	2200      	movs	r2, #0
 8003fee:	2103      	movs	r1, #3
 8003ff0:	f7fe fd00 	bl	80029f4 <xTimerGenericCommand>
				xTimerChangePeriod(xRedLightSoftwareTimer, (3000 + 1500 * (8 - new_speed)) / portTICK_PERIOD_MS, 0);
 8003ff4:	4b33      	ldr	r3, [pc, #204]	; (80040c4 <TrafficLightTask+0x1ec>)
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	89bb      	ldrh	r3, [r7, #12]
 8003ffa:	f1c3 0308 	rsb	r3, r3, #8
 8003ffe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004002:	fb02 f303 	mul.w	r3, r2, r3
 8004006:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800400a:	461a      	mov	r2, r3
 800400c:	2300      	movs	r3, #0
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	2300      	movs	r3, #0
 8004012:	2104      	movs	r1, #4
 8004014:	f7fe fcee 	bl	80029f4 <xTimerGenericCommand>
				xTimerStop(xRedLightSoftwareTimer, 0);
 8004018:	4b2a      	ldr	r3, [pc, #168]	; (80040c4 <TrafficLightTask+0x1ec>)
 800401a:	6818      	ldr	r0, [r3, #0]
 800401c:	2300      	movs	r3, #0
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2300      	movs	r3, #0
 8004022:	2200      	movs	r2, #0
 8004024:	2103      	movs	r1, #3
 8004026:	f7fe fce5 	bl	80029f4 <xTimerGenericCommand>
 800402a:	e03e      	b.n	80040aa <TrafficLightTask+0x1d2>
			}
			else if (xTimerIsTimerActive(xGreenLightSoftwareTimer))
 800402c:	4b26      	ldr	r3, [pc, #152]	; (80040c8 <TrafficLightTask+0x1f0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe ff79 	bl	8002f28 <xTimerIsTimerActive>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d036      	beq.n	80040aa <TrafficLightTask+0x1d2>
			{
				xTimerStop(xGreenLightSoftwareTimer, 0);
 800403c:	4b22      	ldr	r3, [pc, #136]	; (80040c8 <TrafficLightTask+0x1f0>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	2200      	movs	r2, #0
 8004048:	2103      	movs	r1, #3
 800404a:	f7fe fcd3 	bl	80029f4 <xTimerGenericCommand>
				xTimerChangePeriod(xGreenLightSoftwareTimer, (5000 + 3000 * (8 - new_speed)) / portTICK_PERIOD_MS, 0);
 800404e:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <TrafficLightTask+0x1f0>)
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	89bb      	ldrh	r3, [r7, #12]
 8004054:	f1c3 0308 	rsb	r3, r3, #8
 8004058:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8004064:	3308      	adds	r3, #8
 8004066:	461a      	mov	r2, r3
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	2104      	movs	r1, #4
 8004070:	f7fe fcc0 	bl	80029f4 <xTimerGenericCommand>
				xTimerChangePeriod(xRedLightSoftwareTimer, (3000 + 1500 * (8 - new_speed)) / portTICK_PERIOD_MS, 0);
 8004074:	4b13      	ldr	r3, [pc, #76]	; (80040c4 <TrafficLightTask+0x1ec>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	89bb      	ldrh	r3, [r7, #12]
 800407a:	f1c3 0308 	rsb	r3, r3, #8
 800407e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004082:	fb02 f303 	mul.w	r3, r2, r3
 8004086:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800408a:	461a      	mov	r2, r3
 800408c:	2300      	movs	r3, #0
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2300      	movs	r3, #0
 8004092:	2104      	movs	r1, #4
 8004094:	f7fe fcae 	bl	80029f4 <xTimerGenericCommand>
				xTimerStop(xRedLightSoftwareTimer, 0);
 8004098:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <TrafficLightTask+0x1ec>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	2200      	movs	r2, #0
 80040a4:	2103      	movs	r1, #3
 80040a6:	f7fe fca5 	bl	80029f4 <xTimerGenericCommand>
			}
		}
		current_speed = new_speed;
 80040aa:	89bb      	ldrh	r3, [r7, #12]
 80040ac:	81fb      	strh	r3, [r7, #14]

		vTaskDelay(800);
 80040ae:	f44f 7048 	mov.w	r0, #800	; 0x320
 80040b2:	f7fd fe0d 	bl	8001cd0 <vTaskDelay>
		if (xSemaphoreTake(xMutexFlow, (TickType_t)10) == pdTRUE)
 80040b6:	e717      	b.n	8003ee8 <TrafficLightTask+0x10>
 80040b8:	20001ec4 	.word	0x20001ec4
 80040bc:	20001ec0 	.word	0x20001ec0
 80040c0:	08005280 	.word	0x08005280
 80040c4:	20001ec8 	.word	0x20001ec8
 80040c8:	20001ed0 	.word	0x20001ed0
 80040cc:	20001ecc 	.word	0x20001ecc

080040d0 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <NVIC_SetPriorityGrouping+0x44>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ec:	4013      	ands	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80040f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <NVIC_SetPriorityGrouping+0x44>)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	60d3      	str	r3, [r2, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <main>:
static void gpio_and_adc_init();

/*-----------------------------------------------------------*/

int main(void)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b085      	sub	sp, #20
 800411c:	af02      	add	r7, sp, #8
	gpio_and_adc_init();
 800411e:	f000 f8f9 	bl	8004314 <gpio_and_adc_init>

	xMutexFlow = xSemaphoreCreateMutex();
 8004122:	2001      	movs	r0, #1
 8004124:	f7fd f87e 	bl	8001224 <xQueueCreateMutex>
 8004128:	4602      	mov	r2, r0
 800412a:	4b5f      	ldr	r3, [pc, #380]	; (80042a8 <main+0x190>)
 800412c:	601a      	str	r2, [r3, #0]
	xMutexLight = xSemaphoreCreateMutex();
 800412e:	2001      	movs	r0, #1
 8004130:	f7fd f878 	bl	8001224 <xQueueCreateMutex>
 8004134:	4602      	mov	r2, r0
 8004136:	4b5d      	ldr	r3, [pc, #372]	; (80042ac <main+0x194>)
 8004138:	601a      	str	r2, [r3, #0]
	xMutexCars = xSemaphoreCreateMutex();
 800413a:	2001      	movs	r0, #1
 800413c:	f7fd f872 	bl	8001224 <xQueueCreateMutex>
 8004140:	4602      	mov	r2, r0
 8004142:	4b5b      	ldr	r3, [pc, #364]	; (80042b0 <main+0x198>)
 8004144:	601a      	str	r2, [r3, #0]

	xQueueFlowRate = xQueueCreate(1, sizeof(uint16_t));
 8004146:	2200      	movs	r2, #0
 8004148:	2102      	movs	r1, #2
 800414a:	2001      	movs	r0, #1
 800414c:	f7fc fff8 	bl	8001140 <xQueueGenericCreate>
 8004150:	4602      	mov	r2, r0
 8004152:	4b58      	ldr	r3, [pc, #352]	; (80042b4 <main+0x19c>)
 8004154:	601a      	str	r2, [r3, #0]
	xQueueLightColour = xQueueCreate(1, sizeof(uint16_t));
 8004156:	2200      	movs	r2, #0
 8004158:	2102      	movs	r1, #2
 800415a:	2001      	movs	r0, #1
 800415c:	f7fc fff0 	bl	8001140 <xQueueGenericCreate>
 8004160:	4602      	mov	r2, r0
 8004162:	4b55      	ldr	r3, [pc, #340]	; (80042b8 <main+0x1a0>)
 8004164:	601a      	str	r2, [r3, #0]
	xQueueCarValue = xQueueCreate(1, sizeof(uint16_t));
 8004166:	2200      	movs	r2, #0
 8004168:	2102      	movs	r1, #2
 800416a:	2001      	movs	r0, #1
 800416c:	f7fc ffe8 	bl	8001140 <xQueueGenericCreate>
 8004170:	4602      	mov	r2, r0
 8004172:	4b52      	ldr	r3, [pc, #328]	; (80042bc <main+0x1a4>)
 8004174:	601a      	str	r2, [r3, #0]

	// Give flow mutex if available
	if (xMutexFlow)
 8004176:	4b4c      	ldr	r3, [pc, #304]	; (80042a8 <main+0x190>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d007      	beq.n	800418e <main+0x76>
		xSemaphoreGive(xMutexFlow);
 800417e:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <main+0x190>)
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	2300      	movs	r3, #0
 8004184:	2200      	movs	r2, #0
 8004186:	2100      	movs	r1, #0
 8004188:	f7fd f864 	bl	8001254 <xQueueGenericSend>
 800418c:	e002      	b.n	8004194 <main+0x7c>
	else
		printf("Error: Flow Semaphore Unsuccessful. \n");
 800418e:	484c      	ldr	r0, [pc, #304]	; (80042c0 <main+0x1a8>)
 8004190:	f000 fbc2 	bl	8004918 <puts>

	// Give Light mutex if available
	if (xMutexLight)
 8004194:	4b45      	ldr	r3, [pc, #276]	; (80042ac <main+0x194>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <main+0x94>
		xSemaphoreGive(xMutexLight);
 800419c:	4b43      	ldr	r3, [pc, #268]	; (80042ac <main+0x194>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	2300      	movs	r3, #0
 80041a2:	2200      	movs	r2, #0
 80041a4:	2100      	movs	r1, #0
 80041a6:	f7fd f855 	bl	8001254 <xQueueGenericSend>
 80041aa:	e002      	b.n	80041b2 <main+0x9a>
	else
		printf("Error: Light Semaphore Unsuccessful. \n");
 80041ac:	4845      	ldr	r0, [pc, #276]	; (80042c4 <main+0x1ac>)
 80041ae:	f000 fbb3 	bl	8004918 <puts>

	// Give Car mutex if available
	if (xMutexCars)
 80041b2:	4b3f      	ldr	r3, [pc, #252]	; (80042b0 <main+0x198>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <main+0xb2>
		xSemaphoreGive(xMutexCars);
 80041ba:	4b3d      	ldr	r3, [pc, #244]	; (80042b0 <main+0x198>)
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	2300      	movs	r3, #0
 80041c0:	2200      	movs	r2, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	f7fd f846 	bl	8001254 <xQueueGenericSend>
 80041c8:	e002      	b.n	80041d0 <main+0xb8>
	else
		printf("Error: Cars Semaphore Unsuccessful. \n");
 80041ca:	483f      	ldr	r0, [pc, #252]	; (80042c8 <main+0x1b0>)
 80041cc:	f000 fba4 	bl	8004918 <puts>

	// Create necessary tasks
	xTaskCreate(TrafficCreatorTask, "Creator", configMINIMAL_STACK_SIZE, NULL, TRAFFIC_CREATE_TASK_PRIORITY, NULL);
 80041d0:	2300      	movs	r3, #0
 80041d2:	9301      	str	r3, [sp, #4]
 80041d4:	2302      	movs	r3, #2
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	2300      	movs	r3, #0
 80041da:	2282      	movs	r2, #130	; 0x82
 80041dc:	493b      	ldr	r1, [pc, #236]	; (80042cc <main+0x1b4>)
 80041de:	483c      	ldr	r0, [pc, #240]	; (80042d0 <main+0x1b8>)
 80041e0:	f7fd fc44 	bl	8001a6c <xTaskCreate>
	xTaskCreate(TrafficLightTask, "Light", configMINIMAL_STACK_SIZE, NULL, TRAFFIC_LIGHT_TASK_PRIORITY, NULL);
 80041e4:	2300      	movs	r3, #0
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	2302      	movs	r3, #2
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	2300      	movs	r3, #0
 80041ee:	2282      	movs	r2, #130	; 0x82
 80041f0:	4938      	ldr	r1, [pc, #224]	; (80042d4 <main+0x1bc>)
 80041f2:	4839      	ldr	r0, [pc, #228]	; (80042d8 <main+0x1c0>)
 80041f4:	f7fd fc3a 	bl	8001a6c <xTaskCreate>
	xTaskCreate(TrafficFlowAdjustmentTask, "FlowAdjust", configMINIMAL_STACK_SIZE, NULL, TRAFFIC_FLOW_TASK_PRIORITY, NULL);
 80041f8:	2300      	movs	r3, #0
 80041fa:	9301      	str	r3, [sp, #4]
 80041fc:	2301      	movs	r3, #1
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	2300      	movs	r3, #0
 8004202:	2282      	movs	r2, #130	; 0x82
 8004204:	4935      	ldr	r1, [pc, #212]	; (80042dc <main+0x1c4>)
 8004206:	4836      	ldr	r0, [pc, #216]	; (80042e0 <main+0x1c8>)
 8004208:	f7fd fc30 	bl	8001a6c <xTaskCreate>
	xTaskCreate(TrafficDisplayTask, "Display", configMINIMAL_STACK_SIZE, NULL, TRAFFIC_DISPLAY_TASK_PRIORITY, NULL);
 800420c:	2300      	movs	r3, #0
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	2300      	movs	r3, #0
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	2282      	movs	r2, #130	; 0x82
 8004218:	4932      	ldr	r1, [pc, #200]	; (80042e4 <main+0x1cc>)
 800421a:	4833      	ldr	r0, [pc, #204]	; (80042e8 <main+0x1d0>)
 800421c:	f7fd fc26 	bl	8001a6c <xTaskCreate>

	// Create traffic light timers
	xGreenLightSoftwareTimer = xTimerCreate("GreenLightTimer", 8500 / portTICK_PERIOD_MS, pdFALSE, (void *)0, Green_LED_Controller_Callback);
 8004220:	4b32      	ldr	r3, [pc, #200]	; (80042ec <main+0x1d4>)
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	2200      	movs	r2, #0
 8004228:	f242 1134 	movw	r1, #8500	; 0x2134
 800422c:	4830      	ldr	r0, [pc, #192]	; (80042f0 <main+0x1d8>)
 800422e:	f7fe fb93 	bl	8002958 <xTimerCreate>
 8004232:	4602      	mov	r2, r0
 8004234:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <main+0x1dc>)
 8004236:	601a      	str	r2, [r3, #0]
	xYellowLightSoftwareTimer = xTimerCreate("YellowLightTimer", 2500 / portTICK_PERIOD_MS, pdFALSE, (void *)0, Yellow_LED_Controller_Callback);
 8004238:	4b2f      	ldr	r3, [pc, #188]	; (80042f8 <main+0x1e0>)
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	2300      	movs	r3, #0
 800423e:	2200      	movs	r2, #0
 8004240:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8004244:	482d      	ldr	r0, [pc, #180]	; (80042fc <main+0x1e4>)
 8004246:	f7fe fb87 	bl	8002958 <xTimerCreate>
 800424a:	4602      	mov	r2, r0
 800424c:	4b2c      	ldr	r3, [pc, #176]	; (8004300 <main+0x1e8>)
 800424e:	601a      	str	r2, [r3, #0]
	xRedLightSoftwareTimer = xTimerCreate("RedLightTimer", 4500 / portTICK_PERIOD_MS, pdFALSE, (void *)0, Red_LED_Controller_Callback);
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <main+0x1ec>)
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	2300      	movs	r3, #0
 8004256:	2200      	movs	r2, #0
 8004258:	f241 1194 	movw	r1, #4500	; 0x1194
 800425c:	482a      	ldr	r0, [pc, #168]	; (8004308 <main+0x1f0>)
 800425e:	f7fe fb7b 	bl	8002958 <xTimerCreate>
 8004262:	4602      	mov	r2, r0
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <main+0x1f4>)
 8004266:	601a      	str	r2, [r3, #0]

	GPIO_SetBits(TRAFFIC_LIGHT_PORT, TRAFFIC_LIGHT_GREEN_PIN); // Turn traffic light to green
 8004268:	2104      	movs	r1, #4
 800426a:	4829      	ldr	r0, [pc, #164]	; (8004310 <main+0x1f8>)
 800426c:	f7ff f994 	bl	8003598 <GPIO_SetBits>

	uint16_t initial_light_color = 0x01;
 8004270:	2301      	movs	r3, #1
 8004272:	80fb      	strh	r3, [r7, #6]
	xQueueOverwrite(xQueueLightColour, &initial_light_color);
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <main+0x1a0>)
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	1db9      	adds	r1, r7, #6
 800427a:	2302      	movs	r3, #2
 800427c:	2200      	movs	r2, #0
 800427e:	f7fc ffe9 	bl	8001254 <xQueueGenericSend>
	xTimerStart(xGreenLightSoftwareTimer, 0); // Start traffic light timer
 8004282:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <main+0x1dc>)
 8004284:	681c      	ldr	r4, [r3, #0]
 8004286:	f7fd fe4d 	bl	8001f24 <xTaskGetTickCount>
 800428a:	4602      	mov	r2, r0
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	2101      	movs	r1, #1
 8004294:	4620      	mov	r0, r4
 8004296:	f7fe fbad 	bl	80029f4 <xTimerGenericCommand>

	vTaskStartScheduler(); // Begin task scheduler
 800429a:	f7fd fd4d 	bl	8001d38 <vTaskStartScheduler>

	// Loop forever!!!
	while (1)

	return 0;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd90      	pop	{r4, r7, pc}
 80042a8:	20001ec4 	.word	0x20001ec4
 80042ac:	20001ebc 	.word	0x20001ebc
 80042b0:	20001eb0 	.word	0x20001eb0
 80042b4:	20001ec0 	.word	0x20001ec0
 80042b8:	20001eb4 	.word	0x20001eb4
 80042bc:	20001eb8 	.word	0x20001eb8
 80042c0:	08005298 	.word	0x08005298
 80042c4:	080052c0 	.word	0x080052c0
 80042c8:	080052e8 	.word	0x080052e8
 80042cc:	08005310 	.word	0x08005310
 80042d0:	080038ed 	.word	0x080038ed
 80042d4:	08005318 	.word	0x08005318
 80042d8:	08003ed9 	.word	0x08003ed9
 80042dc:	08005320 	.word	0x08005320
 80042e0:	08003831 	.word	0x08003831
 80042e4:	0800532c 	.word	0x0800532c
 80042e8:	08003a21 	.word	0x08003a21
 80042ec:	08003d89 	.word	0x08003d89
 80042f0:	08005334 	.word	0x08005334
 80042f4:	20001ed0 	.word	0x20001ed0
 80042f8:	08003e15 	.word	0x08003e15
 80042fc:	08005344 	.word	0x08005344
 8004300:	20001ecc 	.word	0x20001ecc
 8004304:	08003e55 	.word	0x08003e55
 8004308:	08005358 	.word	0x08005358
 800430c:	20001ec8 	.word	0x20001ec8
 8004310:	40020c00 	.word	0x40020c00

08004314 <gpio_and_adc_init>:

/* Setup and initialize GPIO and ADC hardware */
static void gpio_and_adc_init()
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b090      	sub	sp, #64	; 0x40
 8004318:	af00      	add	r7, sp, #0
	NVIC_SetPriorityGrouping(0);
 800431a:	2000      	movs	r0, #0
 800431c:	f7ff fed8 	bl	80040d0 <NVIC_SetPriorityGrouping>
	// GPIO Initialization
	GPIO_InitTypeDef SHIFT_1_GPIO_InitStructure;
	GPIO_InitTypeDef SHIFT_2_GPIO_InitStructure;
	GPIO_InitTypeDef SHIFT_3_GPIO_InitStructure;
	GPIO_InitTypeDef TRAFFIC_GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8004320:	2101      	movs	r1, #1
 8004322:	2004      	movs	r0, #4
 8004324:	f7ff f956 	bl	80035d4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8004328:	2101      	movs	r1, #1
 800432a:	2008      	movs	r0, #8
 800432c:	f7ff f952 	bl	80035d4 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8004330:	2101      	movs	r1, #1
 8004332:	2010      	movs	r0, #16
 8004334:	f7ff f94e 	bl	80035d4 <RCC_AHB1PeriphClockCmd>
	// Initialize ADC
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef ADC_GPIO_InitStructure;

	// Output Pin
	SHIFT_1_GPIO_InitStructure.GPIO_Pin = SHIFT_REG_1_PIN | SHIFT_REG_CLK_1_PIN;
 8004338:	2306      	movs	r3, #6
 800433a:	63bb      	str	r3, [r7, #56]	; 0x38
	SHIFT_2_GPIO_InitStructure.GPIO_Pin = SHIFT_REG_2_PIN | SHIFT_REG_CLK_2_PIN;
 800433c:	230a      	movs	r3, #10
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
	SHIFT_3_GPIO_InitStructure.GPIO_Pin = SHIFT_REG_3_PIN | SHIFT_REG_CLK_3_PIN;
 8004340:	2312      	movs	r3, #18
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
	TRAFFIC_GPIO_InitStructure.GPIO_Pin = TRAFFIC_LIGHT_RED_PIN | TRAFFIC_LIGHT_YELLOW_PIN | TRAFFIC_LIGHT_GREEN_PIN;
 8004344:	2354      	movs	r3, #84	; 0x54
 8004346:	623b      	str	r3, [r7, #32]
	ADC_GPIO_InitStructure.GPIO_Pin = ADC_PIN;
 8004348:	2308      	movs	r3, #8
 800434a:	603b      	str	r3, [r7, #0]

	// Output mode
	SHIFT_1_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800434c:	2301      	movs	r3, #1
 800434e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	SHIFT_2_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	SHIFT_3_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	TRAFFIC_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ADC_GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8004364:	2303      	movs	r3, #3
 8004366:	713b      	strb	r3, [r7, #4]

	// Push-pull mode
	SHIFT_1_GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004368:	2300      	movs	r3, #0
 800436a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	SHIFT_2_GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800436e:	2300      	movs	r3, #0
 8004370:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	SHIFT_3_GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004374:	2300      	movs	r3, #0
 8004376:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	TRAFFIC_GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800437a:	2300      	movs	r3, #0
 800437c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// Disable pull ups and downs
	SHIFT_1_GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	SHIFT_2_GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004386:	2300      	movs	r3, #0
 8004388:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	SHIFT_3_GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800438c:	2300      	movs	r3, #0
 800438e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	TRAFFIC_GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004392:	2300      	movs	r3, #0
 8004394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	ADC_GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	71fb      	strb	r3, [r7, #7]

	// GPIO Speed for shift registers
	SHIFT_1_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 800439c:	2303      	movs	r3, #3
 800439e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	SHIFT_2_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80043a2:	2303      	movs	r3, #3
 80043a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	SHIFT_3_GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80043a8:	2303      	movs	r3, #3
 80043aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	// Initialize GPIO
	GPIO_Init(SHIFT_REG_1_PORT, &SHIFT_1_GPIO_InitStructure);
 80043ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043b2:	4619      	mov	r1, r3
 80043b4:	4822      	ldr	r0, [pc, #136]	; (8004440 <gpio_and_adc_init+0x12c>)
 80043b6:	f7ff f861 	bl	800347c <GPIO_Init>
	GPIO_Init(SHIFT_REG_2_PORT, &SHIFT_2_GPIO_InitStructure);
 80043ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043be:	4619      	mov	r1, r3
 80043c0:	481f      	ldr	r0, [pc, #124]	; (8004440 <gpio_and_adc_init+0x12c>)
 80043c2:	f7ff f85b 	bl	800347c <GPIO_Init>
	GPIO_Init(SHIFT_REG_3_PORT, &SHIFT_3_GPIO_InitStructure);
 80043c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ca:	4619      	mov	r1, r3
 80043cc:	481c      	ldr	r0, [pc, #112]	; (8004440 <gpio_and_adc_init+0x12c>)
 80043ce:	f7ff f855 	bl	800347c <GPIO_Init>
	GPIO_Init(TRAFFIC_LIGHT_PORT, &TRAFFIC_GPIO_InitStructure);
 80043d2:	f107 0320 	add.w	r3, r7, #32
 80043d6:	4619      	mov	r1, r3
 80043d8:	481a      	ldr	r0, [pc, #104]	; (8004444 <gpio_and_adc_init+0x130>)
 80043da:	f7ff f84f 	bl	800347c <GPIO_Init>
	GPIO_Init(GPIOC, &ADC_GPIO_InitStructure);
 80043de:	463b      	mov	r3, r7
 80043e0:	4619      	mov	r1, r3
 80043e2:	4819      	ldr	r0, [pc, #100]	; (8004448 <gpio_and_adc_init+0x134>)
 80043e4:	f7ff f84a 	bl	800347c <GPIO_Init>

	// Initialize RCC
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80043e8:	2101      	movs	r1, #1
 80043ea:	2004      	movs	r0, #4
 80043ec:	f7ff f8f2 	bl	80035d4 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80043f0:	2101      	movs	r1, #1
 80043f2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80043f6:	f7ff f90d 	bl	8003614 <RCC_APB2PeriphClockCmd>

	// Initialize ADC1
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 80043fe:	2300      	movs	r3, #0
 8004400:	733b      	strb	r3, [r7, #12]
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8004402:	2301      	movs	r3, #1
 8004404:	737b      	strb	r3, [r7, #13]
	ADC_InitStructure.ADC_ExternalTrigConv = DISABLE;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8004412:	2301      	movs	r3, #1
 8004414:	773b      	strb	r3, [r7, #28]
	ADC_Init(ADC1, &ADC_InitStructure);
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	4619      	mov	r1, r3
 800441c:	480b      	ldr	r0, [pc, #44]	; (800444c <gpio_and_adc_init+0x138>)
 800441e:	f7fe fda7 	bl	8002f70 <ADC_Init>
	ADC_Cmd(ADC1, ENABLE);
 8004422:	2101      	movs	r1, #1
 8004424:	4809      	ldr	r0, [pc, #36]	; (800444c <gpio_and_adc_init+0x138>)
 8004426:	f7fe fdf9 	bl	800301c <ADC_Cmd>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_13, 1, ADC_SampleTime_84Cycles);
 800442a:	2304      	movs	r3, #4
 800442c:	2201      	movs	r2, #1
 800442e:	210d      	movs	r1, #13
 8004430:	4806      	ldr	r0, [pc, #24]	; (800444c <gpio_and_adc_init+0x138>)
 8004432:	f7fe fe0f 	bl	8003054 <ADC_RegularChannelConfig>
}
 8004436:	bf00      	nop
 8004438:	3740      	adds	r7, #64	; 0x40
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40021000 	.word	0x40021000
 8004444:	40020c00 	.word	0x40020c00
 8004448:	40020800 	.word	0x40020800
 800444c:	40012000 	.word	0x40012000

08004450 <vApplicationMallocFailedHook>:

/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for (;;)
 8004454:	e7fe      	b.n	8004454 <vApplicationMallocFailedHook+0x4>

08004456 <vApplicationStackOverflowHook>:
		;
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook(xTaskHandle pxTask, signed char *pcTaskName)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
 800445e:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for (;;)
 8004460:	e7fe      	b.n	8004460 <vApplicationStackOverflowHook+0xa>

08004462 <vApplicationIdleHook>:
		;
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook(void)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b082      	sub	sp, #8
 8004466:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8004468:	f7fc fdf4 	bl	8001054 <xPortGetFreeHeapSize>
 800446c:	4603      	mov	r3, r0
 800446e:	607b      	str	r3, [r7, #4]

	if (xFreeStackSpace > 100)
 8004470:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 8004472:	bf00      	nop
 8004474:	3708      	adds	r7, #8
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800447c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800447e:	e003      	b.n	8004488 <LoopCopyDataInit>

08004480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004486:	3104      	adds	r1, #4

08004488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004488:	480a      	ldr	r0, [pc, #40]	; (80044b4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800448a:	4b0b      	ldr	r3, [pc, #44]	; (80044b8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800448c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800448e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004490:	d3f6      	bcc.n	8004480 <CopyDataInit>
  ldr  r2, =_sbss
 8004492:	4a0a      	ldr	r2, [pc, #40]	; (80044bc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004494:	e002      	b.n	800449c <LoopFillZerobss>

08004496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004498:	f842 3b04 	str.w	r3, [r2], #4

0800449c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800449c:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800449e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044a0:	d3f9      	bcc.n	8004496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044a2:	f000 f8f3 	bl	800468c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044a6:	f000 f9a3 	bl	80047f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044aa:	f7ff fe35 	bl	8004118 <main>
  bx  lr    
 80044ae:	4770      	bx	lr
  ldr  r3, =_sidata
 80044b0:	080053ec 	.word	0x080053ec
  ldr  r0, =_sdata
 80044b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044b8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80044bc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80044c0:	20001ed8 	.word	0x20001ed8

080044c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044c4:	e7fe      	b.n	80044c4 <ADC_IRQHandler>

080044c6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80044c6:	b480      	push	{r7}
 80044c8:	af00      	add	r7, sp, #0
}
 80044ca:	bf00      	nop
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80044d8:	e7fe      	b.n	80044d8 <HardFault_Handler+0x4>

080044da <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80044de:	e7fe      	b.n	80044de <MemManage_Handler+0x4>

080044e0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80044e4:	e7fe      	b.n	80044e4 <BusFault_Handler+0x4>

080044e6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80044e6:	b480      	push	{r7}
 80044e8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80044ea:	e7fe      	b.n	80044ea <UsageFault_Handler+0x4>

080044ec <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
	...

080044fc <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8004504:	4b13      	ldr	r3, [pc, #76]	; (8004554 <ITM_SendChar+0x58>)
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d01a      	beq.n	8004546 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8004510:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004514:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004518:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 800451c:	2b00      	cmp	r3, #0
 800451e:	d012      	beq.n	8004546 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 8004520:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004524:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004528:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00a      	beq.n	8004546 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8004530:	bf00      	nop
 8004532:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0fa      	beq.n	8004532 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 800453c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004546:	687b      	ldr	r3, [r7, #4]
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr
 8004554:	e000edf0 	.word	0xe000edf0

08004558 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	e009      	b.n	8004582 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	60ba      	str	r2, [r7, #8]
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ffc0 	bl	80044fc <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	3301      	adds	r3, #1
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	429a      	cmp	r2, r3
 8004588:	dbf1      	blt.n	800456e <_write+0x16>
 return len;
 800458a:	687b      	ldr	r3, [r7, #4]
}
 800458c:	4618      	mov	r0, r3
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_sbrk>:


void * _sbrk(int32_t incr)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <_sbrk+0x38>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <_sbrk+0x16>
		heap_end = & end;
 80045a4:	4b09      	ldr	r3, [pc, #36]	; (80045cc <_sbrk+0x38>)
 80045a6:	4a0a      	ldr	r2, [pc, #40]	; (80045d0 <_sbrk+0x3c>)
 80045a8:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <_sbrk+0x38>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 80045b0:	4b06      	ldr	r3, [pc, #24]	; (80045cc <_sbrk+0x38>)
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4413      	add	r3, r2
 80045b8:	4a04      	ldr	r2, [pc, #16]	; (80045cc <_sbrk+0x38>)
 80045ba:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	20001de8 	.word	0x20001de8
 80045d0:	20001ed8 	.word	0x20001ed8

080045d4 <_close>:

int _close(int32_t file)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <_close+0x20>)
 80045de:	2258      	movs	r2, #88	; 0x58
 80045e0:	601a      	str	r2, [r3, #0]
	return -1;
 80045e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20001ed4 	.word	0x20001ed4

080045f8 <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <_fstat+0x20>)
 8004604:	2258      	movs	r2, #88	; 0x58
 8004606:	601a      	str	r2, [r3, #0]
	return -1;
 8004608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	20001ed4 	.word	0x20001ed4

0800461c <_isatty>:

int _isatty(int32_t file)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 8004624:	4b04      	ldr	r3, [pc, #16]	; (8004638 <_isatty+0x1c>)
 8004626:	2258      	movs	r2, #88	; 0x58
 8004628:	601a      	str	r2, [r3, #0]
	return 0;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	20001ed4 	.word	0x20001ed4

0800463c <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <_lseek+0x24>)
 800464a:	2258      	movs	r2, #88	; 0x58
 800464c:	601a      	str	r2, [r3, #0]
	return -1;
 800464e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20001ed4 	.word	0x20001ed4

08004664 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <_read+0x24>)
 8004672:	2258      	movs	r2, #88	; 0x58
 8004674:	601a      	str	r2, [r3, #0]
	return -1;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20001ed4 	.word	0x20001ed4

0800468c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004690:	4a16      	ldr	r2, [pc, #88]	; (80046ec <SystemInit+0x60>)
 8004692:	4b16      	ldr	r3, [pc, #88]	; (80046ec <SystemInit+0x60>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800469c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80046a0:	4a13      	ldr	r2, [pc, #76]	; (80046f0 <SystemInit+0x64>)
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <SystemInit+0x64>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80046ac:	4b10      	ldr	r3, [pc, #64]	; (80046f0 <SystemInit+0x64>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80046b2:	4a0f      	ldr	r2, [pc, #60]	; (80046f0 <SystemInit+0x64>)
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <SystemInit+0x64>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80046bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <SystemInit+0x64>)
 80046c4:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <SystemInit+0x68>)
 80046c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80046c8:	4a09      	ldr	r2, [pc, #36]	; (80046f0 <SystemInit+0x64>)
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <SystemInit+0x64>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <SystemInit+0x64>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80046da:	f000 f80d 	bl	80046f8 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80046de:	4b03      	ldr	r3, [pc, #12]	; (80046ec <SystemInit+0x60>)
 80046e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046e4:	609a      	str	r2, [r3, #8]
#endif
}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	e000ed00 	.word	0xe000ed00
 80046f0:	40023800 	.word	0x40023800
 80046f4:	24003010 	.word	0x24003010

080046f8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	2300      	movs	r3, #0
 8004704:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004706:	4a36      	ldr	r2, [pc, #216]	; (80047e0 <SetSysClock+0xe8>)
 8004708:	4b35      	ldr	r3, [pc, #212]	; (80047e0 <SetSysClock+0xe8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004710:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004712:	4b33      	ldr	r3, [pc, #204]	; (80047e0 <SetSysClock+0xe8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3301      	adds	r3, #1
 8004720:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <SetSysClock+0x38>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800472e:	d1f0      	bne.n	8004712 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004730:	4b2b      	ldr	r3, [pc, #172]	; (80047e0 <SetSysClock+0xe8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d002      	beq.n	8004742 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800473c:	2301      	movs	r3, #1
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	e001      	b.n	8004746 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004742:	2300      	movs	r3, #0
 8004744:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d142      	bne.n	80047d2 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800474c:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <SetSysClock+0xe8>)
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <SetSysClock+0xe8>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004756:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8004758:	4a22      	ldr	r2, [pc, #136]	; (80047e4 <SetSysClock+0xec>)
 800475a:	4b22      	ldr	r3, [pc, #136]	; (80047e4 <SetSysClock+0xec>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004762:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004764:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <SetSysClock+0xe8>)
 8004766:	4b1e      	ldr	r3, [pc, #120]	; (80047e0 <SetSysClock+0xe8>)
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800476c:	4a1c      	ldr	r2, [pc, #112]	; (80047e0 <SetSysClock+0xe8>)
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <SetSysClock+0xe8>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004776:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004778:	4a19      	ldr	r2, [pc, #100]	; (80047e0 <SetSysClock+0xe8>)
 800477a:	4b19      	ldr	r3, [pc, #100]	; (80047e0 <SetSysClock+0xe8>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004782:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004784:	4b16      	ldr	r3, [pc, #88]	; (80047e0 <SetSysClock+0xe8>)
 8004786:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <SetSysClock+0xf0>)
 8004788:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800478a:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <SetSysClock+0xe8>)
 800478c:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <SetSysClock+0xe8>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004794:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004796:	bf00      	nop
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <SetSysClock+0xe8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0f9      	beq.n	8004798 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80047a4:	4b11      	ldr	r3, [pc, #68]	; (80047ec <SetSysClock+0xf4>)
 80047a6:	f240 6205 	movw	r2, #1541	; 0x605
 80047aa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80047ac:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <SetSysClock+0xe8>)
 80047ae:	4b0c      	ldr	r3, [pc, #48]	; (80047e0 <SetSysClock+0xe8>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0303 	bic.w	r3, r3, #3
 80047b6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80047b8:	4a09      	ldr	r2, [pc, #36]	; (80047e0 <SetSysClock+0xe8>)
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <SetSysClock+0xe8>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f043 0302 	orr.w	r3, r3, #2
 80047c2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80047c4:	bf00      	nop
 80047c6:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <SetSysClock+0xe8>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d1f9      	bne.n	80047c6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40023800 	.word	0x40023800
 80047e4:	40007000 	.word	0x40007000
 80047e8:	07405408 	.word	0x07405408
 80047ec:	40023c00 	.word	0x40023c00

080047f0 <__libc_init_array>:
 80047f0:	b570      	push	{r4, r5, r6, lr}
 80047f2:	4e0d      	ldr	r6, [pc, #52]	; (8004828 <__libc_init_array+0x38>)
 80047f4:	4c0d      	ldr	r4, [pc, #52]	; (800482c <__libc_init_array+0x3c>)
 80047f6:	1ba4      	subs	r4, r4, r6
 80047f8:	10a4      	asrs	r4, r4, #2
 80047fa:	2500      	movs	r5, #0
 80047fc:	42a5      	cmp	r5, r4
 80047fe:	d109      	bne.n	8004814 <__libc_init_array+0x24>
 8004800:	4e0b      	ldr	r6, [pc, #44]	; (8004830 <__libc_init_array+0x40>)
 8004802:	4c0c      	ldr	r4, [pc, #48]	; (8004834 <__libc_init_array+0x44>)
 8004804:	f000 fde2 	bl	80053cc <_init>
 8004808:	1ba4      	subs	r4, r4, r6
 800480a:	10a4      	asrs	r4, r4, #2
 800480c:	2500      	movs	r5, #0
 800480e:	42a5      	cmp	r5, r4
 8004810:	d105      	bne.n	800481e <__libc_init_array+0x2e>
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004818:	4798      	blx	r3
 800481a:	3501      	adds	r5, #1
 800481c:	e7ee      	b.n	80047fc <__libc_init_array+0xc>
 800481e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004822:	4798      	blx	r3
 8004824:	3501      	adds	r5, #1
 8004826:	e7f2      	b.n	800480e <__libc_init_array+0x1e>
 8004828:	080053e4 	.word	0x080053e4
 800482c:	080053e4 	.word	0x080053e4
 8004830:	080053e4 	.word	0x080053e4
 8004834:	080053e8 	.word	0x080053e8

08004838 <memcpy>:
 8004838:	b510      	push	{r4, lr}
 800483a:	1e43      	subs	r3, r0, #1
 800483c:	440a      	add	r2, r1
 800483e:	4291      	cmp	r1, r2
 8004840:	d100      	bne.n	8004844 <memcpy+0xc>
 8004842:	bd10      	pop	{r4, pc}
 8004844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004848:	f803 4f01 	strb.w	r4, [r3, #1]!
 800484c:	e7f7      	b.n	800483e <memcpy+0x6>

0800484e <memset>:
 800484e:	4402      	add	r2, r0
 8004850:	4603      	mov	r3, r0
 8004852:	4293      	cmp	r3, r2
 8004854:	d100      	bne.n	8004858 <memset+0xa>
 8004856:	4770      	bx	lr
 8004858:	f803 1b01 	strb.w	r1, [r3], #1
 800485c:	e7f9      	b.n	8004852 <memset+0x4>
	...

08004860 <_puts_r>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	460e      	mov	r6, r1
 8004864:	4605      	mov	r5, r0
 8004866:	b118      	cbz	r0, 8004870 <_puts_r+0x10>
 8004868:	6983      	ldr	r3, [r0, #24]
 800486a:	b90b      	cbnz	r3, 8004870 <_puts_r+0x10>
 800486c:	f000 fa48 	bl	8004d00 <__sinit>
 8004870:	69ab      	ldr	r3, [r5, #24]
 8004872:	68ac      	ldr	r4, [r5, #8]
 8004874:	b913      	cbnz	r3, 800487c <_puts_r+0x1c>
 8004876:	4628      	mov	r0, r5
 8004878:	f000 fa42 	bl	8004d00 <__sinit>
 800487c:	4b23      	ldr	r3, [pc, #140]	; (800490c <_puts_r+0xac>)
 800487e:	429c      	cmp	r4, r3
 8004880:	d117      	bne.n	80048b2 <_puts_r+0x52>
 8004882:	686c      	ldr	r4, [r5, #4]
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	071b      	lsls	r3, r3, #28
 8004888:	d51d      	bpl.n	80048c6 <_puts_r+0x66>
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	b1db      	cbz	r3, 80048c6 <_puts_r+0x66>
 800488e:	3e01      	subs	r6, #1
 8004890:	68a3      	ldr	r3, [r4, #8]
 8004892:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004896:	3b01      	subs	r3, #1
 8004898:	60a3      	str	r3, [r4, #8]
 800489a:	b9e9      	cbnz	r1, 80048d8 <_puts_r+0x78>
 800489c:	2b00      	cmp	r3, #0
 800489e:	da2e      	bge.n	80048fe <_puts_r+0x9e>
 80048a0:	4622      	mov	r2, r4
 80048a2:	210a      	movs	r1, #10
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 f879 	bl	800499c <__swbuf_r>
 80048aa:	3001      	adds	r0, #1
 80048ac:	d011      	beq.n	80048d2 <_puts_r+0x72>
 80048ae:	200a      	movs	r0, #10
 80048b0:	bd70      	pop	{r4, r5, r6, pc}
 80048b2:	4b17      	ldr	r3, [pc, #92]	; (8004910 <_puts_r+0xb0>)
 80048b4:	429c      	cmp	r4, r3
 80048b6:	d101      	bne.n	80048bc <_puts_r+0x5c>
 80048b8:	68ac      	ldr	r4, [r5, #8]
 80048ba:	e7e3      	b.n	8004884 <_puts_r+0x24>
 80048bc:	4b15      	ldr	r3, [pc, #84]	; (8004914 <_puts_r+0xb4>)
 80048be:	429c      	cmp	r4, r3
 80048c0:	bf08      	it	eq
 80048c2:	68ec      	ldreq	r4, [r5, #12]
 80048c4:	e7de      	b.n	8004884 <_puts_r+0x24>
 80048c6:	4621      	mov	r1, r4
 80048c8:	4628      	mov	r0, r5
 80048ca:	f000 f8b9 	bl	8004a40 <__swsetup_r>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d0dd      	beq.n	800488e <_puts_r+0x2e>
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295
 80048d6:	bd70      	pop	{r4, r5, r6, pc}
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da04      	bge.n	80048e6 <_puts_r+0x86>
 80048dc:	69a2      	ldr	r2, [r4, #24]
 80048de:	4293      	cmp	r3, r2
 80048e0:	db06      	blt.n	80048f0 <_puts_r+0x90>
 80048e2:	290a      	cmp	r1, #10
 80048e4:	d004      	beq.n	80048f0 <_puts_r+0x90>
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	1c5a      	adds	r2, r3, #1
 80048ea:	6022      	str	r2, [r4, #0]
 80048ec:	7019      	strb	r1, [r3, #0]
 80048ee:	e7cf      	b.n	8004890 <_puts_r+0x30>
 80048f0:	4622      	mov	r2, r4
 80048f2:	4628      	mov	r0, r5
 80048f4:	f000 f852 	bl	800499c <__swbuf_r>
 80048f8:	3001      	adds	r0, #1
 80048fa:	d1c9      	bne.n	8004890 <_puts_r+0x30>
 80048fc:	e7e9      	b.n	80048d2 <_puts_r+0x72>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	200a      	movs	r0, #10
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	6022      	str	r2, [r4, #0]
 8004906:	7018      	strb	r0, [r3, #0]
 8004908:	bd70      	pop	{r4, r5, r6, pc}
 800490a:	bf00      	nop
 800490c:	08005388 	.word	0x08005388
 8004910:	080053a8 	.word	0x080053a8
 8004914:	08005368 	.word	0x08005368

08004918 <puts>:
 8004918:	4b02      	ldr	r3, [pc, #8]	; (8004924 <puts+0xc>)
 800491a:	4601      	mov	r1, r0
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	f7ff bf9f 	b.w	8004860 <_puts_r>
 8004922:	bf00      	nop
 8004924:	20000018 	.word	0x20000018

08004928 <rand>:
 8004928:	4b19      	ldr	r3, [pc, #100]	; (8004990 <rand+0x68>)
 800492a:	b510      	push	{r4, lr}
 800492c:	681c      	ldr	r4, [r3, #0]
 800492e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004930:	b9d3      	cbnz	r3, 8004968 <rand+0x40>
 8004932:	2018      	movs	r0, #24
 8004934:	f000 fad2 	bl	8004edc <malloc>
 8004938:	f243 330e 	movw	r3, #13070	; 0x330e
 800493c:	63a0      	str	r0, [r4, #56]	; 0x38
 800493e:	8003      	strh	r3, [r0, #0]
 8004940:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8004944:	8043      	strh	r3, [r0, #2]
 8004946:	f241 2334 	movw	r3, #4660	; 0x1234
 800494a:	8083      	strh	r3, [r0, #4]
 800494c:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8004950:	80c3      	strh	r3, [r0, #6]
 8004952:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8004956:	8103      	strh	r3, [r0, #8]
 8004958:	2305      	movs	r3, #5
 800495a:	8143      	strh	r3, [r0, #10]
 800495c:	230b      	movs	r3, #11
 800495e:	8183      	strh	r3, [r0, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	2300      	movs	r3, #0
 8004964:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004968:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800496a:	480a      	ldr	r0, [pc, #40]	; (8004994 <rand+0x6c>)
 800496c:	690a      	ldr	r2, [r1, #16]
 800496e:	694b      	ldr	r3, [r1, #20]
 8004970:	4c09      	ldr	r4, [pc, #36]	; (8004998 <rand+0x70>)
 8004972:	4350      	muls	r0, r2
 8004974:	fb04 0003 	mla	r0, r4, r3, r0
 8004978:	fba2 2304 	umull	r2, r3, r2, r4
 800497c:	3201      	adds	r2, #1
 800497e:	4403      	add	r3, r0
 8004980:	f143 0300 	adc.w	r3, r3, #0
 8004984:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8004988:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800498c:	bd10      	pop	{r4, pc}
 800498e:	bf00      	nop
 8004990:	20000018 	.word	0x20000018
 8004994:	5851f42d 	.word	0x5851f42d
 8004998:	4c957f2d 	.word	0x4c957f2d

0800499c <__swbuf_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	460e      	mov	r6, r1
 80049a0:	4614      	mov	r4, r2
 80049a2:	4605      	mov	r5, r0
 80049a4:	b118      	cbz	r0, 80049ae <__swbuf_r+0x12>
 80049a6:	6983      	ldr	r3, [r0, #24]
 80049a8:	b90b      	cbnz	r3, 80049ae <__swbuf_r+0x12>
 80049aa:	f000 f9a9 	bl	8004d00 <__sinit>
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <__swbuf_r+0x98>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d12a      	bne.n	8004a0a <__swbuf_r+0x6e>
 80049b4:	686c      	ldr	r4, [r5, #4]
 80049b6:	69a3      	ldr	r3, [r4, #24]
 80049b8:	60a3      	str	r3, [r4, #8]
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	071a      	lsls	r2, r3, #28
 80049be:	d52e      	bpl.n	8004a1e <__swbuf_r+0x82>
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	b363      	cbz	r3, 8004a1e <__swbuf_r+0x82>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	1ac0      	subs	r0, r0, r3
 80049ca:	6963      	ldr	r3, [r4, #20]
 80049cc:	b2f6      	uxtb	r6, r6
 80049ce:	4298      	cmp	r0, r3
 80049d0:	4637      	mov	r7, r6
 80049d2:	db04      	blt.n	80049de <__swbuf_r+0x42>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f928 	bl	8004c2c <_fflush_r>
 80049dc:	bb28      	cbnz	r0, 8004a2a <__swbuf_r+0x8e>
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	60a3      	str	r3, [r4, #8]
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	6022      	str	r2, [r4, #0]
 80049ea:	701e      	strb	r6, [r3, #0]
 80049ec:	6963      	ldr	r3, [r4, #20]
 80049ee:	3001      	adds	r0, #1
 80049f0:	4298      	cmp	r0, r3
 80049f2:	d004      	beq.n	80049fe <__swbuf_r+0x62>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	07db      	lsls	r3, r3, #31
 80049f8:	d519      	bpl.n	8004a2e <__swbuf_r+0x92>
 80049fa:	2e0a      	cmp	r6, #10
 80049fc:	d117      	bne.n	8004a2e <__swbuf_r+0x92>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 f913 	bl	8004c2c <_fflush_r>
 8004a06:	b190      	cbz	r0, 8004a2e <__swbuf_r+0x92>
 8004a08:	e00f      	b.n	8004a2a <__swbuf_r+0x8e>
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <__swbuf_r+0x9c>)
 8004a0c:	429c      	cmp	r4, r3
 8004a0e:	d101      	bne.n	8004a14 <__swbuf_r+0x78>
 8004a10:	68ac      	ldr	r4, [r5, #8]
 8004a12:	e7d0      	b.n	80049b6 <__swbuf_r+0x1a>
 8004a14:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <__swbuf_r+0xa0>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	bf08      	it	eq
 8004a1a:	68ec      	ldreq	r4, [r5, #12]
 8004a1c:	e7cb      	b.n	80049b6 <__swbuf_r+0x1a>
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 f80d 	bl	8004a40 <__swsetup_r>
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d0cc      	beq.n	80049c4 <__swbuf_r+0x28>
 8004a2a:	f04f 37ff 	mov.w	r7, #4294967295
 8004a2e:	4638      	mov	r0, r7
 8004a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a32:	bf00      	nop
 8004a34:	08005388 	.word	0x08005388
 8004a38:	080053a8 	.word	0x080053a8
 8004a3c:	08005368 	.word	0x08005368

08004a40 <__swsetup_r>:
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <__swsetup_r+0xcc>)
 8004a42:	b570      	push	{r4, r5, r6, lr}
 8004a44:	681d      	ldr	r5, [r3, #0]
 8004a46:	4606      	mov	r6, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	b125      	cbz	r5, 8004a56 <__swsetup_r+0x16>
 8004a4c:	69ab      	ldr	r3, [r5, #24]
 8004a4e:	b913      	cbnz	r3, 8004a56 <__swsetup_r+0x16>
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 f955 	bl	8004d00 <__sinit>
 8004a56:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <__swsetup_r+0xd0>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	d10f      	bne.n	8004a7c <__swsetup_r+0x3c>
 8004a5c:	686c      	ldr	r4, [r5, #4]
 8004a5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	0715      	lsls	r5, r2, #28
 8004a66:	d42c      	bmi.n	8004ac2 <__swsetup_r+0x82>
 8004a68:	06d0      	lsls	r0, r2, #27
 8004a6a:	d411      	bmi.n	8004a90 <__swsetup_r+0x50>
 8004a6c:	2209      	movs	r2, #9
 8004a6e:	6032      	str	r2, [r6, #0]
 8004a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <__swsetup_r+0xd4>)
 8004a7e:	429c      	cmp	r4, r3
 8004a80:	d101      	bne.n	8004a86 <__swsetup_r+0x46>
 8004a82:	68ac      	ldr	r4, [r5, #8]
 8004a84:	e7eb      	b.n	8004a5e <__swsetup_r+0x1e>
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <__swsetup_r+0xd8>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	bf08      	it	eq
 8004a8c:	68ec      	ldreq	r4, [r5, #12]
 8004a8e:	e7e6      	b.n	8004a5e <__swsetup_r+0x1e>
 8004a90:	0751      	lsls	r1, r2, #29
 8004a92:	d512      	bpl.n	8004aba <__swsetup_r+0x7a>
 8004a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a96:	b141      	cbz	r1, 8004aaa <__swsetup_r+0x6a>
 8004a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d002      	beq.n	8004aa6 <__swsetup_r+0x66>
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 fa23 	bl	8004eec <_free_r>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f043 0308 	orr.w	r3, r3, #8
 8004ac0:	81a3      	strh	r3, [r4, #12]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	b94b      	cbnz	r3, 8004ada <__swsetup_r+0x9a>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad0:	d003      	beq.n	8004ada <__swsetup_r+0x9a>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 f9c1 	bl	8004e5c <__smakebuf_r>
 8004ada:	89a2      	ldrh	r2, [r4, #12]
 8004adc:	f012 0301 	ands.w	r3, r2, #1
 8004ae0:	d00c      	beq.n	8004afc <__swsetup_r+0xbc>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60a3      	str	r3, [r4, #8]
 8004ae6:	6963      	ldr	r3, [r4, #20]
 8004ae8:	425b      	negs	r3, r3
 8004aea:	61a3      	str	r3, [r4, #24]
 8004aec:	6923      	ldr	r3, [r4, #16]
 8004aee:	b953      	cbnz	r3, 8004b06 <__swsetup_r+0xc6>
 8004af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004af4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004af8:	d1ba      	bne.n	8004a70 <__swsetup_r+0x30>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	0792      	lsls	r2, r2, #30
 8004afe:	bf58      	it	pl
 8004b00:	6963      	ldrpl	r3, [r4, #20]
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	e7f2      	b.n	8004aec <__swsetup_r+0xac>
 8004b06:	2000      	movs	r0, #0
 8004b08:	e7f7      	b.n	8004afa <__swsetup_r+0xba>
 8004b0a:	bf00      	nop
 8004b0c:	20000018 	.word	0x20000018
 8004b10:	08005388 	.word	0x08005388
 8004b14:	080053a8 	.word	0x080053a8
 8004b18:	08005368 	.word	0x08005368

08004b1c <__sflush_r>:
 8004b1c:	898a      	ldrh	r2, [r1, #12]
 8004b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b22:	4605      	mov	r5, r0
 8004b24:	0710      	lsls	r0, r2, #28
 8004b26:	460c      	mov	r4, r1
 8004b28:	d45a      	bmi.n	8004be0 <__sflush_r+0xc4>
 8004b2a:	684b      	ldr	r3, [r1, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	dc05      	bgt.n	8004b3c <__sflush_r+0x20>
 8004b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	dc02      	bgt.n	8004b3c <__sflush_r+0x20>
 8004b36:	2000      	movs	r0, #0
 8004b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	d0f9      	beq.n	8004b36 <__sflush_r+0x1a>
 8004b42:	2300      	movs	r3, #0
 8004b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b48:	682f      	ldr	r7, [r5, #0]
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	d033      	beq.n	8004bb6 <__sflush_r+0x9a>
 8004b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	075a      	lsls	r2, r3, #29
 8004b54:	d505      	bpl.n	8004b62 <__sflush_r+0x46>
 8004b56:	6863      	ldr	r3, [r4, #4]
 8004b58:	1ac0      	subs	r0, r0, r3
 8004b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b5c:	b10b      	cbz	r3, 8004b62 <__sflush_r+0x46>
 8004b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b60:	1ac0      	subs	r0, r0, r3
 8004b62:	2300      	movs	r3, #0
 8004b64:	4602      	mov	r2, r0
 8004b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b68:	6a21      	ldr	r1, [r4, #32]
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b0      	blx	r6
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	d106      	bne.n	8004b82 <__sflush_r+0x66>
 8004b74:	6829      	ldr	r1, [r5, #0]
 8004b76:	291d      	cmp	r1, #29
 8004b78:	d84b      	bhi.n	8004c12 <__sflush_r+0xf6>
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	; (8004c28 <__sflush_r+0x10c>)
 8004b7c:	40ca      	lsrs	r2, r1
 8004b7e:	07d6      	lsls	r6, r2, #31
 8004b80:	d547      	bpl.n	8004c12 <__sflush_r+0xf6>
 8004b82:	2200      	movs	r2, #0
 8004b84:	6062      	str	r2, [r4, #4]
 8004b86:	04d9      	lsls	r1, r3, #19
 8004b88:	6922      	ldr	r2, [r4, #16]
 8004b8a:	6022      	str	r2, [r4, #0]
 8004b8c:	d504      	bpl.n	8004b98 <__sflush_r+0x7c>
 8004b8e:	1c42      	adds	r2, r0, #1
 8004b90:	d101      	bne.n	8004b96 <__sflush_r+0x7a>
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	b903      	cbnz	r3, 8004b98 <__sflush_r+0x7c>
 8004b96:	6560      	str	r0, [r4, #84]	; 0x54
 8004b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b9a:	602f      	str	r7, [r5, #0]
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d0ca      	beq.n	8004b36 <__sflush_r+0x1a>
 8004ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	d002      	beq.n	8004bae <__sflush_r+0x92>
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f99f 	bl	8004eec <_free_r>
 8004bae:	2000      	movs	r0, #0
 8004bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8004bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb6:	6a21      	ldr	r1, [r4, #32]
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4628      	mov	r0, r5
 8004bbc:	47b0      	blx	r6
 8004bbe:	1c41      	adds	r1, r0, #1
 8004bc0:	d1c6      	bne.n	8004b50 <__sflush_r+0x34>
 8004bc2:	682b      	ldr	r3, [r5, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0c3      	beq.n	8004b50 <__sflush_r+0x34>
 8004bc8:	2b1d      	cmp	r3, #29
 8004bca:	d001      	beq.n	8004bd0 <__sflush_r+0xb4>
 8004bcc:	2b16      	cmp	r3, #22
 8004bce:	d101      	bne.n	8004bd4 <__sflush_r+0xb8>
 8004bd0:	602f      	str	r7, [r5, #0]
 8004bd2:	e7b0      	b.n	8004b36 <__sflush_r+0x1a>
 8004bd4:	89a3      	ldrh	r3, [r4, #12]
 8004bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bda:	81a3      	strh	r3, [r4, #12]
 8004bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be0:	690f      	ldr	r7, [r1, #16]
 8004be2:	2f00      	cmp	r7, #0
 8004be4:	d0a7      	beq.n	8004b36 <__sflush_r+0x1a>
 8004be6:	0793      	lsls	r3, r2, #30
 8004be8:	680e      	ldr	r6, [r1, #0]
 8004bea:	bf08      	it	eq
 8004bec:	694b      	ldreq	r3, [r1, #20]
 8004bee:	600f      	str	r7, [r1, #0]
 8004bf0:	bf18      	it	ne
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	eba6 0807 	sub.w	r8, r6, r7
 8004bf8:	608b      	str	r3, [r1, #8]
 8004bfa:	f1b8 0f00 	cmp.w	r8, #0
 8004bfe:	dd9a      	ble.n	8004b36 <__sflush_r+0x1a>
 8004c00:	4643      	mov	r3, r8
 8004c02:	463a      	mov	r2, r7
 8004c04:	6a21      	ldr	r1, [r4, #32]
 8004c06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c08:	4628      	mov	r0, r5
 8004c0a:	47b0      	blx	r6
 8004c0c:	2800      	cmp	r0, #0
 8004c0e:	dc07      	bgt.n	8004c20 <__sflush_r+0x104>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c20:	4407      	add	r7, r0
 8004c22:	eba8 0800 	sub.w	r8, r8, r0
 8004c26:	e7e8      	b.n	8004bfa <__sflush_r+0xde>
 8004c28:	20400001 	.word	0x20400001

08004c2c <_fflush_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	690b      	ldr	r3, [r1, #16]
 8004c30:	4605      	mov	r5, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	b1db      	cbz	r3, 8004c6e <_fflush_r+0x42>
 8004c36:	b118      	cbz	r0, 8004c40 <_fflush_r+0x14>
 8004c38:	6983      	ldr	r3, [r0, #24]
 8004c3a:	b90b      	cbnz	r3, 8004c40 <_fflush_r+0x14>
 8004c3c:	f000 f860 	bl	8004d00 <__sinit>
 8004c40:	4b0c      	ldr	r3, [pc, #48]	; (8004c74 <_fflush_r+0x48>)
 8004c42:	429c      	cmp	r4, r3
 8004c44:	d109      	bne.n	8004c5a <_fflush_r+0x2e>
 8004c46:	686c      	ldr	r4, [r5, #4]
 8004c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4c:	b17b      	cbz	r3, 8004c6e <_fflush_r+0x42>
 8004c4e:	4621      	mov	r1, r4
 8004c50:	4628      	mov	r0, r5
 8004c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c56:	f7ff bf61 	b.w	8004b1c <__sflush_r>
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <_fflush_r+0x4c>)
 8004c5c:	429c      	cmp	r4, r3
 8004c5e:	d101      	bne.n	8004c64 <_fflush_r+0x38>
 8004c60:	68ac      	ldr	r4, [r5, #8]
 8004c62:	e7f1      	b.n	8004c48 <_fflush_r+0x1c>
 8004c64:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <_fflush_r+0x50>)
 8004c66:	429c      	cmp	r4, r3
 8004c68:	bf08      	it	eq
 8004c6a:	68ec      	ldreq	r4, [r5, #12]
 8004c6c:	e7ec      	b.n	8004c48 <_fflush_r+0x1c>
 8004c6e:	2000      	movs	r0, #0
 8004c70:	bd38      	pop	{r3, r4, r5, pc}
 8004c72:	bf00      	nop
 8004c74:	08005388 	.word	0x08005388
 8004c78:	080053a8 	.word	0x080053a8
 8004c7c:	08005368 	.word	0x08005368

08004c80 <_cleanup_r>:
 8004c80:	4901      	ldr	r1, [pc, #4]	; (8004c88 <_cleanup_r+0x8>)
 8004c82:	f000 b8a9 	b.w	8004dd8 <_fwalk_reent>
 8004c86:	bf00      	nop
 8004c88:	08004c2d 	.word	0x08004c2d

08004c8c <std.isra.0>:
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	b510      	push	{r4, lr}
 8004c90:	4604      	mov	r4, r0
 8004c92:	6003      	str	r3, [r0, #0]
 8004c94:	6043      	str	r3, [r0, #4]
 8004c96:	6083      	str	r3, [r0, #8]
 8004c98:	8181      	strh	r1, [r0, #12]
 8004c9a:	6643      	str	r3, [r0, #100]	; 0x64
 8004c9c:	81c2      	strh	r2, [r0, #14]
 8004c9e:	6103      	str	r3, [r0, #16]
 8004ca0:	6143      	str	r3, [r0, #20]
 8004ca2:	6183      	str	r3, [r0, #24]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	2208      	movs	r2, #8
 8004ca8:	305c      	adds	r0, #92	; 0x5c
 8004caa:	f7ff fdd0 	bl	800484e <memset>
 8004cae:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <std.isra.0+0x38>)
 8004cb0:	6263      	str	r3, [r4, #36]	; 0x24
 8004cb2:	4b05      	ldr	r3, [pc, #20]	; (8004cc8 <std.isra.0+0x3c>)
 8004cb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <std.isra.0+0x40>)
 8004cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cba:	4b05      	ldr	r3, [pc, #20]	; (8004cd0 <std.isra.0+0x44>)
 8004cbc:	6224      	str	r4, [r4, #32]
 8004cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	bf00      	nop
 8004cc4:	08005065 	.word	0x08005065
 8004cc8:	08005087 	.word	0x08005087
 8004ccc:	080050bf 	.word	0x080050bf
 8004cd0:	080050e3 	.word	0x080050e3

08004cd4 <__sfmoreglue>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	1e4a      	subs	r2, r1, #1
 8004cd8:	2568      	movs	r5, #104	; 0x68
 8004cda:	4355      	muls	r5, r2
 8004cdc:	460e      	mov	r6, r1
 8004cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ce2:	f000 f951 	bl	8004f88 <_malloc_r>
 8004ce6:	4604      	mov	r4, r0
 8004ce8:	b140      	cbz	r0, 8004cfc <__sfmoreglue+0x28>
 8004cea:	2100      	movs	r1, #0
 8004cec:	e880 0042 	stmia.w	r0, {r1, r6}
 8004cf0:	300c      	adds	r0, #12
 8004cf2:	60a0      	str	r0, [r4, #8]
 8004cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cf8:	f7ff fda9 	bl	800484e <memset>
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	bd70      	pop	{r4, r5, r6, pc}

08004d00 <__sinit>:
 8004d00:	6983      	ldr	r3, [r0, #24]
 8004d02:	b510      	push	{r4, lr}
 8004d04:	4604      	mov	r4, r0
 8004d06:	bb33      	cbnz	r3, 8004d56 <__sinit+0x56>
 8004d08:	6483      	str	r3, [r0, #72]	; 0x48
 8004d0a:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004d0c:	6503      	str	r3, [r0, #80]	; 0x50
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <__sinit+0x58>)
 8004d10:	4a12      	ldr	r2, [pc, #72]	; (8004d5c <__sinit+0x5c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	6282      	str	r2, [r0, #40]	; 0x28
 8004d16:	4298      	cmp	r0, r3
 8004d18:	bf04      	itt	eq
 8004d1a:	2301      	moveq	r3, #1
 8004d1c:	6183      	streq	r3, [r0, #24]
 8004d1e:	f000 f81f 	bl	8004d60 <__sfp>
 8004d22:	6060      	str	r0, [r4, #4]
 8004d24:	4620      	mov	r0, r4
 8004d26:	f000 f81b 	bl	8004d60 <__sfp>
 8004d2a:	60a0      	str	r0, [r4, #8]
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	f000 f817 	bl	8004d60 <__sfp>
 8004d32:	2200      	movs	r2, #0
 8004d34:	60e0      	str	r0, [r4, #12]
 8004d36:	2104      	movs	r1, #4
 8004d38:	6860      	ldr	r0, [r4, #4]
 8004d3a:	f7ff ffa7 	bl	8004c8c <std.isra.0>
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2109      	movs	r1, #9
 8004d42:	68a0      	ldr	r0, [r4, #8]
 8004d44:	f7ff ffa2 	bl	8004c8c <std.isra.0>
 8004d48:	2202      	movs	r2, #2
 8004d4a:	2112      	movs	r1, #18
 8004d4c:	68e0      	ldr	r0, [r4, #12]
 8004d4e:	f7ff ff9d 	bl	8004c8c <std.isra.0>
 8004d52:	2301      	movs	r3, #1
 8004d54:	61a3      	str	r3, [r4, #24]
 8004d56:	bd10      	pop	{r4, pc}
 8004d58:	080053c8 	.word	0x080053c8
 8004d5c:	08004c81 	.word	0x08004c81

08004d60 <__sfp>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <__sfp+0x74>)
 8004d64:	681e      	ldr	r6, [r3, #0]
 8004d66:	69b3      	ldr	r3, [r6, #24]
 8004d68:	4607      	mov	r7, r0
 8004d6a:	b913      	cbnz	r3, 8004d72 <__sfp+0x12>
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	f7ff ffc7 	bl	8004d00 <__sinit>
 8004d72:	3648      	adds	r6, #72	; 0x48
 8004d74:	68b4      	ldr	r4, [r6, #8]
 8004d76:	6873      	ldr	r3, [r6, #4]
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	d503      	bpl.n	8004d84 <__sfp+0x24>
 8004d7c:	6833      	ldr	r3, [r6, #0]
 8004d7e:	b133      	cbz	r3, 8004d8e <__sfp+0x2e>
 8004d80:	6836      	ldr	r6, [r6, #0]
 8004d82:	e7f7      	b.n	8004d74 <__sfp+0x14>
 8004d84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d88:	b16d      	cbz	r5, 8004da6 <__sfp+0x46>
 8004d8a:	3468      	adds	r4, #104	; 0x68
 8004d8c:	e7f4      	b.n	8004d78 <__sfp+0x18>
 8004d8e:	2104      	movs	r1, #4
 8004d90:	4638      	mov	r0, r7
 8004d92:	f7ff ff9f 	bl	8004cd4 <__sfmoreglue>
 8004d96:	6030      	str	r0, [r6, #0]
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	d1f1      	bne.n	8004d80 <__sfp+0x20>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	4604      	mov	r4, r0
 8004da2:	4620      	mov	r0, r4
 8004da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004daa:	81e3      	strh	r3, [r4, #14]
 8004dac:	2301      	movs	r3, #1
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	6665      	str	r5, [r4, #100]	; 0x64
 8004db2:	6025      	str	r5, [r4, #0]
 8004db4:	60a5      	str	r5, [r4, #8]
 8004db6:	6065      	str	r5, [r4, #4]
 8004db8:	6125      	str	r5, [r4, #16]
 8004dba:	6165      	str	r5, [r4, #20]
 8004dbc:	61a5      	str	r5, [r4, #24]
 8004dbe:	2208      	movs	r2, #8
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004dc6:	f7ff fd42 	bl	800484e <memset>
 8004dca:	6365      	str	r5, [r4, #52]	; 0x34
 8004dcc:	63a5      	str	r5, [r4, #56]	; 0x38
 8004dce:	64a5      	str	r5, [r4, #72]	; 0x48
 8004dd0:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004dd2:	e7e6      	b.n	8004da2 <__sfp+0x42>
 8004dd4:	080053c8 	.word	0x080053c8

08004dd8 <_fwalk_reent>:
 8004dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	4680      	mov	r8, r0
 8004dde:	4689      	mov	r9, r1
 8004de0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004de4:	2600      	movs	r6, #0
 8004de6:	b914      	cbnz	r4, 8004dee <_fwalk_reent+0x16>
 8004de8:	4630      	mov	r0, r6
 8004dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dee:	68a5      	ldr	r5, [r4, #8]
 8004df0:	6867      	ldr	r7, [r4, #4]
 8004df2:	3f01      	subs	r7, #1
 8004df4:	d501      	bpl.n	8004dfa <_fwalk_reent+0x22>
 8004df6:	6824      	ldr	r4, [r4, #0]
 8004df8:	e7f5      	b.n	8004de6 <_fwalk_reent+0xe>
 8004dfa:	89ab      	ldrh	r3, [r5, #12]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d907      	bls.n	8004e10 <_fwalk_reent+0x38>
 8004e00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e04:	3301      	adds	r3, #1
 8004e06:	d003      	beq.n	8004e10 <_fwalk_reent+0x38>
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	47c8      	blx	r9
 8004e0e:	4306      	orrs	r6, r0
 8004e10:	3568      	adds	r5, #104	; 0x68
 8004e12:	e7ee      	b.n	8004df2 <_fwalk_reent+0x1a>

08004e14 <__swhatbuf_r>:
 8004e14:	b570      	push	{r4, r5, r6, lr}
 8004e16:	460e      	mov	r6, r1
 8004e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1c:	2900      	cmp	r1, #0
 8004e1e:	b090      	sub	sp, #64	; 0x40
 8004e20:	4614      	mov	r4, r2
 8004e22:	461d      	mov	r5, r3
 8004e24:	da07      	bge.n	8004e36 <__swhatbuf_r+0x22>
 8004e26:	2300      	movs	r3, #0
 8004e28:	602b      	str	r3, [r5, #0]
 8004e2a:	89b3      	ldrh	r3, [r6, #12]
 8004e2c:	061a      	lsls	r2, r3, #24
 8004e2e:	d410      	bmi.n	8004e52 <__swhatbuf_r+0x3e>
 8004e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e34:	e00e      	b.n	8004e54 <__swhatbuf_r+0x40>
 8004e36:	aa01      	add	r2, sp, #4
 8004e38:	f000 f97a 	bl	8005130 <_fstat_r>
 8004e3c:	2800      	cmp	r0, #0
 8004e3e:	dbf2      	blt.n	8004e26 <__swhatbuf_r+0x12>
 8004e40:	9a02      	ldr	r2, [sp, #8]
 8004e42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004e46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004e4a:	425a      	negs	r2, r3
 8004e4c:	415a      	adcs	r2, r3
 8004e4e:	602a      	str	r2, [r5, #0]
 8004e50:	e7ee      	b.n	8004e30 <__swhatbuf_r+0x1c>
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	2000      	movs	r0, #0
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	b010      	add	sp, #64	; 0x40
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}

08004e5c <__smakebuf_r>:
 8004e5c:	898b      	ldrh	r3, [r1, #12]
 8004e5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e60:	079d      	lsls	r5, r3, #30
 8004e62:	4606      	mov	r6, r0
 8004e64:	460c      	mov	r4, r1
 8004e66:	d507      	bpl.n	8004e78 <__smakebuf_r+0x1c>
 8004e68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	6123      	str	r3, [r4, #16]
 8004e70:	2301      	movs	r3, #1
 8004e72:	6163      	str	r3, [r4, #20]
 8004e74:	b002      	add	sp, #8
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	ab01      	add	r3, sp, #4
 8004e7a:	466a      	mov	r2, sp
 8004e7c:	f7ff ffca 	bl	8004e14 <__swhatbuf_r>
 8004e80:	9900      	ldr	r1, [sp, #0]
 8004e82:	4605      	mov	r5, r0
 8004e84:	4630      	mov	r0, r6
 8004e86:	f000 f87f 	bl	8004f88 <_malloc_r>
 8004e8a:	b948      	cbnz	r0, 8004ea0 <__smakebuf_r+0x44>
 8004e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e90:	059a      	lsls	r2, r3, #22
 8004e92:	d4ef      	bmi.n	8004e74 <__smakebuf_r+0x18>
 8004e94:	f023 0303 	bic.w	r3, r3, #3
 8004e98:	f043 0302 	orr.w	r3, r3, #2
 8004e9c:	81a3      	strh	r3, [r4, #12]
 8004e9e:	e7e3      	b.n	8004e68 <__smakebuf_r+0xc>
 8004ea0:	4b0d      	ldr	r3, [pc, #52]	; (8004ed8 <__smakebuf_r+0x7c>)
 8004ea2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004ea4:	89a3      	ldrh	r3, [r4, #12]
 8004ea6:	6020      	str	r0, [r4, #0]
 8004ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eac:	81a3      	strh	r3, [r4, #12]
 8004eae:	9b00      	ldr	r3, [sp, #0]
 8004eb0:	6163      	str	r3, [r4, #20]
 8004eb2:	9b01      	ldr	r3, [sp, #4]
 8004eb4:	6120      	str	r0, [r4, #16]
 8004eb6:	b15b      	cbz	r3, 8004ed0 <__smakebuf_r+0x74>
 8004eb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ebc:	4630      	mov	r0, r6
 8004ebe:	f000 f949 	bl	8005154 <_isatty_r>
 8004ec2:	b128      	cbz	r0, 8004ed0 <__smakebuf_r+0x74>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f023 0303 	bic.w	r3, r3, #3
 8004eca:	f043 0301 	orr.w	r3, r3, #1
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	431d      	orrs	r5, r3
 8004ed4:	81a5      	strh	r5, [r4, #12]
 8004ed6:	e7cd      	b.n	8004e74 <__smakebuf_r+0x18>
 8004ed8:	08004c81 	.word	0x08004c81

08004edc <malloc>:
 8004edc:	4b02      	ldr	r3, [pc, #8]	; (8004ee8 <malloc+0xc>)
 8004ede:	4601      	mov	r1, r0
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	f000 b851 	b.w	8004f88 <_malloc_r>
 8004ee6:	bf00      	nop
 8004ee8:	20000018 	.word	0x20000018

08004eec <_free_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4605      	mov	r5, r0
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d045      	beq.n	8004f80 <_free_r+0x94>
 8004ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef8:	1f0c      	subs	r4, r1, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfb8      	it	lt
 8004efe:	18e4      	addlt	r4, r4, r3
 8004f00:	f000 f94a 	bl	8005198 <__malloc_lock>
 8004f04:	4a1f      	ldr	r2, [pc, #124]	; (8004f84 <_free_r+0x98>)
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	4610      	mov	r0, r2
 8004f0a:	b933      	cbnz	r3, 8004f1a <_free_r+0x2e>
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	6014      	str	r4, [r2, #0]
 8004f10:	4628      	mov	r0, r5
 8004f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f16:	f000 b940 	b.w	800519a <__malloc_unlock>
 8004f1a:	42a3      	cmp	r3, r4
 8004f1c:	d90c      	bls.n	8004f38 <_free_r+0x4c>
 8004f1e:	6821      	ldr	r1, [r4, #0]
 8004f20:	1862      	adds	r2, r4, r1
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bf04      	itt	eq
 8004f26:	681a      	ldreq	r2, [r3, #0]
 8004f28:	685b      	ldreq	r3, [r3, #4]
 8004f2a:	6063      	str	r3, [r4, #4]
 8004f2c:	bf04      	itt	eq
 8004f2e:	1852      	addeq	r2, r2, r1
 8004f30:	6022      	streq	r2, [r4, #0]
 8004f32:	6004      	str	r4, [r0, #0]
 8004f34:	e7ec      	b.n	8004f10 <_free_r+0x24>
 8004f36:	4613      	mov	r3, r2
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	b10a      	cbz	r2, 8004f40 <_free_r+0x54>
 8004f3c:	42a2      	cmp	r2, r4
 8004f3e:	d9fa      	bls.n	8004f36 <_free_r+0x4a>
 8004f40:	6819      	ldr	r1, [r3, #0]
 8004f42:	1858      	adds	r0, r3, r1
 8004f44:	42a0      	cmp	r0, r4
 8004f46:	d10b      	bne.n	8004f60 <_free_r+0x74>
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	4401      	add	r1, r0
 8004f4c:	1858      	adds	r0, r3, r1
 8004f4e:	4282      	cmp	r2, r0
 8004f50:	6019      	str	r1, [r3, #0]
 8004f52:	d1dd      	bne.n	8004f10 <_free_r+0x24>
 8004f54:	6810      	ldr	r0, [r2, #0]
 8004f56:	6852      	ldr	r2, [r2, #4]
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	4401      	add	r1, r0
 8004f5c:	6019      	str	r1, [r3, #0]
 8004f5e:	e7d7      	b.n	8004f10 <_free_r+0x24>
 8004f60:	d902      	bls.n	8004f68 <_free_r+0x7c>
 8004f62:	230c      	movs	r3, #12
 8004f64:	602b      	str	r3, [r5, #0]
 8004f66:	e7d3      	b.n	8004f10 <_free_r+0x24>
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	1821      	adds	r1, r4, r0
 8004f6c:	428a      	cmp	r2, r1
 8004f6e:	bf04      	itt	eq
 8004f70:	6811      	ldreq	r1, [r2, #0]
 8004f72:	6852      	ldreq	r2, [r2, #4]
 8004f74:	6062      	str	r2, [r4, #4]
 8004f76:	bf04      	itt	eq
 8004f78:	1809      	addeq	r1, r1, r0
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	605c      	str	r4, [r3, #4]
 8004f7e:	e7c7      	b.n	8004f10 <_free_r+0x24>
 8004f80:	bd38      	pop	{r3, r4, r5, pc}
 8004f82:	bf00      	nop
 8004f84:	20001dec 	.word	0x20001dec

08004f88 <_malloc_r>:
 8004f88:	b570      	push	{r4, r5, r6, lr}
 8004f8a:	1ccd      	adds	r5, r1, #3
 8004f8c:	f025 0503 	bic.w	r5, r5, #3
 8004f90:	3508      	adds	r5, #8
 8004f92:	2d0c      	cmp	r5, #12
 8004f94:	bf38      	it	cc
 8004f96:	250c      	movcc	r5, #12
 8004f98:	2d00      	cmp	r5, #0
 8004f9a:	4606      	mov	r6, r0
 8004f9c:	db01      	blt.n	8004fa2 <_malloc_r+0x1a>
 8004f9e:	42a9      	cmp	r1, r5
 8004fa0:	d903      	bls.n	8004faa <_malloc_r+0x22>
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	6033      	str	r3, [r6, #0]
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	bd70      	pop	{r4, r5, r6, pc}
 8004faa:	f000 f8f5 	bl	8005198 <__malloc_lock>
 8004fae:	4a23      	ldr	r2, [pc, #140]	; (800503c <_malloc_r+0xb4>)
 8004fb0:	6814      	ldr	r4, [r2, #0]
 8004fb2:	4621      	mov	r1, r4
 8004fb4:	b991      	cbnz	r1, 8004fdc <_malloc_r+0x54>
 8004fb6:	4c22      	ldr	r4, [pc, #136]	; (8005040 <_malloc_r+0xb8>)
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	b91b      	cbnz	r3, 8004fc4 <_malloc_r+0x3c>
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f000 f841 	bl	8005044 <_sbrk_r>
 8004fc2:	6020      	str	r0, [r4, #0]
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	f000 f83c 	bl	8005044 <_sbrk_r>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d126      	bne.n	800501e <_malloc_r+0x96>
 8004fd0:	230c      	movs	r3, #12
 8004fd2:	6033      	str	r3, [r6, #0]
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f000 f8e0 	bl	800519a <__malloc_unlock>
 8004fda:	e7e4      	b.n	8004fa6 <_malloc_r+0x1e>
 8004fdc:	680b      	ldr	r3, [r1, #0]
 8004fde:	1b5b      	subs	r3, r3, r5
 8004fe0:	d41a      	bmi.n	8005018 <_malloc_r+0x90>
 8004fe2:	2b0b      	cmp	r3, #11
 8004fe4:	d90f      	bls.n	8005006 <_malloc_r+0x7e>
 8004fe6:	600b      	str	r3, [r1, #0]
 8004fe8:	50cd      	str	r5, [r1, r3]
 8004fea:	18cc      	adds	r4, r1, r3
 8004fec:	4630      	mov	r0, r6
 8004fee:	f000 f8d4 	bl	800519a <__malloc_unlock>
 8004ff2:	f104 000b 	add.w	r0, r4, #11
 8004ff6:	1d23      	adds	r3, r4, #4
 8004ff8:	f020 0007 	bic.w	r0, r0, #7
 8004ffc:	1ac3      	subs	r3, r0, r3
 8004ffe:	d01b      	beq.n	8005038 <_malloc_r+0xb0>
 8005000:	425a      	negs	r2, r3
 8005002:	50e2      	str	r2, [r4, r3]
 8005004:	bd70      	pop	{r4, r5, r6, pc}
 8005006:	428c      	cmp	r4, r1
 8005008:	bf0d      	iteet	eq
 800500a:	6863      	ldreq	r3, [r4, #4]
 800500c:	684b      	ldrne	r3, [r1, #4]
 800500e:	6063      	strne	r3, [r4, #4]
 8005010:	6013      	streq	r3, [r2, #0]
 8005012:	bf18      	it	ne
 8005014:	460c      	movne	r4, r1
 8005016:	e7e9      	b.n	8004fec <_malloc_r+0x64>
 8005018:	460c      	mov	r4, r1
 800501a:	6849      	ldr	r1, [r1, #4]
 800501c:	e7ca      	b.n	8004fb4 <_malloc_r+0x2c>
 800501e:	1cc4      	adds	r4, r0, #3
 8005020:	f024 0403 	bic.w	r4, r4, #3
 8005024:	42a0      	cmp	r0, r4
 8005026:	d005      	beq.n	8005034 <_malloc_r+0xac>
 8005028:	1a21      	subs	r1, r4, r0
 800502a:	4630      	mov	r0, r6
 800502c:	f000 f80a 	bl	8005044 <_sbrk_r>
 8005030:	3001      	adds	r0, #1
 8005032:	d0cd      	beq.n	8004fd0 <_malloc_r+0x48>
 8005034:	6025      	str	r5, [r4, #0]
 8005036:	e7d9      	b.n	8004fec <_malloc_r+0x64>
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	bf00      	nop
 800503c:	20001dec 	.word	0x20001dec
 8005040:	20001df0 	.word	0x20001df0

08005044 <_sbrk_r>:
 8005044:	b538      	push	{r3, r4, r5, lr}
 8005046:	4c06      	ldr	r4, [pc, #24]	; (8005060 <_sbrk_r+0x1c>)
 8005048:	2300      	movs	r3, #0
 800504a:	4605      	mov	r5, r0
 800504c:	4608      	mov	r0, r1
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	f7ff faa0 	bl	8004594 <_sbrk>
 8005054:	1c43      	adds	r3, r0, #1
 8005056:	d102      	bne.n	800505e <_sbrk_r+0x1a>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	b103      	cbz	r3, 800505e <_sbrk_r+0x1a>
 800505c:	602b      	str	r3, [r5, #0]
 800505e:	bd38      	pop	{r3, r4, r5, pc}
 8005060:	20001ed4 	.word	0x20001ed4

08005064 <__sread>:
 8005064:	b510      	push	{r4, lr}
 8005066:	460c      	mov	r4, r1
 8005068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800506c:	f000 f896 	bl	800519c <_read_r>
 8005070:	2800      	cmp	r0, #0
 8005072:	bfab      	itete	ge
 8005074:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005076:	89a3      	ldrhlt	r3, [r4, #12]
 8005078:	181b      	addge	r3, r3, r0
 800507a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800507e:	bfac      	ite	ge
 8005080:	6563      	strge	r3, [r4, #84]	; 0x54
 8005082:	81a3      	strhlt	r3, [r4, #12]
 8005084:	bd10      	pop	{r4, pc}

08005086 <__swrite>:
 8005086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508a:	461f      	mov	r7, r3
 800508c:	898b      	ldrh	r3, [r1, #12]
 800508e:	05db      	lsls	r3, r3, #23
 8005090:	4605      	mov	r5, r0
 8005092:	460c      	mov	r4, r1
 8005094:	4616      	mov	r6, r2
 8005096:	d505      	bpl.n	80050a4 <__swrite+0x1e>
 8005098:	2302      	movs	r3, #2
 800509a:	2200      	movs	r2, #0
 800509c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050a0:	f000 f868 	bl	8005174 <_lseek_r>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	4632      	mov	r2, r6
 80050b2:	463b      	mov	r3, r7
 80050b4:	4628      	mov	r0, r5
 80050b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ba:	f000 b817 	b.w	80050ec <_write_r>

080050be <__sseek>:
 80050be:	b510      	push	{r4, lr}
 80050c0:	460c      	mov	r4, r1
 80050c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c6:	f000 f855 	bl	8005174 <_lseek_r>
 80050ca:	1c43      	adds	r3, r0, #1
 80050cc:	89a3      	ldrh	r3, [r4, #12]
 80050ce:	bf15      	itete	ne
 80050d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050da:	81a3      	strheq	r3, [r4, #12]
 80050dc:	bf18      	it	ne
 80050de:	81a3      	strhne	r3, [r4, #12]
 80050e0:	bd10      	pop	{r4, pc}

080050e2 <__sclose>:
 80050e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e6:	f000 b813 	b.w	8005110 <_close_r>
	...

080050ec <_write_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4c07      	ldr	r4, [pc, #28]	; (800510c <_write_r+0x20>)
 80050f0:	4605      	mov	r5, r0
 80050f2:	4608      	mov	r0, r1
 80050f4:	4611      	mov	r1, r2
 80050f6:	2200      	movs	r2, #0
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f7ff fa2c 	bl	8004558 <_write>
 8005100:	1c43      	adds	r3, r0, #1
 8005102:	d102      	bne.n	800510a <_write_r+0x1e>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	b103      	cbz	r3, 800510a <_write_r+0x1e>
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	20001ed4 	.word	0x20001ed4

08005110 <_close_r>:
 8005110:	b538      	push	{r3, r4, r5, lr}
 8005112:	4c06      	ldr	r4, [pc, #24]	; (800512c <_close_r+0x1c>)
 8005114:	2300      	movs	r3, #0
 8005116:	4605      	mov	r5, r0
 8005118:	4608      	mov	r0, r1
 800511a:	6023      	str	r3, [r4, #0]
 800511c:	f7ff fa5a 	bl	80045d4 <_close>
 8005120:	1c43      	adds	r3, r0, #1
 8005122:	d102      	bne.n	800512a <_close_r+0x1a>
 8005124:	6823      	ldr	r3, [r4, #0]
 8005126:	b103      	cbz	r3, 800512a <_close_r+0x1a>
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	20001ed4 	.word	0x20001ed4

08005130 <_fstat_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4c07      	ldr	r4, [pc, #28]	; (8005150 <_fstat_r+0x20>)
 8005134:	2300      	movs	r3, #0
 8005136:	4605      	mov	r5, r0
 8005138:	4608      	mov	r0, r1
 800513a:	4611      	mov	r1, r2
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	f7ff fa5b 	bl	80045f8 <_fstat>
 8005142:	1c43      	adds	r3, r0, #1
 8005144:	d102      	bne.n	800514c <_fstat_r+0x1c>
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	b103      	cbz	r3, 800514c <_fstat_r+0x1c>
 800514a:	602b      	str	r3, [r5, #0]
 800514c:	bd38      	pop	{r3, r4, r5, pc}
 800514e:	bf00      	nop
 8005150:	20001ed4 	.word	0x20001ed4

08005154 <_isatty_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	4c06      	ldr	r4, [pc, #24]	; (8005170 <_isatty_r+0x1c>)
 8005158:	2300      	movs	r3, #0
 800515a:	4605      	mov	r5, r0
 800515c:	4608      	mov	r0, r1
 800515e:	6023      	str	r3, [r4, #0]
 8005160:	f7ff fa5c 	bl	800461c <_isatty>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_isatty_r+0x1a>
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	b103      	cbz	r3, 800516e <_isatty_r+0x1a>
 800516c:	602b      	str	r3, [r5, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	20001ed4 	.word	0x20001ed4

08005174 <_lseek_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4c07      	ldr	r4, [pc, #28]	; (8005194 <_lseek_r+0x20>)
 8005178:	4605      	mov	r5, r0
 800517a:	4608      	mov	r0, r1
 800517c:	4611      	mov	r1, r2
 800517e:	2200      	movs	r2, #0
 8005180:	6022      	str	r2, [r4, #0]
 8005182:	461a      	mov	r2, r3
 8005184:	f7ff fa5a 	bl	800463c <_lseek>
 8005188:	1c43      	adds	r3, r0, #1
 800518a:	d102      	bne.n	8005192 <_lseek_r+0x1e>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	b103      	cbz	r3, 8005192 <_lseek_r+0x1e>
 8005190:	602b      	str	r3, [r5, #0]
 8005192:	bd38      	pop	{r3, r4, r5, pc}
 8005194:	20001ed4 	.word	0x20001ed4

08005198 <__malloc_lock>:
 8005198:	4770      	bx	lr

0800519a <__malloc_unlock>:
 800519a:	4770      	bx	lr

0800519c <_read_r>:
 800519c:	b538      	push	{r3, r4, r5, lr}
 800519e:	4c07      	ldr	r4, [pc, #28]	; (80051bc <_read_r+0x20>)
 80051a0:	4605      	mov	r5, r0
 80051a2:	4608      	mov	r0, r1
 80051a4:	4611      	mov	r1, r2
 80051a6:	2200      	movs	r2, #0
 80051a8:	6022      	str	r2, [r4, #0]
 80051aa:	461a      	mov	r2, r3
 80051ac:	f7ff fa5a 	bl	8004664 <_read>
 80051b0:	1c43      	adds	r3, r0, #1
 80051b2:	d102      	bne.n	80051ba <_read_r+0x1e>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	b103      	cbz	r3, 80051ba <_read_r+0x1e>
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	bd38      	pop	{r3, r4, r5, pc}
 80051bc:	20001ed4 	.word	0x20001ed4
 80051c0:	454c4449 	.word	0x454c4449
 80051c4:	00000000 	.word	0x00000000
 80051c8:	20726d54 	.word	0x20726d54
 80051cc:	00637653 	.word	0x00637653
 80051d0:	51726d54 	.word	0x51726d54
 80051d4:	00000000 	.word	0x00000000
 80051d8:	72617453 	.word	0x72617453
 80051dc:	72542074 	.word	0x72542074
 80051e0:	69666661 	.word	0x69666661
 80051e4:	6c462063 	.word	0x6c462063
 80051e8:	4120776f 	.word	0x4120776f
 80051ec:	73756a64 	.word	0x73756a64
 80051f0:	6e656d74 	.word	0x6e656d74
 80051f4:	61542074 	.word	0x61542074
 80051f8:	00006b73 	.word	0x00006b73
 80051fc:	74754d78 	.word	0x74754d78
 8005200:	6c467865 	.word	0x6c467865
 8005204:	6120776f 	.word	0x6120776f
 8005208:	6165726c 	.word	0x6165726c
 800520c:	68207964 	.word	0x68207964
 8005210:	00646c65 	.word	0x00646c65
 8005214:	72617453 	.word	0x72617453
 8005218:	72542074 	.word	0x72542074
 800521c:	69666661 	.word	0x69666661
 8005220:	72432063 	.word	0x72432063
 8005224:	6f746165 	.word	0x6f746165
 8005228:	61542072 	.word	0x61542072
 800522c:	00006b73 	.word	0x00006b73
 8005230:	74754d78 	.word	0x74754d78
 8005234:	61437865 	.word	0x61437865
 8005238:	61207372 	.word	0x61207372
 800523c:	6165726c 	.word	0x6165726c
 8005240:	68207964 	.word	0x68207964
 8005244:	00646c65 	.word	0x00646c65
 8005248:	74754d78 	.word	0x74754d78
 800524c:	694c7865 	.word	0x694c7865
 8005250:	20746867 	.word	0x20746867
 8005254:	65726c61 	.word	0x65726c61
 8005258:	20796461 	.word	0x20796461
 800525c:	646c6568 	.word	0x646c6568
 8005260:	00000000 	.word	0x00000000
 8005264:	74754d78 	.word	0x74754d78
 8005268:	694c7865 	.word	0x694c7865
 800526c:	20746867 	.word	0x20746867
 8005270:	65726c61 	.word	0x65726c61
 8005274:	20796461 	.word	0x20796461
 8005278:	646c6568 	.word	0x646c6568
 800527c:	00000020 	.word	0x00000020
 8005280:	74754d78 	.word	0x74754d78
 8005284:	6c467865 	.word	0x6c467865
 8005288:	6120776f 	.word	0x6120776f
 800528c:	6165726c 	.word	0x6165726c
 8005290:	68207964 	.word	0x68207964
 8005294:	00646c65 	.word	0x00646c65
 8005298:	6f727245 	.word	0x6f727245
 800529c:	46203a72 	.word	0x46203a72
 80052a0:	20776f6c 	.word	0x20776f6c
 80052a4:	616d6553 	.word	0x616d6553
 80052a8:	726f6870 	.word	0x726f6870
 80052ac:	6e552065 	.word	0x6e552065
 80052b0:	63637573 	.word	0x63637573
 80052b4:	66737365 	.word	0x66737365
 80052b8:	202e6c75 	.word	0x202e6c75
 80052bc:	00000000 	.word	0x00000000
 80052c0:	6f727245 	.word	0x6f727245
 80052c4:	4c203a72 	.word	0x4c203a72
 80052c8:	74686769 	.word	0x74686769
 80052cc:	6d655320 	.word	0x6d655320
 80052d0:	6f687061 	.word	0x6f687061
 80052d4:	55206572 	.word	0x55206572
 80052d8:	6375736e 	.word	0x6375736e
 80052dc:	73736563 	.word	0x73736563
 80052e0:	2e6c7566 	.word	0x2e6c7566
 80052e4:	00000020 	.word	0x00000020
 80052e8:	6f727245 	.word	0x6f727245
 80052ec:	43203a72 	.word	0x43203a72
 80052f0:	20737261 	.word	0x20737261
 80052f4:	616d6553 	.word	0x616d6553
 80052f8:	726f6870 	.word	0x726f6870
 80052fc:	6e552065 	.word	0x6e552065
 8005300:	63637573 	.word	0x63637573
 8005304:	66737365 	.word	0x66737365
 8005308:	202e6c75 	.word	0x202e6c75
 800530c:	00000000 	.word	0x00000000
 8005310:	61657243 	.word	0x61657243
 8005314:	00726f74 	.word	0x00726f74
 8005318:	6867694c 	.word	0x6867694c
 800531c:	00000074 	.word	0x00000074
 8005320:	776f6c46 	.word	0x776f6c46
 8005324:	756a6441 	.word	0x756a6441
 8005328:	00007473 	.word	0x00007473
 800532c:	70736944 	.word	0x70736944
 8005330:	0079616c 	.word	0x0079616c
 8005334:	65657247 	.word	0x65657247
 8005338:	67694c6e 	.word	0x67694c6e
 800533c:	69547468 	.word	0x69547468
 8005340:	0072656d 	.word	0x0072656d
 8005344:	6c6c6559 	.word	0x6c6c6559
 8005348:	694c776f 	.word	0x694c776f
 800534c:	54746867 	.word	0x54746867
 8005350:	72656d69 	.word	0x72656d69
 8005354:	00000000 	.word	0x00000000
 8005358:	4c646552 	.word	0x4c646552
 800535c:	74686769 	.word	0x74686769
 8005360:	656d6954 	.word	0x656d6954
 8005364:	00000072 	.word	0x00000072

08005368 <__sf_fake_stderr>:
	...

08005388 <__sf_fake_stdin>:
	...

080053a8 <__sf_fake_stdout>:
	...

080053c8 <_global_impure_ptr>:
 80053c8:	2000001c                                ... 

080053cc <_init>:
 80053cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ce:	bf00      	nop
 80053d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d2:	bc08      	pop	{r3}
 80053d4:	469e      	mov	lr, r3
 80053d6:	4770      	bx	lr

080053d8 <_fini>:
 80053d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053da:	bf00      	nop
 80053dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053de:	bc08      	pop	{r3}
 80053e0:	469e      	mov	lr, r3
 80053e2:	4770      	bx	lr
